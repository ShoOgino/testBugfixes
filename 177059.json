{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#minTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#minTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#minTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"minn\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"minn\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"minn\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"minn\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"minn\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"minn\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"minn\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"minn\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"minn\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"minn\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"minn\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"minn\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"minn\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"minn\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"minn\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"minn\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#minTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#minTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"minn\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"minn\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"minn\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"minn\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"minn\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"minn\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"minn\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"minn\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"minn\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"minn\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"minn\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"minn\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"minn\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"minn\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"minn\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"minn\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"min\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"min\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}