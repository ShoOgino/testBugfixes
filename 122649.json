{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","commits":[{"id":"a5cb8a7015ea492deb84f661910c6c5eb6908624","date":1535327336,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(space1, key1, dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n\n\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","sourceNew":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(space1, key1, dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","sourceNew":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(space1, key1, dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","sourceNew":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(space1, key1, dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(space1, key1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(space1)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","sourceNew":"  // NOTE: cache evaluators work only locally, on\n  // the same node where the replica that executes\n  // the stream is located\n  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    // find a node with a replica\n    ClusterState clusterState = cluster.getSolrClient().getClusterStateProvider().getClusterState();\n    String collection = useAlias ? COLLECTIONORALIAS + \"_collection\" : COLLECTIONORALIAS;\n    DocCollection coll = clusterState.getCollection(collection);\n    String node = coll.getReplicas().iterator().next().getNodeName();\n    String url = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(node)) {\n        url = jetty.getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n        break;\n      }\n    }\n    if (url == null) {\n      fail(\"unable to find a node with replica\");\n    }\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","bugFix":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCache().mjava","sourceNew":"  // NOTE: cache evaluators work only locally, on\n  // the same node where the replica that executes\n  // the stream is located\n  @Test\n  @SuppressWarnings({\"unchecked\"})\npublic void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    // find a node with a replica\n    ClusterState clusterState = cluster.getSolrClient().getClusterStateProvider().getClusterState();\n    String collection = useAlias ? COLLECTIONORALIAS + \"_collection\" : COLLECTIONORALIAS;\n    DocCollection coll = clusterState.getCollection(collection);\n    String node = coll.getReplicas().iterator().next().getNodeName();\n    String url = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(node)) {\n        url = jetty.getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n        break;\n      }\n    }\n    if (url == null) {\n      fail(\"unable to find a node with replica\");\n    }\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","sourceOld":"  // NOTE: cache evaluators work only locally, on\n  // the same node where the replica that executes\n  // the stream is located\n  @Test\n  public void testCache() throws Exception {\n    String cexpr = \"putCache(\\\"space1\\\", \\\"key1\\\", dotProduct(array(2,4,6,8,10,12),array(1,2,3,4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    // find a node with a replica\n    ClusterState clusterState = cluster.getSolrClient().getClusterStateProvider().getClusterState();\n    String collection = useAlias ? COLLECTIONORALIAS + \"_collection\" : COLLECTIONORALIAS;\n    DocCollection coll = clusterState.getCollection(collection);\n    String node = coll.getReplicas().iterator().next().getNodeName();\n    String url = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(node)) {\n        url = jetty.getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n        break;\n      }\n    }\n    if (url == null) {\n      fail(\"unable to find a node with replica\");\n    }\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"getCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<String> keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"key1\");\n\n    cexpr = \"listCache()\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 1);\n    assertEquals(keys.get(0), \"space1\");\n\n    cexpr = \"removeCache(\\\"space1\\\", \\\"key1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    dotProduct = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(dotProduct.doubleValue() == 182);\n\n\n    cexpr = \"listCache(\\\"space1\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    keys = (List<String>)tuples.get(0).get(\"return-value\");\n    assertEquals(keys.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7ced979f39d7651addfc7d805e1d9bfac215822":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a5cb8a7015ea492deb84f661910c6c5eb6908624","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a5cb8a7015ea492deb84f661910c6c5eb6908624","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["9ba1b632c041956c93c41aa1143d16a567014891"],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["d7ced979f39d7651addfc7d805e1d9bfac215822","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}