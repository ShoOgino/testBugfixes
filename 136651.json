{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","commits":[{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd022425b44cc560e45113a101ea40b06825d86","date":1108825489,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"654038228db838218b2f5a2a02df4f6ed01ec154","date":1121886703,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c15965e14235f835c17a1e8e8eb75bfb3a684e68","date":1173327536,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three)\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad8f8c5bbb34d418019b17b33e219ab14692d8d","date":1205222814,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dd022425b44cc560e45113a101ea40b06825d86":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["654038228db838218b2f5a2a02df4f6ed01ec154"],"654038228db838218b2f5a2a02df4f6ed01ec154":["7dd022425b44cc560e45113a101ea40b06825d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"bad8f8c5bbb34d418019b17b33e219ab14692d8d":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"7dd022425b44cc560e45113a101ea40b06825d86":["654038228db838218b2f5a2a02df4f6ed01ec154"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"654038228db838218b2f5a2a02df4f6ed01ec154":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["7dd022425b44cc560e45113a101ea40b06825d86"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"bad8f8c5bbb34d418019b17b33e219ab14692d8d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}