{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","sourceOld":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.AutomatonFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /** finds the smallest Lev(n) DFA that accepts the term. */\n    @Override\n    protected AcceptStatus accept(BytesRef term) {    \n      //System.out.println(\"AFTE.accept term=\" + term);\n      int ed = matchers.length - 1;\n      \n      // we are wrapping either an intersect() TermsEnum or an AutomatonTermsENum,\n      // so we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      //System.out.println(\"CHECK term=\" + term.utf8ToString() + \" ed=\" + ed);\n      \n      // scale to a boost and return (if similarity > minSimilarity)\n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        //System.out.println(\"  yes\");\n        return AcceptStatus.YES;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        final float similarity = 1.0f - ((float) ed / (float) \n            (Math.min(codePointCount, termLength)));\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          //System.out.println(\"  yes\");\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","89424def13674ea17829b41c5883c54ecc31a132"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}