{"path":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","sourceNew":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","sourceNew":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","sourceNew":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","sourceNew":null,"sourceOld":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/IteratorChain#recursiveHasNext().mjava","sourceNew":null,"sourceOld":"  /** test if current iterator hasNext(), and if not try the next\n   *  one in sequence, recursively\n   */\n  private boolean recursiveHasNext() {\n    // return false if we have no more iterators\n    if(current==null) {\n      if(itit.hasNext()) {\n        current=itit.next();\n      } else {\n        return false;\n      }\n    }\n    \n    boolean result = current.hasNext();\n    if(!result) {\n      current = null;\n      result = recursiveHasNext();\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["c26f00b574427b55127e869b935845554afde1fa","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}