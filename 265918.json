{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(3);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(3);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"494cdc6d3b60067f83082f0c19e18dc33dc2b375","date":1505902929,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(10);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(3);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(10);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(3);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","date":1527210146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    // we put a safety valve in place on the maximum number of buckets that we are willing to verify\n    // across *all* the queries that we do.\n    // that way if the randomized queries we build all have relatively small facets, so be it, but if\n    // we get a really big one early on, we can test as much as possible, skip other iterations.\n    //\n    // (deeply nested facets may contain more buckets then the max, but we won't *check* all of them)\n    final int maxBucketsAllowed = atLeast(2000);\n    final AtomicInteger maxBucketsToCheck = new AtomicInteger(maxBucketsAllowed);\n    \n    final int numIters = atLeast(20);\n    for (int iter = 0; iter < numIters && 0 < maxBucketsToCheck.get(); iter++) {\n      assertFacetCountsAreCorrect(maxBucketsToCheck, TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n    assertTrue(\"Didn't check a single bucket???\", maxBucketsToCheck.get() < maxBucketsAllowed);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    final int numIters = atLeast(10);\n    for (int iter = 0; iter < numIters; iter++) {\n      assertFacetCountsAreCorrect(TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    // we put a safety valve in place on the maximum number of buckets that we are willing to verify\n    // across *all* the queries that we do.\n    // that way if the randomized queries we build all have relatively small facets, so be it, but if\n    // we get a really big one early on, we can test as much as possible, skip other iterations.\n    //\n    // (deeply nested facets may contain more buckets then the max, but we won't *check* all of them)\n    final int maxBucketsAllowed = atLeast(2000);\n    final AtomicInteger maxBucketsToCheck = new AtomicInteger(maxBucketsAllowed);\n    \n    final int numIters = atLeast(20);\n    for (int iter = 0; iter < numIters && 0 < maxBucketsToCheck.get(); iter++) {\n      assertFacetCountsAreCorrect(maxBucketsToCheck, TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n    assertTrue(\"Didn't check a single bucket???\", maxBucketsToCheck.get() < maxBucketsAllowed);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    // we put a safety valve in place on the maximum number of buckets that we are willing to verify\n    // across *all* the queries that we do.\n    // that way if the randomized queries we build all have relatively small facets, so be it, but if\n    // we get a really big one early on, we can test as much as possible, skip other iterations.\n    //\n    // (deeply nested facets may contain more buckets then the max, but we won't *check* all of them)\n    final int maxBucketsAllowed = atLeast(2000);\n    final AtomicInteger maxBucketsToCheck = new AtomicInteger(maxBucketsAllowed);\n    \n    final int numIters = atLeast(20);\n    for (int iter = 0; iter < numIters && 0 < maxBucketsToCheck.get(); iter++) {\n      assertFacetCountsAreCorrect(maxBucketsToCheck, TermFacet.buildRandomFacets(), buildRandomQuery());\n    }\n    assertTrue(\"Didn't check a single bucket???\", maxBucketsToCheck.get() < maxBucketsAllowed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"494cdc6d3b60067f83082f0c19e18dc33dc2b375":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["e9017cf144952056066919f1ebc7897ff9bd71b1","494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"494cdc6d3b60067f83082f0c19e18dc33dc2b375":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}