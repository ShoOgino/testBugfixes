{"path":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#radixSelect(int,int,int,int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#radixSelect(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void radixSelect(int from, int to, int k, int d) {\n    final int[] histogram = this.histogram;\n    Arrays.fill(histogram, 0);\n\n    buildHistogram(from, to, d, histogram);\n\n    int bucketFrom = from;\n    for (int bucket = 0; bucket < HISTOGRAM_SIZE; ++bucket) {\n      final int bucketTo = bucketFrom + histogram[bucket];\n\n      if (bucketTo > k) {\n        partition(from, to, bucket, bucketFrom, bucketTo, d);\n\n        if (bucket != 0 && d + 1 < maxLength) {\n          // all elements in bucket 0 are equal so we only need to recurse if bucket != 0\n          select(bucketFrom, bucketTo, k, d + 1);\n        }\n        return;\n      }\n      bucketFrom = bucketTo;\n    }\n    throw new AssertionError(\"Unreachable code\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#radixSelect(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#radixSelect(int,int,int,int).mjava","sourceNew":"  /**\n   * @param d the character number to compare\n   * @param l the level of recursion\n   */\n  private void radixSelect(int from, int to, int k, int d, int l) {\n    final int[] histogram = this.histogram;\n    Arrays.fill(histogram, 0);\n\n    final int commonPrefixLength = computeCommonPrefixLengthAndBuildHistogram(from, to, d, histogram);\n    if (commonPrefixLength > 0) {\n      // if there are no more chars to compare or if all entries fell into the\n      // first bucket (which means strings are shorter than d) then we are done\n      // otherwise recurse\n      if (d + commonPrefixLength < maxLength\n          && histogram[0] < to - from) {\n        radixSelect(from, to, k, d + commonPrefixLength, l);\n      }\n      return;\n    }\n    assert assertHistogram(commonPrefixLength, histogram);\n\n    int bucketFrom = from;\n    for (int bucket = 0; bucket < HISTOGRAM_SIZE; ++bucket) {\n      final int bucketTo = bucketFrom + histogram[bucket];\n\n      if (bucketTo > k) {\n        partition(from, to, bucket, bucketFrom, bucketTo, d);\n\n        if (bucket != 0 && d + 1 < maxLength) {\n          // all elements in bucket 0 are equal so we only need to recurse if bucket != 0\n          select(bucketFrom, bucketTo, k, d + 1, l + 1);\n        }\n        return;\n      }\n      bucketFrom = bucketTo;\n    }\n    throw new AssertionError(\"Unreachable code\");\n  }\n\n","sourceOld":"  private void radixSelect(int from, int to, int k, int d) {\n    final int[] histogram = this.histogram;\n    Arrays.fill(histogram, 0);\n\n    buildHistogram(from, to, d, histogram);\n\n    int bucketFrom = from;\n    for (int bucket = 0; bucket < HISTOGRAM_SIZE; ++bucket) {\n      final int bucketTo = bucketFrom + histogram[bucket];\n\n      if (bucketTo > k) {\n        partition(from, to, bucket, bucketFrom, bucketTo, d);\n\n        if (bucket != 0 && d + 1 < maxLength) {\n          // all elements in bucket 0 are equal so we only need to recurse if bucket != 0\n          select(bucketFrom, bucketTo, k, d + 1);\n        }\n        return;\n      }\n      bucketFrom = bucketTo;\n    }\n    throw new AssertionError(\"Unreachable code\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}