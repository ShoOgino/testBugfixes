{"path":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","commits":[{"id":"c0a21baa7591e89ae2649015a5a3db64cbe87a73","date":1456346302,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encode(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5839bca64b33c24668e37476ee168d00dc0bb96d","1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","date":1456349953,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = encode(values[upto]);\n                                     assert value.bytes.length == value.length;\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encode(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = encode(values[upto]);\n                                     assert value.bytes.length == value.length;\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = encode(sortedValues[upto]);\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = encode(values[upto]);\n                                     assert value.bytes.length == value.length;\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"bugIntro":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = encode(sortedValues[upto]);\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = encode(values[upto]);\n                                     assert value.bytes.length == value.length;\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = encode(sortedValues[upto]);\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     value.bytes = encode(values[upto]);\n                                     assert value.bytes.length == value.length;\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    InetAddress[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = encode(sortedValues[upto]);\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace","c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0a21baa7591e89ae2649015a5a3db64cbe87a73","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}