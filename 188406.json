{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertTraceOk(String,SolrParams,List[PivotField]).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertTraceOk(String,SolrParams,List[PivotField]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify that the PivotFields we're lookin at doesn't violate any of the expected \n   * behaviors based on the <code>TRACE_*</code> params found in the base params\n   */\n  private void assertTraceOk(String pivotName, SolrParams baseParams, List<PivotField> constraints) {\n    if (null == constraints || 0 == constraints.size()) {\n      return;\n    }\n    final int maxIdx = constraints.size() - 1;\n      \n    final int min = baseParams.getInt(TRACE_MIN, -1);\n    final boolean expectMissing = baseParams.getBool(TRACE_MISS, false);\n    final boolean checkCount = \"count\".equals(baseParams.get(TRACE_SORT, \"count\"));\n\n    int prevCount = Integer.MAX_VALUE;\n\n    for (int i = 0; i <= maxIdx; i++) {\n      final PivotField constraint = constraints.get(i);\n      final int count = constraint.getCount();\n\n      if (0 < min) {\n        assertTrue(pivotName + \": val #\"+i +\" of \" + maxIdx + \n                   \": count(\"+count+\") < facet.mincount(\"+min+\"): \" + constraint,\n                   min <= count);\n      }\n      // missing value must always come last, but only if facet.missing was used\n      // and may not exist at all (mincount, none missing for this sub-facet, etc...)\n      if ((i < maxIdx) || (!expectMissing)) {\n        assertNotNull(pivotName + \": val #\"+i +\" of \" + maxIdx + \n                      \" has null value: \" + constraint,\n                      constraint.getValue());\n      }\n      // if we are expecting count based sort, then the count of each constraint \n      // must be lt-or-eq the count that came before -- or it must be the last value and \n      // be \"missing\"\n      if (checkCount) {\n        assertTrue(pivotName + \": val #\"+i +\" of\" + maxIdx + \n                   \": count(\"+count+\") > prevCount(\"+prevCount+\"): \" + constraint,\n                   ((count <= prevCount)\n                    || (expectMissing && i == maxIdx && null == constraint.getValue())));\n        prevCount = count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}