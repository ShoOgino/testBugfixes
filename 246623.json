{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","commits":[{"id":"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d","date":1394988844,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int).mjava","sourceNew":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor, boolean inOrder) {\n      super();\n      this.field = field;\n      this.phrasedQueryStringContents = phrasedQueryStringContents;\n      this.slopFactor = slopFactor;\n      this.inOrder = inOrder;\n    }\n\n","sourceOld":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor) {\n      super();\n      this.field = field;\n      this.phrasedQueryStringContents = phrasedQueryStringContents;\n      this.slopFactor = slopFactor;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","sourceNew":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor, boolean inOrder) {\n      this.field = Objects.requireNonNull(field);\n      this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);\n      this.slopFactor = slopFactor;\n      this.inOrder = inOrder;\n    }\n\n","sourceOld":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor, boolean inOrder) {\n      super();\n      this.field = field;\n      this.phrasedQueryStringContents = phrasedQueryStringContents;\n      this.slopFactor = slopFactor;\n      this.inOrder = inOrder;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#ComplexPhraseQuery(String,String,int,boolean).mjava","sourceNew":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor, boolean inOrder) {\n      this.field = Objects.requireNonNull(field);\n      this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);\n      this.slopFactor = slopFactor;\n      this.inOrder = inOrder;\n    }\n\n","sourceOld":"    public ComplexPhraseQuery(String field, String phrasedQueryStringContents,\n        int slopFactor, boolean inOrder) {\n      super();\n      this.field = field;\n      this.phrasedQueryStringContents = phrasedQueryStringContents;\n      this.slopFactor = slopFactor;\n      this.inOrder = inOrder;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d"],"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}