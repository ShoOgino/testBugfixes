{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","commits":[{"id":"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","date":1492411712,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326b5c746af092eb827c5c1accdab1b47fe0cf3c","date":1492433195,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a648360be52f2b0cc9971af641fe1e68778dab","date":1493361164,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e031777d485b735e3c778cf426bcb1d0c269380","date":1495616906,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7de61de2203cc64cd0731761f6e5840f458de78","date":1495616938,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        action.init(map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.listenerRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = AutoScaling.EventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f31b9b25580c2654f9fb90381dbac5b3f968f74","date":1501508330,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = (boolean) properties.getOrDefault(\"enabled\", true);\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":null,"sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(TriggerEventType.NODEADDED, name, properties, container.getResourceLoader(), container.getZkController().getZkClient());\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(TriggerEventType.NODEADDED, name, properties, container.getResourceLoader(), container.getZkController().getZkClient());\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container, ZkController zkController) {\n    super(zkController.getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.zkController = zkController;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(zkController.getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["5f31b9b25580c2654f9fb90381dbac5b3f968f74"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09"],"1e031777d485b735e3c778cf426bcb1d0c269380":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"e7de61de2203cc64cd0731761f6e5840f458de78":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","1e031777d485b735e3c778cf426bcb1d0c269380"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e7de61de2203cc64cd0731761f6e5840f458de78","464244264804e3f981bf1fb4b732516d8d62dbc2"],"c5fd294da67452cd8d116692194908de00eb5209":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e7de61de2203cc64cd0731761f6e5840f458de78"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"5f31b9b25580c2654f9fb90381dbac5b3f968f74":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["1e031777d485b735e3c778cf426bcb1d0c269380","e7de61de2203cc64cd0731761f6e5840f458de78"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["5f31b9b25580c2654f9fb90381dbac5b3f968f74"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"1e031777d485b735e3c778cf426bcb1d0c269380":["e7de61de2203cc64cd0731761f6e5840f458de78"],"e7de61de2203cc64cd0731761f6e5840f458de78":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c5fd294da67452cd8d116692194908de00eb5209"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","326b5c746af092eb827c5c1accdab1b47fe0cf3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":[],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"5f31b9b25580c2654f9fb90381dbac5b3f968f74":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5b8cffee0b9c10b78bd087c71485b482217fe84f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}