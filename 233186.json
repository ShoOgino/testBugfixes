{"path":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#findEndTag().mjava","commits":[{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#findEndTag().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#findEndTag().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["bd69280df0902763e47cb14745388ee17a2fb602"],"bd69280df0902763e47cb14745388ee17a2fb602":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd69280df0902763e47cb14745388ee17a2fb602"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bd69280df0902763e47cb14745388ee17a2fb602":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}