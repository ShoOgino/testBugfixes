{"path":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testRawBinaryContentStream().mjava","commits":[{"id":"9272dcea19192a5fb261980a4737677abfcabab3","date":1409771900,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testRawBinaryContentStream().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Regardless of base writer, the bytes in should be the same as the bytes out \n   * when response is a raw ContentStream written to an OutputStream\n   */\n  public void testRawBinaryContentStream()  throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    byte[] data = new byte[TestUtil.nextInt(random(), 10, 2048)];\n    random().nextBytes(data);\n    ByteArrayStream stream = new ByteArrayStream(data, TestUtil.randomUnicodeString(random()));\n\n    stream.setContentType(TestUtil.randomSimpleString(random()));\n    rsp.add(RawResponseWriter.CONTENT, stream);\n    \n    for (RawResponseWriter writer : allWriters) {\n      assertEquals(stream.getContentType(), writer.getContentType(req(), rsp));\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      writer.write(out, req(), rsp);\n      assertArrayEquals(data, out.toByteArray());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9272dcea19192a5fb261980a4737677abfcabab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9272dcea19192a5fb261980a4737677abfcabab3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272dcea19192a5fb261980a4737677abfcabab3"],"9272dcea19192a5fb261980a4737677abfcabab3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}