{"path":"src/test/org/apache/lucene/index/TestIndex#testIndexInternal(int).mjava","commits":[{"id":"0afa0bff72bc189cdf6fc95f80d80365a6417e3b","date":1118096970,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndex#testIndexInternal(int).mjava","pathOld":"/dev/null","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"959f192d46200c65ecff4fa688b244abca230b73","date":1118097808,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndex#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"959f192d46200c65ecff4fa688b244abca230b73":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["959f192d46200c65ecff4fa688b244abca230b73"]},"commit2Childs":{"959f192d46200c65ecff4fa688b244abca230b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["959f192d46200c65ecff4fa688b244abca230b73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}