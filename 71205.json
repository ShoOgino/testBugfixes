{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","commits":[{"id":"82dc8f80042322d1c443b6c70bdec5249eb745c2","date":1074623829,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * TODO: parallelize this one too\n\t */\n\tpublic int docFreq(Term term) throws IOException {\n\t\tint docFreq = 0;\n\t\tfor (int i = 0; i < searchables.length; i++)\n\t\t\tdocFreq += searchables[i].docFreq(term);\n\t\treturn docFreq;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","sourceNew":"  /**\n   * TODO: parallelize this one too\n   */\n  public int docFreq(Term term) throws IOException {\n    int docFreq = 0;\n    for (int i = 0; i < searchables.length; i++)\n      docFreq += searchables[i].docFreq(term);\n    return docFreq;\n  }\n\n","sourceOld":"\t/**\n\t * TODO: parallelize this one too\n\t */\n\tpublic int docFreq(Term term) throws IOException {\n\t\tint docFreq = 0;\n\t\tfor (int i = 0; i < searchables.length; i++)\n\t\t\tdocFreq += searchables[i].docFreq(term);\n\t\treturn docFreq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","sourceNew":"  /**\n   * TODO: parallelize this one too\n   */\n  public int docFreq(Term term) throws IOException {\n    return super.docFreq(term);\n  }\n\n","sourceOld":"  /**\n   * TODO: parallelize this one too\n   */\n  public int docFreq(Term term) throws IOException {\n    int docFreq = 0;\n    for (int i = 0; i < searchables.length; i++)\n      docFreq += searchables[i].docFreq(term);\n    return docFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","sourceNew":"  /**\n   * TODO: parallelize this one too\n   */\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return super.docFreq(term);\n  }\n\n","sourceOld":"  /**\n   * TODO: parallelize this one too\n   */\n  public int docFreq(Term term) throws IOException {\n    return super.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","sourceNew":"  /**\n   * Executes each {@link Searchable}'s docFreq() in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public int docFreq(final Term term) throws IOException {\n    @SuppressWarnings(\"unchecked\") final Future<Integer>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      final Searchable searchable = searchables[i];\n      searchThreads[i] = executor.submit(new Callable<Integer>() {\n        public Integer call() throws IOException {\n          return Integer.valueOf(searchable.docFreq(term));\n        }\n      });\n    }\n    final CountDocFreq func = new CountDocFreq();\n    foreach(func, Arrays.asList(searchThreads));\n    return func.docFreq;\n  }\n\n","sourceOld":"  /**\n   * TODO: parallelize this one too\n   */\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return super.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#docFreq(Term).mjava","sourceNew":"  /**\n   * Executes each {@link Searchable}'s docFreq() in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public int docFreq(final Term term) throws IOException {\n    @SuppressWarnings(\"unchecked\") final Future<Integer>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      final Searchable searchable = searchables[i];\n      searchThreads[i] = executor.submit(new Callable<Integer>() {\n        public Integer call() throws IOException {\n          return Integer.valueOf(searchable.docFreq(term));\n        }\n      });\n    }\n    final CountDocFreq func = new CountDocFreq();\n    foreach(func, Arrays.asList(searchThreads));\n    return func.docFreq;\n  }\n\n","sourceOld":"  /**\n   * Executes each {@link Searchable}'s docFreq() in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public int docFreq(final Term term) throws IOException {\n    @SuppressWarnings(\"unchecked\") final Future<Integer>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      final Searchable searchable = searchables[i];\n      searchThreads[i] = executor.submit(new Callable<Integer>() {\n        public Integer call() throws IOException {\n          return Integer.valueOf(searchable.docFreq(term));\n        }\n      });\n    }\n    final CountDocFreq func = new CountDocFreq();\n    foreach(func, Arrays.asList(searchThreads));\n    return func.docFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["8a9e385641d717e641408d8fbbc62be8fc766357"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}