{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#computeBlockStats().mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#computeBlockStats().mjava","pathOld":"/dev/null","sourceNew":"  /** Runs next() through the entire terms dict,\n   *  computing aggregate statistics. */\n  public Lucene40Stats computeBlockStats() throws IOException {\n\n    Lucene40Stats stats = new Lucene40Stats(fr.parent.segment, fr.fieldInfo.name);\n    if (fr.index != null) {\n      stats.indexNodeCount = fr.index.getNodeCount();\n      stats.indexArcCount = fr.index.getArcCount();\n      stats.indexNumBytes = fr.index.ramBytesUsed();\n    }\n        \n    currentFrame = staticFrame;\n    FST.Arc<BytesRef> arc;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n\n    // Empty string prefix must have an output in the\n    // index!\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.fpOrig = currentFrame.fp;\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n\n    stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n    allTerms:\n    while (true) {\n\n      // Pop finished blocks\n      while (currentFrame.nextEnt == currentFrame.entCount) {\n        stats.endBlock(currentFrame);\n        if (!currentFrame.isLastInFloor) {\n          currentFrame.loadNextFloorBlock();\n          stats.startBlock(currentFrame, true);\n        } else {\n          if (currentFrame.ord == 0) {\n            break allTerms;\n          }\n          final long lastFP = currentFrame.fpOrig;\n          currentFrame = stack[currentFrame.ord-1];\n          assert lastFP == currentFrame.lastSubFP;\n          // if (DEBUG) {\n          //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n          // }\n        }\n      }\n\n      while(true) {\n        if (currentFrame.next()) {\n          // Push to new block:\n          currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n          currentFrame.fpOrig = currentFrame.fp;\n          // This is a \"next\" frame -- even if it's\n          // floor'd we must pretend it isn't so we don't\n          // try to scan to the right floor frame:\n          currentFrame.isFloor = false;\n          //currentFrame.hasTerms = true;\n          currentFrame.loadBlock();\n          stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n        } else {\n          stats.term(term.get());\n          break;\n        }\n      }\n    }\n\n    stats.finish();\n\n    // Put root frame back:\n    currentFrame = staticFrame;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.rewind();\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n    term.clear();\n\n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#computeBlockStats().mjava","pathOld":"/dev/null","sourceNew":"  /** Runs next() through the entire terms dict,\n   *  computing aggregate statistics. */\n  public Lucene40Stats computeBlockStats() throws IOException {\n\n    Lucene40Stats stats = new Lucene40Stats(fr.parent.segment, fr.fieldInfo.name);\n    if (fr.index != null) {\n      stats.indexNodeCount = fr.index.getNodeCount();\n      stats.indexArcCount = fr.index.getArcCount();\n      stats.indexNumBytes = fr.index.ramBytesUsed();\n    }\n        \n    currentFrame = staticFrame;\n    FST.Arc<BytesRef> arc;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n\n    // Empty string prefix must have an output in the\n    // index!\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.fpOrig = currentFrame.fp;\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n\n    stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n    allTerms:\n    while (true) {\n\n      // Pop finished blocks\n      while (currentFrame.nextEnt == currentFrame.entCount) {\n        stats.endBlock(currentFrame);\n        if (!currentFrame.isLastInFloor) {\n          currentFrame.loadNextFloorBlock();\n          stats.startBlock(currentFrame, true);\n        } else {\n          if (currentFrame.ord == 0) {\n            break allTerms;\n          }\n          final long lastFP = currentFrame.fpOrig;\n          currentFrame = stack[currentFrame.ord-1];\n          assert lastFP == currentFrame.lastSubFP;\n          // if (DEBUG) {\n          //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n          // }\n        }\n      }\n\n      while(true) {\n        if (currentFrame.next()) {\n          // Push to new block:\n          currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n          currentFrame.fpOrig = currentFrame.fp;\n          // This is a \"next\" frame -- even if it's\n          // floor'd we must pretend it isn't so we don't\n          // try to scan to the right floor frame:\n          currentFrame.isFloor = false;\n          //currentFrame.hasTerms = true;\n          currentFrame.loadBlock();\n          stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n        } else {\n          stats.term(term.get());\n          break;\n        }\n      }\n    }\n\n    stats.finish();\n\n    // Put root frame back:\n    currentFrame = staticFrame;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.rewind();\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n    term.clear();\n\n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#computeBlockStats().mjava","sourceNew":null,"sourceOld":"  /** Runs next() through the entire terms dict,\n   *  computing aggregate statistics. */\n  public Lucene40Stats computeBlockStats() throws IOException {\n\n    Lucene40Stats stats = new Lucene40Stats(fr.parent.segment, fr.fieldInfo.name);\n    if (fr.index != null) {\n      stats.indexNodeCount = fr.index.getNodeCount();\n      stats.indexArcCount = fr.index.getArcCount();\n      stats.indexNumBytes = fr.index.ramBytesUsed();\n    }\n        \n    currentFrame = staticFrame;\n    FST.Arc<BytesRef> arc;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n\n    // Empty string prefix must have an output in the\n    // index!\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.fpOrig = currentFrame.fp;\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n\n    stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n    allTerms:\n    while (true) {\n\n      // Pop finished blocks\n      while (currentFrame.nextEnt == currentFrame.entCount) {\n        stats.endBlock(currentFrame);\n        if (!currentFrame.isLastInFloor) {\n          currentFrame.loadNextFloorBlock();\n          stats.startBlock(currentFrame, true);\n        } else {\n          if (currentFrame.ord == 0) {\n            break allTerms;\n          }\n          final long lastFP = currentFrame.fpOrig;\n          currentFrame = stack[currentFrame.ord-1];\n          assert lastFP == currentFrame.lastSubFP;\n          // if (DEBUG) {\n          //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n          // }\n        }\n      }\n\n      while(true) {\n        if (currentFrame.next()) {\n          // Push to new block:\n          currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n          currentFrame.fpOrig = currentFrame.fp;\n          // This is a \"next\" frame -- even if it's\n          // floor'd we must pretend it isn't so we don't\n          // try to scan to the right floor frame:\n          currentFrame.isFloor = false;\n          //currentFrame.hasTerms = true;\n          currentFrame.loadBlock();\n          stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n        } else {\n          stats.term(term.get());\n          break;\n        }\n      }\n    }\n\n    stats.finish();\n\n    // Put root frame back:\n    currentFrame = staticFrame;\n    if (fr.index != null) {\n      arc = fr.index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n    } else {\n      arc = null;\n    }\n    currentFrame = pushFrame(arc, fr.rootCode, 0);\n    currentFrame.rewind();\n    currentFrame.loadBlock();\n    validIndexPrefix = 0;\n    term.clear();\n\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}