{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}