{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","commits":[{"id":"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806","date":1510620286,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21cc21dac328d94dbc79c104b8e626fca70b3f79","date":1515458383,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac","date":1523323495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","21cc21dac328d94dbc79c104b8e626fca70b3f79"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["431c2627ab600554864fa78f5e76abef81faa42d"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"431c2627ab600554864fa78f5e76abef81faa42d":["b94236357aaa22b76c10629851fe4e376e0cea82","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b0b597c65628ca9e73913a07e81691f8229bae35":["431c2627ab600554864fa78f5e76abef81faa42d","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["431c2627ab600554864fa78f5e76abef81faa42d","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","b0b597c65628ca9e73913a07e81691f8229bae35"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["b94236357aaa22b76c10629851fe4e376e0cea82","21cc21dac328d94dbc79c104b8e626fca70b3f79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"431c2627ab600554864fa78f5e76abef81faa42d":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["431c2627ab600554864fa78f5e76abef81faa42d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}