{"path":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (!(target > docs[pointer])) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a23fb6f3f5dfb638bb7c69f871ebab1b3f5070d","date":1090768236,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (!(target > docs[pointer])) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"591e76e4f4581ee94453dd46609d65b9c2e825ee","date":1092775126,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","sourceNew":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. \n   * <br>The implementation uses {@link TermDocs#skipTo(int)}.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","sourceNew":"  /**\n   * Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link TermDocs#skipTo(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return true iff there is such a match.\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. \n   * <br>The implementation uses {@link TermDocs#skipTo(int)}.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    // first scan in cache\n    for (pointer++; pointer < pointerMax; pointer++) {\n      if (docs[pointer] >= target) {\n        doc = docs[pointer];\n        return true;\n      }\n    }\n\n    // not found in cache, seek underlying stream\n    boolean result = termDocs.skipTo(target);\n    if (result) {\n      pointerMax = 1;\n      pointer = 0;\n      docs[pointer] = doc = termDocs.doc();\n      freqs[pointer] = termDocs.freq();\n    } else {\n      doc = Integer.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TermScorer#skipTo(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses {@link TermDocs#skipTo(int)}.\n   * \n   * @param target\n   *          The target document number.\n   * @return true iff there is such a match.\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a23fb6f3f5dfb638bb7c69f871ebab1b3f5070d":["15c469602973ef1a33c9a07367a380d278ffab20"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["0a23fb6f3f5dfb638bb7c69f871ebab1b3f5070d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"0a23fb6f3f5dfb638bb7c69f871ebab1b3f5070d":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["30a558487f2298c2c19ceca9103c1b6865d64708"],"15c469602973ef1a33c9a07367a380d278ffab20":["0a23fb6f3f5dfb638bb7c69f871ebab1b3f5070d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}