{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd0491419a55db5050f375ec779df63ce76d9db5","date":1302545750,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName == DocMaker.ID_FIELD || fieldName == DocMaker.DATE_MSEC_FIELD || fieldName == DocMaker.TIME_SEC_FIELD) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getDeletedDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = termsEnum.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      TermsEnum terms = fields.terms();\n      DocsEnum docs = null;\n      while(terms.next() != null) {\n        docs = terms.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = termsEnum.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = termsEnum.docs(MultiFields.getLiveDocs(reader), docs);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != docs.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testReadTokens().mjava","sourceNew":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","sourceOld":"  /**\n   * Test ReadTokensTask\n   */\n  public void testReadTokens() throws Exception {\n\n    // We will call ReadTokens on this many docs\n    final int NUM_DOCS = 20;\n\n    // Read tokens from first NUM_DOCS docs from Reuters and\n    // then build index from the same docs\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + getReuters20LinesFile(),\n      \"# ----- alg \",\n      \"{ReadTokens}: \" + NUM_DOCS,\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: \" + NUM_DOCS,\n      \"CloseIndex\",\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    List<TaskStats> stats = benchmark.getRunData().getPoints().taskStats();\n\n    // Count how many tokens all ReadTokens saw\n    int totalTokenCount1 = 0;\n    for (final TaskStats stat : stats) {\n      if (stat.getTask().getName().equals(\"ReadTokens\")) {\n        totalTokenCount1 += stat.getCount();\n      }\n    }\n\n    // Separately count how many tokens are actually in the index:\n    IndexReader reader = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(NUM_DOCS, reader.numDocs());\n\n    int totalTokenCount2 = 0;\n\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String fieldName = null;\n    while((fieldName = fields.next()) != null) {\n      if (fieldName.equals(DocMaker.ID_FIELD) || fieldName.equals(DocMaker.DATE_MSEC_FIELD) || fieldName.equals(DocMaker.TIME_SEC_FIELD)) {\n        continue;\n      }\n      Terms terms = fields.terms();\n      if (terms == null) {\n        continue;\n      }\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, MultiFields.getLiveDocs(reader), docs, true);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          totalTokenCount2 += docs.freq();\n        }\n      }\n    }\n    reader.close();\n\n    // Make sure they are the same\n    assertEquals(totalTokenCount1, totalTokenCount2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3615ce4a1f785ae1b779244de52c6a7d99227e60","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["fd0491419a55db5050f375ec779df63ce76d9db5"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","fd0491419a55db5050f375ec779df63ce76d9db5"],"fd0491419a55db5050f375ec779df63ce76d9db5":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd0491419a55db5050f375ec779df63ce76d9db5"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["fd0491419a55db5050f375ec779df63ce76d9db5","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","fd0491419a55db5050f375ec779df63ce76d9db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd0491419a55db5050f375ec779df63ce76d9db5":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"3cc749c053615f5871f3b95715fe292f34e70a53":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b65b350ca9588f9fc76ce7d6804160d06c45ff42","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","fd0491419a55db5050f375ec779df63ce76d9db5","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}