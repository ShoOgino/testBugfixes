{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","commits":[{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, null);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, null);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, null);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, null);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":null,"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode2\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testCancelElection().mjava","sourceNew":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ZkController zkController = MockSolrSource.makeSimpleMock(null, null, zkClient);\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkController);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    zkController = MockSolrSource.makeSimpleMock(null, null, zkClient);\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode2\", props, zkController);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testCancelElection() throws Exception {\n    LeaderElector first = new LeaderElector(zkClient);\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"1\");\n    ElectionContext firstContext = new ShardLeaderElectionContextBase(first,\n        \"slice1\", \"collection2\", \"dummynode1\", props, zkStateReader);\n    first.setup(firstContext);\n    first.joinElection(firstContext, false);\n\n    Thread.sleep(1000);\n    assertEquals(\"original leader was not registered\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n\n    LeaderElector second = new LeaderElector(zkClient);\n    props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        \"http://127.0.0.1/solr/\", ZkStateReader.CORE_NAME_PROP, \"2\");\n    ElectionContext context = new ShardLeaderElectionContextBase(second,\n        \"slice1\", \"collection2\", \"dummynode2\", props, zkStateReader);\n    second.setup(context);\n    second.joinElection(context, false);\n    Thread.sleep(1000);\n    assertEquals(\"original leader should have stayed leader\", \"http://127.0.0.1/solr/1/\", getLeaderUrl(\"collection2\", \"slice1\"));\n    firstContext.cancelElection();\n    Thread.sleep(1000);\n    assertEquals(\"new leader was not registered\", \"http://127.0.0.1/solr/2/\", getLeaderUrl(\"collection2\", \"slice1\"));\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"d82832af39f94dbb58a3130fd216ff1d49435589":["9813dd0748537c429b7c0a9b4723ea1ba496c047","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["9813dd0748537c429b7c0a9b4723ea1ba496c047","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","4e6b620c271c84c0f14919eec7b90083b292ee51"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}