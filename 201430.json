{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","commits":[{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, value.length);\n    values.append(value);\n    ++size;\n  }\n\n","sourceOld":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, value.length);\n    values.append(value);\n    ++size;\n  }\n\n","sourceOld":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62389a101dca1b996a7d6ca10d23bfb747924e06","date":1525274565,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","sourceNew":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    int index = add(doc);\n    offsets.set(index, values.length());\n    lengths.set(index, value.length);\n    values.append(value);\n  }\n\n","sourceOld":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, value.length);\n    values.append(value);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62389a101dca1b996a7d6ca10d23bfb747924e06":["f42883db49d143abc1a0f176ba47e3388dafb608"],"f42883db49d143abc1a0f176ba47e3388dafb608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62389a101dca1b996a7d6ca10d23bfb747924e06"]},"commit2Childs":{"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"62389a101dca1b996a7d6ca10d23bfb747924e06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f42883db49d143abc1a0f176ba47e3388dafb608":["62389a101dca1b996a7d6ca10d23bfb747924e06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}