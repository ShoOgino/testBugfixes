{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","commits":[{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6","date":1503899393,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.computeDistance(thePoint, x, y, z), distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z));\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4226cfcbb0a738a11eee87a3417724e78eddc599","date":1503983771,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, in aggregation form.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, x,y,z));\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.toAggregationForm(distanceStyle.computeDistance(thePoint, x, y, z)),\n\tdistanceStyle.toAggregationForm(distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z)));\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.computeDistance(thePoint, x, y, z), distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z));\n    }\n\n","bugFix":null,"bugIntro":["d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0","date":1504014737,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, in aggregation form.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, x,y,z));\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.toAggregationForm(distanceStyle.computeDistance(thePoint, x, y, z)),\n        distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z)));\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, in aggregation form.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, x,y,z));\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.toAggregationForm(distanceStyle.computeDistance(thePoint, x, y, z)),\n\tdistanceStyle.toAggregationForm(distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z)));\n    }\n\n","bugFix":["4226cfcbb0a738a11eee87a3417724e78eddc599"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, in aggregation form.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, x,y,z));\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.aggregateDistances(distanceStyle.toAggregationForm(distanceStyle.computeDistance(thePoint, x, y, z)),\n        distanceStyle.toAggregationForm(distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z)));\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","760628478e121972168791a2afa6af915192c4a6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["d470c8182e92b264680e34081b75e70a9f2b3c89","d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0":["4226cfcbb0a738a11eee87a3417724e78eddc599"],"4226cfcbb0a738a11eee87a3417724e78eddc599":["bfeb87b48135d7ec81a3c6568883a9b3645ddfa6"],"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["760628478e121972168791a2afa6af915192c4a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["760628478e121972168791a2afa6af915192c4a6","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["760628478e121972168791a2afa6af915192c4a6","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4226cfcbb0a738a11eee87a3417724e78eddc599":["d1a2f9d9d87a44fb2a6cf7953ee1543f86a054d0"],"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6":["4226cfcbb0a738a11eee87a3417724e78eddc599"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bfeb87b48135d7ec81a3c6568883a9b3645ddfa6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}