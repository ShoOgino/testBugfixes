{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#medianFacetAscTest().mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#medianFacetAscTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    String[] params = new String[] {\n        \"o.median.s.int\", \"median(int_id)\",\n        \"o.median.s.long\", \"median(long_ld)\",\n        \"o.median.s.float\", \"median(float_fd)\",\n        \"o.median.s.double\", \"median(double_dd)\",\n        \"o.median.ff\", \"string_sd\",\n        \"o.median.ff\", \"date_dtd\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"median\",\"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#medianFacetAscTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    String[] params = new String[] {\n        \"o.median.s.int\", \"median(int_id)\",\n        \"o.median.s.long\", \"median(long_ld)\",\n        \"o.median.s.float\", \"median(float_fd)\",\n        \"o.median.s.double\", \"median(double_dd)\",\n        \"o.median.ff\", \"string_sd\",\n        \"o.median.ff\", \"date_dtd\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"median\",\"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#medianFacetAscTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    String[] params = new String[] {\n        \"o.median.s.int\", \"median(int_id)\",\n        \"o.median.s.long\", \"median(long_ld)\",\n        \"o.median.s.float\", \"median(float_fd)\",\n        \"o.median.s.double\", \"median(double_dd)\",\n        \"o.median.ff\", \"string_sd\",\n        \"o.median.ff\", \"date_dtd\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"median\",\"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#medianFacetAscTest().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    String[] params = new String[] {\n        \"o.median.s.int\", \"median(int_id)\",\n        \"o.median.s.long\", \"median(long_ld)\",\n        \"o.median.s.float\", \"median(float_fd)\",\n        \"o.median.s.double\", \"median(double_dd)\",\n        \"o.median.ff\", \"string_sd\",\n        \"o.median.ff\", \"date_dtd\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"median\",\"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"median\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"median\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}