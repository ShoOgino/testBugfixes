{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","commits":[{"id":"036a8cf905384ab37a3bc5c07283c3b44b773585","date":1452195789,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\" + exception.getClass());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\" + exception.getClass());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no rules matched\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2ad18d6277403213648fea4a63789f6ceaaf3d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b92576d429e49a4bb26de85c1941051a410948b4","date":1452865995,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no rules matched\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\" + exception.getClass());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\" + exception.getClass());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no rules matched\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2ad18d6277403213648fea4a63789f6ceaaf3d5","date":1452867216,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no rules matched\");\n    return false;\n  }\n\n","bugFix":["036a8cf905384ab37a3bc5c07283c3b44b773585"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520e631af4fc5d80503526ad55712df42cab245b","date":1578056977,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n\n    if (!isRetriable(exception)) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    }\n\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3853758154105b7adcbf807a0b35f5dc21fdcbde","date":1578057143,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n\n    if (!isRetriable(exception)) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    }\n\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    } else {\n      for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n        if (rejectException.isInstance(exception)) {\n          log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n          return false;\n        }\n      }\n    }\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrHttpRequestRetryHandler#retryRequest(IOException,int,HttpContext).mjava","sourceNew":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n\n    if (!isRetriable(exception)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      }\n      return false;\n    }\n\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n    log.debug(\"Retry http request {} out of {}\", executionCount, this.retryCount);\n    if (executionCount > this.retryCount) {\n      log.debug(\"Do not retry, over max retry count\");\n      return false;\n    }\n\n    if (!isRetriable(exception)) {\n      log.debug(\"Do not retry, non retriable class {}\", exception.getClass().getName());\n      return false;\n    }\n\n    final HttpClientContext clientContext = HttpClientContext.adapt(context);\n    final HttpRequest request = clientContext.getRequest();\n    \n    if (requestIsAborted(request)) {\n      log.debug(\"Do not retry, request was aborted\");\n      return false;\n    }\n    \n    if (handleAsIdempotent(clientContext)) {\n      log.debug(\"Retry, request should be idempotent\");\n      return true;\n    }\n\n    log.debug(\"Do not retry, no allow rules matched\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["3853758154105b7adcbf807a0b35f5dc21fdcbde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"036a8cf905384ab37a3bc5c07283c3b44b773585":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3853758154105b7adcbf807a0b35f5dc21fdcbde":["d2ad18d6277403213648fea4a63789f6ceaaf3d5"],"520e631af4fc5d80503526ad55712df42cab245b":["d2ad18d6277403213648fea4a63789f6ceaaf3d5"],"b92576d429e49a4bb26de85c1941051a410948b4":["036a8cf905384ab37a3bc5c07283c3b44b773585"],"d2ad18d6277403213648fea4a63789f6ceaaf3d5":["b92576d429e49a4bb26de85c1941051a410948b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["036a8cf905384ab37a3bc5c07283c3b44b773585"],"036a8cf905384ab37a3bc5c07283c3b44b773585":["b92576d429e49a4bb26de85c1941051a410948b4"],"3853758154105b7adcbf807a0b35f5dc21fdcbde":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"520e631af4fc5d80503526ad55712df42cab245b":[],"b92576d429e49a4bb26de85c1941051a410948b4":["d2ad18d6277403213648fea4a63789f6ceaaf3d5"],"d2ad18d6277403213648fea4a63789f6ceaaf3d5":["3853758154105b7adcbf807a0b35f5dc21fdcbde","520e631af4fc5d80503526ad55712df42cab245b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["520e631af4fc5d80503526ad55712df42cab245b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}