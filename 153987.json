{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, bits.length);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, bits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, wordLength);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, bits.length);\n  }\n\n","bugFix":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, wordLength);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, bits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0732a1e488deedeceef7f601e066085e7ac655a","date":1391629546,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    // define locally so we don't have \"enclosing acces\" issue\n    final long[] bits = this.bits;\n    final int wordLength = this.wordLength;\n    final int numBits = this.numBits;\n    return new DocIdSetIterator() {\n      int doc = -1;\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS || ++doc >= numBits) {\n          return doc = NO_MORE_DOCS;\n        }\n        int i = doc >> 6;\n        final int subIndex = doc & 0x3f;      // index within the word\n        long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n        if (word != 0) {\n          return doc = doc + Long.numberOfTrailingZeros(word);\n        }\n\n        while (++i < wordLength) {\n          word = bits[i];\n          if (word != 0) {\n            return doc = (i << 6) + Long.numberOfTrailingZeros(word);\n          }\n        }\n\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return bits.length;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        if (doc == NO_MORE_DOCS || target >= numBits) {\n          return doc = NO_MORE_DOCS;\n        }\n        int i = target >> 6;\n        final int subIndex = target & 0x3f;      // index within the word\n        long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n        if (word != 0) {\n          return doc = target + Long.numberOfTrailingZeros(word);\n        }\n\n        while (++i < wordLength) {\n          word = bits[i];\n          if (word != 0) {\n            return doc = (i << 6) + Long.numberOfTrailingZeros(word);\n          }\n        }\n\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new OpenBitSetIterator(bits, wordLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new FixedBitSetIterator(bits, numBits, wordLength);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    // define locally so we don't have \"enclosing acces\" issue\n    final long[] bits = this.bits;\n    final int wordLength = this.wordLength;\n    final int numBits = this.numBits;\n    return new DocIdSetIterator() {\n      int doc = -1;\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS || ++doc >= numBits) {\n          return doc = NO_MORE_DOCS;\n        }\n        int i = doc >> 6;\n        final int subIndex = doc & 0x3f;      // index within the word\n        long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n        if (word != 0) {\n          return doc = doc + Long.numberOfTrailingZeros(word);\n        }\n\n        while (++i < wordLength) {\n          word = bits[i];\n          if (word != 0) {\n            return doc = (i << 6) + Long.numberOfTrailingZeros(word);\n          }\n        }\n\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return bits.length;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        if (doc == NO_MORE_DOCS || target >= numBits) {\n          return doc = NO_MORE_DOCS;\n        }\n        int i = target >> 6;\n        final int subIndex = target & 0x3f;      // index within the word\n        long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n        if (word != 0) {\n          return doc = target + Long.numberOfTrailingZeros(word);\n        }\n\n        while (++i < wordLength) {\n          word = bits[i];\n          if (word != 0) {\n            return doc = (i << 6) + Long.numberOfTrailingZeros(word);\n          }\n        }\n\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new FixedBitSetIterator(bits, numBits, numWords);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new FixedBitSetIterator(bits, numBits, wordLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new FixedBitSetIterator(set, cost);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new FixedBitSetIterator(bits, numBits, numWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0732a1e488deedeceef7f601e066085e7ac655a":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0732a1e488deedeceef7f601e066085e7ac655a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80c55596a764e2d397e982828e75fcac5ce430a0"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["80c55596a764e2d397e982828e75fcac5ce430a0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4015cd39dff8d4dec562d909f9766debac53aa6","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a0732a1e488deedeceef7f601e066085e7ac655a":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"80c55596a764e2d397e982828e75fcac5ce430a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["c4015cd39dff8d4dec562d909f9766debac53aa6","a0732a1e488deedeceef7f601e066085e7ac655a"],"3995f83351082af8ae83bb017e63c56818fc1568":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}