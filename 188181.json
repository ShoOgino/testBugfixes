{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","commits":[{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<IndexSearcher>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    IOUtils.close(manager, _writer, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final NRTManager.TrackingIndexWriter writer = new NRTManager.TrackingIndexWriter(_writer);\n    final NRTManager manager = new NRTManager(writer, null, false);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    long gen = writer.addDocument(doc);\n    manager.maybeRefresh();\n    assertFalse(gen < manager.getCurrentSearchingGen());\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    NRTManagerReopenThread thread = new NRTManagerReopenThread(manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        manager.waitForGeneration(lastGen);\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    IOUtils.close(manager, _writer, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    IOUtils.close(manager, _writer, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<IndexSearcher>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    IOUtils.close(manager, _writer, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    IOUtils.close(manager, _writer, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(random().nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.shutdown();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427bf5b96e9aacef8f01879bc1b93c3619c43439","date":1464134313,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter _writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final TrackingIndexWriter writer = new TrackingIndexWriter(_writer);\n    final SearcherManager manager = new SearcherManager(_writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    _writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    _writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    // We now eagerly resolve deletes so the manager should see it after update:\n    assertTrue(manager.isSearcherCurrent());\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    // We now eagerly resolve deletes so the manager should see it after update:\n    assertTrue(manager.isSearcherCurrent());\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testThreadStarvationNoDeleteNRTReader().mjava","sourceNew":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    // We now eagerly resolve deletes so the manager should see it after update:\n    assertTrue(manager.isSearcherCurrent());\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","sourceOld":"  /*\n   * LUCENE-3528 - NRTManager hangs in certain situations \n   */\n  public void testThreadStarvationNoDeleteNRTReader() throws IOException, InterruptedException {\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    Directory d = newDirectory();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch signal = new CountDownLatch(1);\n\n    LatchedIndexWriter writer = new LatchedIndexWriter(d, conf, latch, signal);\n    final SearcherManager manager = new SearcherManager(writer, false, false, null);\n    Document doc = new Document();\n    doc.add(newTextField(\"test\", \"test\", Field.Store.YES));\n    writer.addDocument(doc);\n    manager.maybeRefresh();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          signal.await();\n          manager.maybeRefresh();\n          writer.deleteDocuments(new TermQuery(new Term(\"foo\", \"barista\")));\n          manager.maybeRefresh(); // kick off another reopen so we inc. the internal gen\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          latch.countDown(); // let the add below finish\n        }\n      }\n    };\n    t.start();\n    writer.waitAfterUpdate = true; // wait in addDocument to let some reopens go through\n    final long lastGen = writer.updateDocument(new Term(\"foo\", \"bar\"), doc); // once this returns the doc is already reflected in the last reopen\n\n    assertFalse(manager.isSearcherCurrent()); // false since there is a delete in the queue\n    \n    IndexSearcher searcher = manager.acquire();\n    try {\n      assertEquals(2, searcher.getIndexReader().numDocs());\n    } finally {\n      manager.release(searcher);\n    }\n    final ControlledRealTimeReopenThread<IndexSearcher> thread = new ControlledRealTimeReopenThread<>(writer, manager, 0.01, 0.01);\n    thread.start(); // start reopening\n    if (VERBOSE) {\n      System.out.println(\"waiting now for generation \" + lastGen);\n    }\n    \n    final AtomicBoolean finished = new AtomicBoolean(false);\n    Thread waiter = new Thread() {\n      @Override\n      public void run() {\n        try {\n          thread.waitForGeneration(lastGen);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n        finished.set(true);\n      }\n    };\n    waiter.start();\n    manager.maybeRefresh();\n    waiter.join(1000);\n    if (!finished.get()) {\n      waiter.interrupt();\n      fail(\"thread deadlocked on waitForGeneration\");\n    }\n    thread.close();\n    thread.join();\n    writer.close();\n    IOUtils.close(manager, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["191128ac5b85671b1671e2c857437694283b6ebf"],"6483e4260c08168709c02238ae083a51519a28dd":["68496c2200e559fb7802f7575427b7a482659afb","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"191128ac5b85671b1671e2c857437694283b6ebf":["68496c2200e559fb7802f7575427b7a482659afb","6483e4260c08168709c02238ae083a51519a28dd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"68496c2200e559fb7802f7575427b7a482659afb":["d0ef034a4f10871667ae75181537775ddcf8ade4","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["6483e4260c08168709c02238ae083a51519a28dd"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}