{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      }\n\n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","sourceNew":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else if (rawGap instanceof String && values.get(\"start\") instanceof Date) {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        String start = (String) values.get(\"start\");\n        String end = (String) values.get(\"end\");\n        \n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n        \n        rangeFacet = new RangeFacet.Currency(facet.getKey(), start, end, gap, before, after, between);\n      }\n      \n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","sourceOld":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      }\n\n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","sourceNew":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else if (rawGap instanceof String && values.get(\"start\") instanceof Date) {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        String start = (String) values.get(\"start\");\n        String end = (String) values.get(\"end\");\n        \n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n        \n        rangeFacet = new RangeFacet.Currency(facet.getKey(), start, end, gap, before, after, between);\n      }\n      \n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","sourceOld":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      }\n\n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractRangeFacets(NamedList[NamedList[Object]]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else if (rawGap instanceof String && values.get(\"start\") instanceof Date) {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        String start = (String) values.get(\"start\");\n        String end = (String) values.get(\"end\");\n        \n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n        \n        rangeFacet = new RangeFacet.Currency(facet.getKey(), start, end, gap, before, after, between);\n      }\n      \n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","sourceOld":"  private List<RangeFacet> extractRangeFacets(NamedList<NamedList<Object>> rf) {\n    List<RangeFacet> facetRanges = new ArrayList<>( rf.size() );\n\n    for (Map.Entry<String, NamedList<Object>> facet : rf) {\n      NamedList<Object> values = facet.getValue();\n      Object rawGap = values.get(\"gap\");\n\n      RangeFacet rangeFacet;\n      if (rawGap instanceof Number) {\n        Number gap = (Number) rawGap;\n        Number start = (Number) values.get(\"start\");\n        Number end = (Number) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n      } else if (rawGap instanceof String && values.get(\"start\") instanceof Date) {\n        String gap = (String) rawGap;\n        Date start = (Date) values.get(\"start\");\n        Date end = (Date) values.get(\"end\");\n\n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n\n        rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n      } else {\n        String gap = (String) rawGap;\n        String start = (String) values.get(\"start\");\n        String end = (String) values.get(\"end\");\n        \n        Number before = (Number) values.get(\"before\");\n        Number after = (Number) values.get(\"after\");\n        Number between = (Number) values.get(\"between\");\n        \n        rangeFacet = new RangeFacet.Currency(facet.getKey(), start, end, gap, before, after, between);\n      }\n      \n      NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n      for (Map.Entry<String, Integer> entry : counts)   {\n        rangeFacet.addCount(entry.getKey(), entry.getValue());\n      }\n\n      facetRanges.add(rangeFacet);\n    }\n    return facetRanges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["22d0a81a05eba47d5e18976f17d88306b218cc22","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["b94236357aaa22b76c10629851fe4e376e0cea82"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}