{"path":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(SolrConfig).mjava","commits":[{"id":"8ef8e4fae9bcd156a117f5758819aeabdae3e963","date":1593674028,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register default circuit breakers and return a constructed CircuitBreakerManager\n   * instance which serves the given circuit breakers.\n   *\n   * Any default circuit breakers should be registered here.\n   */\n  public static CircuitBreakerManager build(SolrConfig solrConfig) {\n    CircuitBreakerManager circuitBreakerManager = new CircuitBreakerManager(solrConfig.useCircuitBreakers);\n\n    // Install the default circuit breakers\n    CircuitBreaker memoryCircuitBreaker = new MemoryCircuitBreaker(solrConfig);\n    circuitBreakerManager.register(memoryCircuitBreaker);\n\n    return circuitBreakerManager;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(SolrConfig).mjava","sourceNew":"  /**\n   * Register default circuit breakers and return a constructed CircuitBreakerManager\n   * instance which serves the given circuit breakers.\n   *\n   * Any default circuit breakers should be registered here.\n   */\n  public static CircuitBreakerManager build(SolrConfig solrConfig) {\n    CircuitBreakerManager circuitBreakerManager = new CircuitBreakerManager(solrConfig.useCircuitBreakers);\n\n    // Install the default circuit breakers\n    CircuitBreaker memoryCircuitBreaker = new MemoryCircuitBreaker(solrConfig);\n    CircuitBreaker cpuCircuitBreaker = new CPUCircuitBreaker(solrConfig);\n\n    circuitBreakerManager.register(memoryCircuitBreaker);\n    circuitBreakerManager.register(cpuCircuitBreaker);\n\n    return circuitBreakerManager;\n  }\n\n","sourceOld":"  /**\n   * Register default circuit breakers and return a constructed CircuitBreakerManager\n   * instance which serves the given circuit breakers.\n   *\n   * Any default circuit breakers should be registered here.\n   */\n  public static CircuitBreakerManager build(SolrConfig solrConfig) {\n    CircuitBreakerManager circuitBreakerManager = new CircuitBreakerManager(solrConfig.useCircuitBreakers);\n\n    // Install the default circuit breakers\n    CircuitBreaker memoryCircuitBreaker = new MemoryCircuitBreaker(solrConfig);\n    circuitBreakerManager.register(memoryCircuitBreaker);\n\n    return circuitBreakerManager;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef286034ca1be064a363aaec38e34e64a59154c","date":1598517382,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/circuitbreaker/CircuitBreakerManager#build(SolrConfig).mjava","sourceNew":"  /**\n   * Register default circuit breakers and return a constructed CircuitBreakerManager\n   * instance which serves the given circuit breakers.\n   *\n   * Any default circuit breakers should be registered here.\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static CircuitBreakerManager build(PluginInfo pluginInfo) {\n    CircuitBreakerManager circuitBreakerManager = new CircuitBreakerManager(Boolean.parseBoolean(pluginInfo.attributes.get(\"enabled\")));\n\n    circuitBreakerManager.init(pluginInfo);\n\n    return circuitBreakerManager;\n  }\n\n","sourceOld":"  /**\n   * Register default circuit breakers and return a constructed CircuitBreakerManager\n   * instance which serves the given circuit breakers.\n   *\n   * Any default circuit breakers should be registered here.\n   */\n  public static CircuitBreakerManager build(SolrConfig solrConfig) {\n    CircuitBreakerManager circuitBreakerManager = new CircuitBreakerManager(solrConfig.useCircuitBreakers);\n\n    // Install the default circuit breakers\n    CircuitBreaker memoryCircuitBreaker = new MemoryCircuitBreaker(solrConfig);\n    CircuitBreaker cpuCircuitBreaker = new CPUCircuitBreaker(solrConfig);\n\n    circuitBreakerManager.register(memoryCircuitBreaker);\n    circuitBreakerManager.register(cpuCircuitBreaker);\n\n    return circuitBreakerManager;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ef286034ca1be064a363aaec38e34e64a59154c":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ef286034ca1be064a363aaec38e34e64a59154c"],"a761febaf4b3c09d4490395eb90617263016fc2a":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"]},"commit2Childs":{"0ef286034ca1be064a363aaec38e34e64a59154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a761febaf4b3c09d4490395eb90617263016fc2a":["0ef286034ca1be064a363aaec38e34e64a59154c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}