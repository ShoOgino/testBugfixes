{"path":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","commits":[{"id":"ae34115bd06f6c8b343179130ee8bdb9b897e62e","date":1310069935,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","pathOld":"/dev/null","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","pathOld":"/dev/null","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae34115bd06f6c8b343179130ee8bdb9b897e62e"],"ae34115bd06f6c8b343179130ee8bdb9b897e62e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["ae34115bd06f6c8b343179130ee8bdb9b897e62e","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ae34115bd06f6c8b343179130ee8bdb9b897e62e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"ae34115bd06f6c8b343179130ee8bdb9b897e62e":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","ae34115bd06f6c8b343179130ee8bdb9b897e62e","c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}