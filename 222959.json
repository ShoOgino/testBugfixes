{"path":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","commits":[{"id":"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38","date":1465913265,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd) throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6b27adfd0ae23a874c905f6003b09606641f5f","date":1472324778,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd) throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd) throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setBasicAuthHeader(httpPost, user, pwd);\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"173104badc305e417297852d42351ba4694a2ad5","date":1565129306,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    // HACK: (attempted) work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins = getAuthPlugins(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet = getAuthPlugins(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1747a7f5fca08ea77329319431be445d363ba102","date":1565643834,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    // HACK: work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    // HACK: (attempted) work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins = getAuthPlugins(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet = getAuthPlugins(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd","date":1567056470,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#executeCommand(String,HttpClient,String,String,String).mjava","sourceNew":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    // HACK: work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n\n","sourceOld":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    // HACK: work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["1747a7f5fca08ea77329319431be445d363ba102"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e4a9106065a4a11ef25c33e0e1eabd34bfbec38","7b6b27adfd0ae23a874c905f6003b09606641f5f"],"1747a7f5fca08ea77329319431be445d363ba102":["173104badc305e417297852d42351ba4694a2ad5"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["3e4a9106065a4a11ef25c33e0e1eabd34bfbec38"],"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"173104badc305e417297852d42351ba4694a2ad5":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["4bb519c79b76e52145e37b6681a7012525ed5f4b","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4bb519c79b76e52145e37b6681a7012525ed5f4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e4a9106065a4a11ef25c33e0e1eabd34bfbec38","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1747a7f5fca08ea77329319431be445d363ba102":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7b6b27adfd0ae23a874c905f6003b09606641f5f"],"173104badc305e417297852d42351ba4694a2ad5":["1747a7f5fca08ea77329319431be445d363ba102"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["173104badc305e417297852d42351ba4694a2ad5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}