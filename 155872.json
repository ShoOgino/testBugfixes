{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, searcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, searcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","sourceNew":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      SolrDocumentFetcher docFetcher = searcher.getDocFetcher();\n      docFetcher.decorateDocValueFields(doc, docid, docFetcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, searcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#reopenRealtimeSearcherAndGet(SolrCore,Term,ReturnFields).mjava","sourceNew":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      SolrDocumentFetcher docFetcher = searcher.getDocFetcher();\n      docFetcher.decorateDocValueFields(doc, docid, docFetcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher. \n   * @return Returns the document or null if not found.\n   */\n  private static SolrDocument reopenRealtimeSearcherAndGet(SolrCore core, Term idTerm, ReturnFields returnFields) throws IOException {\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    ulog.openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherHolder.get();\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        return null;\n      }\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      SolrDocument doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, searcher.getNonStoredDVs(false));\n\n      return doc;\n    } finally {\n      searcherHolder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}