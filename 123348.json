{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a append replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a append replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a append replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","sourceNew":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a tlog replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a append replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#recoverFromCurrentLog().mjava","sourceNew":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a tlog replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","sourceOld":"  /**\n   * Replay current tlog, so all updates will be written to index.\n   * This is must do task for a append replica become a new leader.\n   * @return future of this task\n   */\n  public Future<RecoveryInfo> recoverFromCurrentLog() {\n    if (tlog == null) {\n      return null;\n    }\n    map.clear();\n    recoveryInfo = new RecoveryInfo();\n    tlog.incref();\n\n    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<>(recoveryExecutor);\n    LogReplayer replayer = new LogReplayer(Collections.singletonList(tlog), false, true);\n\n    versionInfo.blockUpdates();\n    try {\n      state = State.REPLAYING;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n\n    return cs.submit(replayer, recoveryInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}