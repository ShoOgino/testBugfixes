{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      if (getTestClass().getJavaClass().isAnnotationPresent(Nightly.class)) {\n        /* the test class is annotated with nightly, remove all methods */\n        String className = getTestClass().getJavaClass().getSimpleName();\n        System.err.println(\"NOTE: Ignoring nightly-only test class '\" + className + \"'\");\n        testMethods.clear();\n      } else {\n        /* remove all nightly-only methods */\n        for (int i = 0; i < testMethods.size(); i++) {\n          final FrameworkMethod m = testMethods.get(i);\n          if (m.getAnnotation(Nightly.class) != null) {\n            System.err.println(\"NOTE: Ignoring nightly-only test method '\" + m.getName() + \"'\");\n            testMethods.remove(i--);\n          }\n        }\n      }\n      /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n      if (testMethods.isEmpty()) {\n        try {\n          testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n        } catch (Exception e) { throw new RuntimeException(e); }\n      }\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      if (getTestClass().getJavaClass().isAnnotationPresent(Nightly.class)) {\n        /* the test class is annotated with nightly, remove all methods */\n        String className = getTestClass().getJavaClass().getSimpleName();\n        System.err.println(\"NOTE: Ignoring nightly-only test class '\" + className + \"'\");\n        testMethods.clear();\n      } else {\n        /* remove all nightly-only methods */\n        for (int i = 0; i < testMethods.size(); i++) {\n          final FrameworkMethod m = testMethods.get(i);\n          if (m.getAnnotation(Nightly.class) != null) {\n            System.err.println(\"NOTE: Ignoring nightly-only test method '\" + m.getName() + \"'\");\n            testMethods.remove(i--);\n          }\n        }\n      }\n      /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n      if (testMethods.isEmpty()) {\n        try {\n          testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n        } catch (Exception e) { throw new RuntimeException(e); }\n      }\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be27627d0f58706cf69d633fea573aeb078dcb22","date":1322958023,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      if (getTestClass().getJavaClass().isAnnotationPresent(Nightly.class)) {\n        /* the test class is annotated with nightly, remove all methods */\n        String className = getTestClass().getJavaClass().getSimpleName();\n        System.err.println(\"NOTE: Ignoring nightly-only test class '\" + className + \"'\");\n        testMethods.clear();\n      } else {\n        /* remove all nightly-only methods */\n        for (int i = 0; i < testMethods.size(); i++) {\n          final FrameworkMethod m = testMethods.get(i);\n          if (m.getAnnotation(Nightly.class) != null) {\n            System.err.println(\"NOTE: Ignoring nightly-only test method '\" + m.getName() + \"'\");\n            testMethods.remove(i--);\n          }\n        }\n      }\n      /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n      if (testMethods.isEmpty()) {\n        try {\n          testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n        } catch (Exception e) { throw new RuntimeException(e); }\n      }\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7733816f2c0d688c0bbc68468196f1a848606f21","date":1323021691,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      if (getTestClass().getJavaClass().isAnnotationPresent(Nightly.class)) {\n        /* the test class is annotated with nightly, remove all methods */\n        String className = getTestClass().getJavaClass().getSimpleName();\n        System.err.println(\"NOTE: Ignoring nightly-only test class '\" + className + \"'\");\n        testMethods.clear();\n      } else {\n        /* remove all nightly-only methods */\n        for (int i = 0; i < testMethods.size(); i++) {\n          final FrameworkMethod m = testMethods.get(i);\n          if (m.getAnnotation(Nightly.class) != null) {\n            System.err.println(\"NOTE: Ignoring nightly-only test method '\" + m.getName() + \"'\");\n            testMethods.remove(i--);\n          }\n        }\n      }\n      /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n      if (testMethods.isEmpty()) {\n        try {\n          testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n        } catch (Exception e) { throw new RuntimeException(e); }\n      }\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["be27627d0f58706cf69d633fea573aeb078dcb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be27627d0f58706cf69d633fea573aeb078dcb22":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7733816f2c0d688c0bbc68468196f1a848606f21":["7b91922b55d15444d554721b352861d028eb8278","be27627d0f58706cf69d633fea573aeb078dcb22"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["be27627d0f58706cf69d633fea573aeb078dcb22","7733816f2c0d688c0bbc68468196f1a848606f21"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"be27627d0f58706cf69d633fea573aeb078dcb22":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7733816f2c0d688c0bbc68468196f1a848606f21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7733816f2c0d688c0bbc68468196f1a848606f21":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","7733816f2c0d688c0bbc68468196f1a848606f21"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}