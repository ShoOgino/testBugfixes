{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","sourceNew":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","sourceOld":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","sourceNew":null,"sourceOld":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}