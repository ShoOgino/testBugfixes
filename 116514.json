{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a7e4907084808af8fdb14b9809e6dceaccf6867b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","001b25b42373b22a52f399dbf072f1224632e8e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":["1d028314cced5858683a1bb4741423d0f934257b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["001b25b42373b22a52f399dbf072f1224632e8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}