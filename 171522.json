{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","commits":[{"id":"4820e7931c05e4eb25ac34917774fbacab59c3a3","date":1454991883,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getInQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (KeeperException e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } catch (RuntimeException e) {\n      Throwable rootCause = SolrException.getRootCause(e);\n      if (rootCause instanceof KeeperException) {\n        log.info(\"Could not publish node as down: \" + e.getMessage());\n      } else {\n        throw e;\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33","date":1455118063,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getInQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getInQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (KeeperException e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } catch (RuntimeException e) {\n      Throwable rootCause = SolrException.getRootCause(e);\n      if (rootCause instanceof KeeperException) {\n        log.info(\"Could not publish node as down: \" + e.getMessage());\n      } else {\n        throw e;\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getInQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getInQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.debug(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.debug(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.debug(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.info(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.info(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.debug(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (Exception e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":["e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33","a5d615d62cd8aff3690943d765e46942551f98b6","4820e7931c05e4eb25ac34917774fbacab59c3a3","19498030e0adab22f604f935cae3c03dcf0952a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   *\n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   * \n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   *\n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: {}\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   *\n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishNodeAsDown(String).mjava","sourceNew":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   *\n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: \", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Best effort to set DOWN state for all replicas on node.\n   *\n   * @param nodeName to operate on\n   */\n  public void publishNodeAsDown(String nodeName) {\n    log.info(\"Publish node={} as DOWN\", nodeName);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n        ZkStateReader.NODE_NAME_PROP, nodeName);\n    try {\n      overseer.getStateUpdateQueue().offer(Utils.toJSON(m));\n    } catch (AlreadyClosedException e) {\n      log.info(\"Not publishing node as DOWN because a resource required to do so is already closed.\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.debug(\"Publish node as down was interrupted.\");\n    } catch (KeeperException e) {\n      log.warn(\"Could not publish node as down: {}\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33","19498030e0adab22f604f935cae3c03dcf0952a6"],"962cd4f5e313777f35da8f521265323e84184929":["af2638813028b254a88b418ebeafb541afb49653"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["ad4957cde742defe6db19689abdc267c5d948066"],"ad4957cde742defe6db19689abdc267c5d948066":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"19498030e0adab22f604f935cae3c03dcf0952a6":["e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33"],"a5d615d62cd8aff3690943d765e46942551f98b6":["962cd4f5e313777f35da8f521265323e84184929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af2638813028b254a88b418ebeafb541afb49653","a5d615d62cd8aff3690943d765e46942551f98b6"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"962cd4f5e313777f35da8f521265323e84184929":["a5d615d62cd8aff3690943d765e46942551f98b6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad4957cde742defe6db19689abdc267c5d948066":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["e96d9641fb3fee5a1dc1177a7cee0b3f8115ba33"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}