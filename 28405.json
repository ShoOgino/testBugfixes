{"path":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5def89e786ddad7dfd739f12438831cd1f9d8da1","date":1287022727,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.valueOf((String)config.get(THRESHOLD_TOKEN_FREQUENCY));\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.valueOf((String)config.get(THRESHOLD_TOKEN_FREQUENCY));\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0fd79991d09a27d6bf02506b578b36ccca836b7","date":1287613732,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.valueOf((String)config.get(THRESHOLD_TOKEN_FREQUENCY));\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2c4e64566ca625ef2053ac291b0032b2829ab21","date":1287618511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.parseFloat(config.get(THRESHOLD_TOKEN_FREQUENCY).toString());\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848","date":1287622124,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.parseFloat(config.get(THRESHOLD_TOKEN_FREQUENCY).toString());\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : Float.valueOf((String)config.get(THRESHOLD_TOKEN_FREQUENCY));\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2df6dcf97491e32d0853436240f3045d19aa457f","date":1298984641,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n    if (lookupImpl == null) {\n      lookupImpl = JaspellLookup.class.getName();\n    }\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    lookup.init(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f\n            : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String)config.get(FIELD);\n    lookupImpl = (String)config.get(LOOKUP_IMPL);\n\n    // support the old classnames without -Factory for config file backwards compatibility.\n    if (lookupImpl == null || \"org.apache.solr.spelling.suggest.jaspell.JaspellLookup\".equals(lookupImpl)) {\n      lookupImpl = JaspellLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.tst.TSTLookup\".equals(lookupImpl)) {\n      lookupImpl = TSTLookupFactory.class.getName();\n    } else if (\"org.apache.solr.spelling.suggest.fst.FSTLookup\".equals(lookupImpl)) {\n      lookupImpl = FSTLookupFactory.class.getName();\n    }\n\n    LookupFactory factory = (LookupFactory) core.getResourceLoader().newInstance(lookupImpl);\n    lookup = factory.create(config, core);\n    String store = (String)config.get(STORE_DIR);\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(storeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed\", e);\n        }\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e230a61047bc041516c811baa08a7174d6f8322a":["2df6dcf97491e32d0853436240f3045d19aa457f"],"c26f00b574427b55127e869b935845554afde1fa":["e230a61047bc041516c811baa08a7174d6f8322a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848"],"bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848":["b2c4e64566ca625ef2053ac291b0032b2829ab21"],"5def89e786ddad7dfd739f12438831cd1f9d8da1":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0fd79991d09a27d6bf02506b578b36ccca836b7":["5def89e786ddad7dfd739f12438831cd1f9d8da1"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2df6dcf97491e32d0853436240f3045d19aa457f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2df6dcf97491e32d0853436240f3045d19aa457f","e230a61047bc041516c811baa08a7174d6f8322a"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b12d3e81e0f95a4527b5703953c503f71120ffcc","2df6dcf97491e32d0853436240f3045d19aa457f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2c4e64566ca625ef2053ac291b0032b2829ab21":["f0fd79991d09a27d6bf02506b578b36ccca836b7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e230a61047bc041516c811baa08a7174d6f8322a"],"2df6dcf97491e32d0853436240f3045d19aa457f":["bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","5def89e786ddad7dfd739f12438831cd1f9d8da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"e230a61047bc041516c811baa08a7174d6f8322a":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2df6dcf97491e32d0853436240f3045d19aa457f"],"5def89e786ddad7dfd739f12438831cd1f9d8da1":["f0fd79991d09a27d6bf02506b578b36ccca836b7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["5def89e786ddad7dfd739f12438831cd1f9d8da1","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"f0fd79991d09a27d6bf02506b578b36ccca836b7":["b2c4e64566ca625ef2053ac291b0032b2829ab21"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"b2c4e64566ca625ef2053ac291b0032b2829ab21":["bcd49bebaae0000e0e7b0d1127c8a7c7ec38c848"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2df6dcf97491e32d0853436240f3045d19aa457f":["e230a61047bc041516c811baa08a7174d6f8322a","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}