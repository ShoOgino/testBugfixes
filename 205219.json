{"path":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/collection1/conf/solrconfig.xml\",\"solr/collection1/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/collection1/conf/solrconfig.xml\",\"solr/collection1/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/collection1/conf/solrconfig.xml\",\"solr/collection1/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getLatestSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/collection1/conf/solrconfig.xml\",\"solr/collection1/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"]},"commit2Childs":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["fe33227f6805edab2036cbb80645cc4e2d1fa424","08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}