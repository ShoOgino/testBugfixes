{"path":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomRealisticUnicodeString(Random,int,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomRealisticUnicodeString(Random,int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomRealisticUnicodeString(Random,int,int).mjava","sourceNew":"  /** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */\n  public static String randomRealisticUnicodeString(Random r, int minLength, int maxLength) {\n    final int end = minLength + r.nextInt(maxLength);\n    final int block = r.nextInt(blockStarts.length);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++)\n      sb.appendCodePoint(nextInt(r, blockStarts[block], blockEnds[block]));\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */\n  public static String randomRealisticUnicodeString(Random r, int minLength, int maxLength) {\n    final int end = minLength + r.nextInt(maxLength);\n    final int block = r.nextInt(blockStarts.length);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++)\n      sb.appendCodePoint(nextInt(r, blockStarts[block], blockEnds[block]));\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRealisticUnicodeString(Random,int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomRealisticUnicodeString(Random,int,int).mjava","sourceNew":"  /** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */\n  public static String randomRealisticUnicodeString(Random r, int minLength, int maxLength) {\n    final int end = minLength + r.nextInt(maxLength);\n    final int block = r.nextInt(blockStarts.length);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++)\n      sb.appendCodePoint(nextInt(r, blockStarts[block], blockEnds[block]));\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */\n  public static String randomRealisticUnicodeString(Random r, int minLength, int maxLength) {\n    final int end = minLength + r.nextInt(maxLength);\n    final int block = r.nextInt(blockStarts.length);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++)\n      sb.appendCodePoint(nextInt(r, blockStarts[block], blockEnds[block]));\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}