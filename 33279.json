{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    this(context, false, executor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    this(context, false, executor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    this(context, false, executor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    this(context, false, executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3a0403b45dfe384fae4a1b6e96c3265d000c498","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}