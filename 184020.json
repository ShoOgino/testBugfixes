{"path":"modules/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}