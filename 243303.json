{"path":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":null,"sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b485b7ca1219d7aae3e9e7f0de6d7d156817d35a","date":1280680707,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    if (System.getProperty(\"jetty.insecurerandom\") != null)\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n\n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7c394a89e0bc196c266f5b634c870c5108d3995","date":1286931712,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    if (System.getProperty(\"jetty.insecurerandom\") != null)\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n\n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    if (System.getProperty(\"jetty.insecurerandom\") != null)\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n\n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317","date":1291848499,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init( String context, int port )\n  {\n    this.context = context;\n    server = new Server( port );    \n    server.setStopAtShutdown( true );\n    \n    // Initialize the servlets\n    Context root = new Context( server, context, Context.SESSIONS );\n    \n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet( Servlet404.class, \"/*\" );\n    dispatchFilter = root.addFilter( SolrDispatchFilter.class, \"*\", Handler.REQUEST );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,int).mjava","sourceNew":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String context, int port) {\n    this.context = context;\n    server = new Server(port);\n    server.setStopAtShutdown(true);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      server.setConnectors(new Connector[] { connector });\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        System.setProperty(\"hostPort\", Integer.toString(getLocalPort()));\n        if (solrConfigFilename != null)\n          System.setProperty(\"solrconfig\", solrConfigFilename);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null)\n          System.clearProperty(\"solrconfig\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["f7c394a89e0bc196c266f5b634c870c5108d3995"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7c394a89e0bc196c266f5b634c870c5108d3995":["b485b7ca1219d7aae3e9e7f0de6d7d156817d35a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317"],"b485b7ca1219d7aae3e9e7f0de6d7d156817d35a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317"],"0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b485b7ca1219d7aae3e9e7f0de6d7d156817d35a","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f7c394a89e0bc196c266f5b634c870c5108d3995":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b485b7ca1219d7aae3e9e7f0de6d7d156817d35a":["f7c394a89e0bc196c266f5b634c870c5108d3995","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b485b7ca1219d7aae3e9e7f0de6d7d156817d35a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"0fc8769c3cc9d8d9e0d0adc4752872a8d02d0317":["c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}