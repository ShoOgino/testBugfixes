{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","commits":[{"id":"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","date":1523390946,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82a6d970d2393ba4fa3666034b2ec311b774554","date":1523429643,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d","date":1550526365,"type":3,"author":"shalinmangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":["4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if(config.extraConfig!= null){\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider)client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name+ \"/\"+ e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if (config.extraConfig != null) {\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider) client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name + \"/\" + e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if(config.extraConfig!= null){\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider)client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name+ \"/\"+ e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b348431b834ecbda752134f7d345c754e283815","date":1567051312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      JettyConfig jettyConfig = jettyConfigBuilder.build();\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if (config.extraConfig != null) {\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider) client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name + \"/\" + e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if (config.extraConfig != null) {\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider) client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name + \"/\" + e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      JettyConfig jettyConfig = jettyConfigBuilder.build();\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      JettyConfig jettyConfig = jettyConfigBuilder.build();\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if (config.extraConfig != null) {\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider) client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name + \"/\" + e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#build().mjava","sourceNew":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      JettyConfig jettyConfig = jettyConfigBuilder.build();\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","sourceOld":"    /**\n     * Configure, run and return the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster build() throws Exception {\n      JettyConfig jettyConfig = jettyConfigBuilder.build();\n      MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig,\n          null, securityJson, trackJettyMetrics);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n        if (config.extraConfig != null) {\n          for (Map.Entry<String, byte[]> e : config.extraConfig.entrySet()) {\n            ((ZkClientClusterStateProvider) client.getClusterStateProvider()).getZkStateReader().getZkClient()\n                .create(CONFIGS_ZKNODE + \"/\" + config.name + \"/\" + e.getKey(), e.getValue(), CreateMode.PERSISTENT, true);\n\n          }\n\n        }\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, Object> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n      return cluster;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b348431b834ecbda752134f7d345c754e283815":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3584d3db8b472772e3329d9d95d584b68ae997e":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["3b348431b834ecbda752134f7d345c754e283815"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3b348431b834ecbda752134f7d345c754e283815","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"3b348431b834ecbda752134f7d345c754e283815":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["3b348431b834ecbda752134f7d345c754e283815"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","e82a6d970d2393ba4fa3666034b2ec311b774554"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}