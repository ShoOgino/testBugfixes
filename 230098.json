{"path":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#beforeClassEncodingTest().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#beforeClassEncodingTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#beforeClassEncodingTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassEncodingTest() throws Exception {\n    int capacity = atLeast(10000);\n    data = new IntsRef(capacity);\n    for (int i = 0; i < 10; i++) {\n      data.ints[i] = i + 1; // small values\n    }\n    for (int i = 10; i < data.ints.length; i++) {\n      data.ints[i] = random().nextInt(Integer.MAX_VALUE - 1) + 1; // some encoders don't allow 0\n    }\n    data.length = data.ints.length;\n    \n    uniqueSortedData = IntsRef.deepCopyOf(data);\n    Arrays.sort(uniqueSortedData.ints);\n    uniqueSortedData.length = 0;\n    int prev = -1;\n    for (int i = 0; i < uniqueSortedData.ints.length; i++) {\n      if (uniqueSortedData.ints[i] != prev) {\n        uniqueSortedData.ints[uniqueSortedData.length++] = uniqueSortedData.ints[i];\n        prev = uniqueSortedData.ints[i];\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassEncodingTest() throws Exception {\n    int capacity = atLeast(10000);\n    data = new IntsRef(capacity);\n    for (int i = 0; i < 10; i++) {\n      data.ints[i] = i + 1; // small values\n    }\n    for (int i = 10; i < data.ints.length; i++) {\n      data.ints[i] = random().nextInt(Integer.MAX_VALUE - 1) + 1; // some encoders don't allow 0\n    }\n    data.length = data.ints.length;\n    \n    uniqueSortedData = IntsRef.deepCopyOf(data);\n    Arrays.sort(uniqueSortedData.ints);\n    uniqueSortedData.length = 0;\n    int prev = -1;\n    for (int i = 0; i < uniqueSortedData.ints.length; i++) {\n      if (uniqueSortedData.ints[i] != prev) {\n        uniqueSortedData.ints[uniqueSortedData.length++] = uniqueSortedData.ints[i];\n        prev = uniqueSortedData.ints[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#beforeClassEncodingTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassEncodingTest() throws Exception {\n    int capacity = atLeast(10000);\n    data = new IntsRef(capacity);\n    for (int i = 0; i < 10; i++) {\n      data.ints[i] = i + 1; // small values\n    }\n    for (int i = 10; i < data.ints.length; i++) {\n      data.ints[i] = random().nextInt(Integer.MAX_VALUE - 1) + 1; // some encoders don't allow 0\n    }\n    data.length = data.ints.length;\n    \n    uniqueSortedData = IntsRef.deepCopyOf(data);\n    Arrays.sort(uniqueSortedData.ints);\n    uniqueSortedData.length = 0;\n    int prev = -1;\n    for (int i = 0; i < uniqueSortedData.ints.length; i++) {\n      if (uniqueSortedData.ints[i] != prev) {\n        uniqueSortedData.ints[uniqueSortedData.length++] = uniqueSortedData.ints[i];\n        prev = uniqueSortedData.ints[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#beforeClassEncodingTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassEncodingTest() throws Exception {\n    int capacity = atLeast(10000);\n    data = new IntsRef(capacity);\n    for (int i = 0; i < 10; i++) {\n      data.ints[i] = i + 1; // small values\n    }\n    for (int i = 10; i < data.ints.length; i++) {\n      data.ints[i] = random().nextInt(Integer.MAX_VALUE - 1) + 1; // some encoders don't allow 0\n    }\n    data.length = data.ints.length;\n    \n    uniqueSortedData = IntsRef.deepCopyOf(data);\n    Arrays.sort(uniqueSortedData.ints);\n    uniqueSortedData.length = 0;\n    int prev = -1;\n    for (int i = 0; i < uniqueSortedData.ints.length; i++) {\n      if (uniqueSortedData.ints[i] != prev) {\n        uniqueSortedData.ints[uniqueSortedData.length++] = uniqueSortedData.ints[i];\n        prev = uniqueSortedData.ints[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}