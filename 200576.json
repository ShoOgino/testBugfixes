{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","commits":[{"id":"68cfd3a389f231b8fe23dae4d0ddb2463e79b525","date":1495808626,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea004718d148a5086430a3c7386f44b8a1cb89b2","date":1497801057,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = (Number)subEvaluator.evaluate(tuple);\n      list.add(value);\n    }\n\n    return list;\n  }\n\n","sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","sourceOld":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = (Number)subEvaluator.evaluate(tuple);\n      list.add(value);\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    List<Number> list = new ArrayList();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Number num = (Number)subEvaluator.evaluate(tuple);\n      list.add(num);\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Object> evaluate(Tuple tuple) throws IOException {\n    List<Object> list = new ArrayList<>();\n    for(StreamEvaluator subEvaluator : subEvaluators) {\n      Object value = subEvaluator.evaluate(tuple);\n      \n      // if we want sorting but the evaluated value is not comparable then we have an error\n      if(null != sortOrder && !(value instanceof Comparable<?>)){\n        String message = String.format(Locale.ROOT,\"Failed to evaluate to a comparable object - evaluator '%s' resulted in type '%s' and value '%s'\",\n            subEvaluator.toExpression(constructingFactory),\n            value.getClass().getName(),\n            value.toString());\n        throw new IOException(message);\n      }\n      \n      list.add(value);\n    }\n    \n    if(null != sortOrder){\n      // Because of the type checking above we know that the value is at least Comparable\n      Comparator<Comparable> comparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      list = list.stream().map(value -> (Comparable<Object>)value).sorted(comparator).collect(Collectors.toList());\n    }\n\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["28288370235ed02234a64753cdbf0c6ec096304a","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["28288370235ed02234a64753cdbf0c6ec096304a"],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea004718d148a5086430a3c7386f44b8a1cb89b2":["68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["ea004718d148a5086430a3c7386f44b8a1cb89b2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","68cfd3a389f231b8fe23dae4d0ddb2463e79b525","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["e9017cf144952056066919f1ebc7897ff9bd71b1","ea004718d148a5086430a3c7386f44b8a1cb89b2","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"ea004718d148a5086430a3c7386f44b8a1cb89b2":["e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}