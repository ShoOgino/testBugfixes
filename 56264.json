{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#doPop().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copyBytes(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copyBytes(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#doPop().mjava","sourceNew":null,"sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copyBytes(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}