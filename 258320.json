{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340c74377cb6e5e48360c014b3fc076221746443","date":1476809457,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad214b6ec1400de3c40b6c120126abe89d51a9ce","date":1476818670,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random.nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","340c74377cb6e5e48360c014b3fc076221746443"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"340c74377cb6e5e48360c014b3fc076221746443":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad214b6ec1400de3c40b6c120126abe89d51a9ce","340c74377cb6e5e48360c014b3fc076221746443"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"340c74377cb6e5e48360c014b3fc076221746443":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}