{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","commits":[{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"/dev/null","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"/dev/null","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws SolrServerException, IOException,\n      Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String,State).mjava","sourceNew":"  protected void setSliceState(String collection, String slice, State state) throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue =  cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getOverseer().getStateUpdateQueue();\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","sourceOld":"  protected void setSliceState(String collection, String slice, State state) throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    // TODO can this be encapsulated better somewhere?\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(client.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n\n    waitForState(\"Expected shard \" + slice + \" to be in state \" + state.toString(), collection, (n, c) -> {\n      return c.getSlice(slice).getState() == state;\n    });\n\n  }\n\n","bugFix":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}