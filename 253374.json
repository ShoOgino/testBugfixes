{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","commits":[{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","pathOld":"/dev/null","sourceNew":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n    \n    assertEquals(1, getOnlyLeafReader(oldest).getNumericDocValues(\"dv\").get(0));\n    assertEquals(2, getOnlyLeafReader(latest).getNumericDocValues(\"dv\").get(0));\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","sourceNew":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n\n    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n\n    values = getOnlyLeafReader(latest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(2, values.longValue());\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n    \n    assertEquals(1, getOnlyLeafReader(oldest).getNumericDocValues(\"dv\").get(0));\n    assertEquals(2, getOnlyLeafReader(latest).getNumericDocValues(\"dv\").get(0));\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","sourceNew":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n\n    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n\n    values = getOnlyLeafReader(latest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(2, values.longValue());\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n    \n    assertEquals(1, getOnlyLeafReader(oldest).getNumericDocValues(\"dv\").get(0));\n    assertEquals(2, getOnlyLeafReader(latest).getNumericDocValues(\"dv\").get(0));\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","pathOld":"/dev/null","sourceNew":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n\n    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n\n    values = getOnlyLeafReader(latest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(2, values.longValue());\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testNRTMupdates2().mjava","sourceNew":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheHelper().getKey(),\n        oldest.leaves().get(0).reader().getCoreCacheHelper().getKey());\n\n    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n\n    values = getOnlyLeafReader(latest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(2, values.longValue());\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test reopening backwards from an NRT reader with DV updates */\n  public void testNRTMupdates2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    iwc.setIndexDeletionPolicy(snapshotter);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    writer.commit(); // make sure all index metadata is written out\n  \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"value1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    writer.addDocument(doc);\n    \n    writer.commit();\n    \n    IndexCommit ic1 = snapshotter.snapshot();\n    \n    writer.updateNumericDocValue(new Term(\"key\", \"value1\"), \"dv\", 2);\n    \n    DirectoryReader latest = DirectoryReader.open(writer);\n    assertEquals(1, latest.leaves().size());\n    \n    // This reader will be used for searching against commit point 1\n    DirectoryReader oldest = DirectoryReader.openIfChanged(latest, ic1);\n    assertEquals(1, oldest.leaves().size());\n    \n    // sharing same core\n    assertSame(latest.leaves().get(0).reader().getCoreCacheKey(), oldest.leaves().get(0).reader().getCoreCacheKey());\n\n    NumericDocValues values = getOnlyLeafReader(oldest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n\n    values = getOnlyLeafReader(latest).getNumericDocValues(\"dv\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(2, values.longValue());\n    \n    latest.close();\n    oldest.close();\n    \n    snapshotter.release(ic1);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d211216c83f01894810543d1c107160a9ae3650b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f412711b73fe38b28bb793928ad02da8c829cff5","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["f412711b73fe38b28bb793928ad02da8c829cff5"],"f412711b73fe38b28bb793928ad02da8c829cff5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f412711b73fe38b28bb793928ad02da8c829cff5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f412711b73fe38b28bb793928ad02da8c829cff5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}