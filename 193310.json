{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","commits":[{"id":"faf3c558df29f740350b64a25b98edd8f680a1c0","date":1502104803,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistanceQueryWithInvertedIntersection() throws IOException {\n    final int numMatchingDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n\n    try (Directory dir = newDirectory()) {\n\n      try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig())) {\n        for (int i = 0; i < numMatchingDocs; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 18.313694, -65.227444);\n          w.addDocument(doc);\n        }\n\n        // Add a handful of docs that don't match\n        for (int i = 0; i < 11; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 10, -65.227444);\n          w.addDocument(doc);\n        }\n        w.forceMerge(1);\n      }\n\n      try (IndexReader r = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(r);\n        assertEquals(numMatchingDocs, searcher.count(newDistanceQuery(\"field\", 18, -65, 50_000)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistanceQueryWithInvertedIntersection() throws IOException {\n    final int numMatchingDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n\n    try (Directory dir = newDirectory()) {\n\n      try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig())) {\n        for (int i = 0; i < numMatchingDocs; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 18.313694, -65.227444);\n          w.addDocument(doc);\n        }\n\n        // Add a handful of docs that don't match\n        for (int i = 0; i < 11; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 10, -65.227444);\n          w.addDocument(doc);\n        }\n        w.forceMerge(1);\n      }\n\n      try (IndexReader r = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(r);\n        assertEquals(numMatchingDocs, searcher.count(newDistanceQuery(\"field\", 18, -65, 50_000)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistanceQueryWithInvertedIntersection() throws IOException {\n    final int numMatchingDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n\n    try (Directory dir = newDirectory()) {\n\n      try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig())) {\n        for (int i = 0; i < numMatchingDocs; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 18.313694, -65.227444);\n          w.addDocument(doc);\n        }\n\n        // Add a handful of docs that don't match\n        for (int i = 0; i < 11; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 10, -65.227444);\n          w.addDocument(doc);\n        }\n        w.forceMerge(1);\n      }\n\n      try (IndexReader r = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(r);\n        assertEquals(numMatchingDocs, searcher.count(newDistanceQuery(\"field\", 18, -65, 50_000)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testDistanceQueryWithInvertedIntersection().mjava","sourceNew":"  public void testDistanceQueryWithInvertedIntersection() throws IOException {\n    final int numMatchingDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n\n    try (Directory dir = newDirectory()) {\n\n      try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig())) {\n        for (int i = 0; i < numMatchingDocs; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 18.313694, -65.227444);\n          w.addDocument(doc);\n        }\n\n        // Add a handful of docs that don't match\n        for (int i = 0; i < 11; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 10, -65.227444);\n          w.addDocument(doc);\n        }\n        w.forceMerge(1);\n      }\n\n      try (IndexReader r = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(r);\n        assertEquals(numMatchingDocs, searcher.count(newDistanceQuery(\"field\", 18, -65, 50_000)));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDistanceQueryWithInvertedIntersection() throws IOException {\n    final int numMatchingDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n\n    try (Directory dir = newDirectory()) {\n\n      try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig())) {\n        for (int i = 0; i < numMatchingDocs; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 18.313694, -65.227444);\n          w.addDocument(doc);\n        }\n\n        // Add a handful of docs that don't match\n        for (int i = 0; i < 11; ++i) {\n          Document doc = new Document();\n          addPointToDoc(\"field\", doc, 10, -65.227444);\n          w.addDocument(doc);\n        }\n        w.forceMerge(1);\n      }\n\n      try (IndexReader r = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(r);\n        assertEquals(numMatchingDocs, searcher.count(newDistanceQuery(\"field\", 18, -65, 50_000)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","faf3c558df29f740350b64a25b98edd8f680a1c0"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","faf3c558df29f740350b64a25b98edd8f680a1c0"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["faf3c558df29f740350b64a25b98edd8f680a1c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"faf3c558df29f740350b64a25b98edd8f680a1c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","faf3c558df29f740350b64a25b98edd8f680a1c0"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"faf3c558df29f740350b64a25b98edd8f680a1c0":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}