{"path":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          if (chars == null || toRead > chars.length)\n            chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars, 0, toRead);//fieldsStream.readString();\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca937aa1df116d98918d34d612d66eda116108aa","98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e0e61cae11dd7a1e7057bad3a9164d1307669a9","date":1160414809,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          char[] chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars);\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          if (chars == null || toRead > chars.length)\n            chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars, 0, toRead);//fieldsStream.readString();\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":["ca937aa1df116d98918d34d612d66eda116108aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5fb0d97d0a04ebb8ba42b465420fb12b444b1843","date":1161313682,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          char[] chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars);\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          char[] chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars);\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca937aa1df116d98918d34d612d66eda116108aa","date":1171375612,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          //read in chars b/c we already know the length we need to read\n          char[] chars = new char[toRead];\n          localFieldsStream.readChars(chars, 0, toRead);\n          fieldsData = new String(chars);\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d","5e0e61cae11dd7a1e7057bad3a9164d1307669a9"],"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field as a String, or null.  If null, the Reader value\n     * or binary value is used.  Exactly one of stringValue(), readerValue(), and\n     * binaryValue() must be set.\n     */\n    public String stringValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e","date":1205362958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        IndexInput localFieldsStream = getFieldStream();\n        try {\n          localFieldsStream.seek(pointer);\n          if (isCompressed) {\n            final byte[] b = new byte[toRead];\n            localFieldsStream.readBytes(b, 0, b.length);\n            fieldsData = new String(uncompress(b), \"UTF-8\");\n          } else {\n            //read in chars b/c we already know the length we need to read\n            char[] chars = new char[toRead];\n            localFieldsStream.readChars(chars, 0, toRead);\n            fieldsData = new String(chars);\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof String ? (String) fieldsData : null;\n    }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d","ca937aa1df116d98918d34d612d66eda116108aa","5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n              byte[] bytes = new byte[toRead];\n              localFieldsStream.readBytes(bytes, 0, toRead);\n              fieldsData = new String(bytes, \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n              byte[] bytes = new byte[toRead];\n              localFieldsStream.readBytes(bytes, 0, toRead);\n              fieldsData = new String(bytes, \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n              byte[] bytes = new byte[toRead];\n              localFieldsStream.readBytes(bytes, 0, toRead);\n              fieldsData = new String(bytes, \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n              byte[] bytes = new byte[toRead];\n              localFieldsStream.readBytes(bytes, 0, toRead);\n              fieldsData = new String(bytes, \"UTF-8\");\n            } else {\n              //read in chars b/c we already know the length we need to read\n              char[] chars = new char[toRead];\n              localFieldsStream.readChars(chars, 0, toRead);\n              fieldsData = new String(chars);\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"f44f07aa147c21735d6c43bafa4fde560d0362e1":["e0c804f7aa477229414a7e12882af490c241f64d"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["ca937aa1df116d98918d34d612d66eda116108aa"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"5fb0d97d0a04ebb8ba42b465420fb12b444b1843":["5e0e61cae11dd7a1e7057bad3a9164d1307669a9"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["42579622cc27f9908e64f29fa1130bfc28306009"],"ca937aa1df116d98918d34d612d66eda116108aa":["5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e0e61cae11dd7a1e7057bad3a9164d1307669a9":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42579622cc27f9908e64f29fa1130bfc28306009":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"e0c804f7aa477229414a7e12882af490c241f64d":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f44f07aa147c21735d6c43bafa4fde560d0362e1":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["42579622cc27f9908e64f29fa1130bfc28306009"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["e0c804f7aa477229414a7e12882af490c241f64d"],"5fb0d97d0a04ebb8ba42b465420fb12b444b1843":["ca937aa1df116d98918d34d612d66eda116108aa"],"ca937aa1df116d98918d34d612d66eda116108aa":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["5e0e61cae11dd7a1e7057bad3a9164d1307669a9"],"5e0e61cae11dd7a1e7057bad3a9164d1307669a9":["5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"42579622cc27f9908e64f29fa1130bfc28306009":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"e0c804f7aa477229414a7e12882af490c241f64d":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}