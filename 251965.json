{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  public IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  public IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ae21aa0a9700dcc50c436549450b1547dfaa9d","date":1344005053,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  public IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  public IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  public IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3971a049eab9d119ba1497d7ee89abc1a9a96278","date":1363282186,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setFlushPolicy(FlushPolicy).mjava","sourceNew":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Controls when segments are flushed to disk during indexing.\n   * The {@link FlushPolicy} initialized during {@link IndexWriter} instantiation and once initialized\n   * the given instance is bound to this {@link IndexWriter} and should not be used with another writer.\n   * @see #setMaxBufferedDeleteTerms(int)\n   * @see #setMaxBufferedDocs(int)\n   * @see #setRAMBufferSizeMB(double)\n   */\n  IndexWriterConfig setFlushPolicy(FlushPolicy flushPolicy) {\n    if (flushPolicy == null) {\n      throw new IllegalArgumentException(\"flushPolicy must not be null\");\n    }\n    this.flushPolicy = flushPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"15ae21aa0a9700dcc50c436549450b1547dfaa9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3971a049eab9d119ba1497d7ee89abc1a9a96278","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["3971a049eab9d119ba1497d7ee89abc1a9a96278","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d6f074e73200c07d54f242d3880a8da5a35ff97b","15ae21aa0a9700dcc50c436549450b1547dfaa9d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"15ae21aa0a9700dcc50c436549450b1547dfaa9d":["d6f074e73200c07d54f242d3880a8da5a35ff97b","3971a049eab9d119ba1497d7ee89abc1a9a96278","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}