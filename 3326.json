{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","commits":[{"id":"d27e4011f75a6a0d8e2906aef8348a1692e85473","date":1579187506,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","pathOld":"/dev/null","sourceNew":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDataDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","sourceNew":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDataDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","sourceNew":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, out, out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooManyPoints1D().mjava","sourceNew":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", new BKDConfig(1, 1, numBytesPerDim, 2),\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, out, out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testTooManyPoints1D() throws Exception {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[][] pointValue = new byte[11][numBytesPerDim];\n    BKDWriter w = new BKDWriter(numValues + 1, dir, \"_temp\", 1, 1, numBytesPerDim, 2,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    for(int i=0;i<numValues + 1;i++) {\n      random().nextBytes(pointValue[i]);\n    }\n    MutablePointValues val = new MutablePointValues() {\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue[i];\n        packedValue.offset = 0;\n        packedValue.length = numBytesPerDim;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        return pointValue[i][k];\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return i;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        byte[] temp = pointValue[i];\n        pointValue[i] = pointValue[j];\n        pointValue[j] = temp;\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for (int i = 0; i < size(); i++) {\n          visitor.visit(i, pointValue[i]);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        return 11;\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        return new byte[numBytesPerDim];\n      }\n\n      @Override\n      public int getNumDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        return 1;\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        return numBytesPerDim;\n      }\n\n      @Override\n      public long size() {\n        return 11;\n      }\n\n      @Override\n      public int getDocCount() {\n        return 11;\n      }\n    };\n    try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n      IllegalStateException ex = expectThrows(IllegalStateException.class, () -> { w.writeField(out, out, out, \"\", val);});\n      assertEquals(\"totalPointCount=10 was passed when we were created, but we just hit 11 values\", ex.getMessage());\n      w.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d27e4011f75a6a0d8e2906aef8348a1692e85473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["d27e4011f75a6a0d8e2906aef8348a1692e85473"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"d27e4011f75a6a0d8e2906aef8348a1692e85473":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d27e4011f75a6a0d8e2906aef8348a1692e85473"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}