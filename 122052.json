{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName());\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":null,"sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":null,"sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}