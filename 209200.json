{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","commits":[{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapRatio() throws IOException {\n    setupGeo();\n\n    //Simply assert null shape results in 0\n    adoc(\"999\", (Shape) null);\n    commit();\n    BBoxStrategy bboxStrategy = (BBoxStrategy) strategy;\n    checkValueSource(bboxStrategy.makeOverlapRatioValueSource(randomRectangle(), 0.0), new float[]{0f}, 0f);\n\n    //we test raw BBoxOverlapRatioValueSource without actual indexing\n    for (int SHIFT = 0; SHIFT < 360; SHIFT += 10) {\n      Rectangle queryBox = shiftedRect(0, 40, -20, 20, SHIFT);//40x40, 1600 area\n\n      final boolean MSL = random().nextBoolean();\n      final double minSideLength = MSL ? 0.1 : 0.0;\n      BBoxOverlapRatioValueSource sim = new BBoxOverlapRatioValueSource(null, true, queryBox, 0.5, minSideLength);\n      int nudge = SHIFT == 0 ? 0 : random().nextInt(3) * 10 - 10;//-10, 0, or 10.  Keep 0 on first round.\n\n      final double EPS = 0.0000001;\n\n      assertEquals(\"within\", (200d/1600d * 0.5) + (0.5), sim.score(shiftedRect(10, 30, 0, 10, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"in25%\", 0.25, sim.score(shiftedRect(30, 70, -20, 20, SHIFT), null), EPS);\n\n      assertEquals(\"wrap\", 0.2794117, sim.score(shiftedRect(30, 10, -20, 20, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"no intersection H\", 0.0, sim.score(shiftedRect(-10, -10, -20, 20, SHIFT), null), EPS);\n      assertEquals(\"no intersection V\", 0.0, sim.score(shiftedRect(0, 20, -30, -30, SHIFT), null), EPS);\n\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/1600.0/2.0):0), sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n\n      assertEquals(\"line 25% intersection\", 0.25/2 + (MSL?(10.0*0.1/1600.0/2.0):0.0), sim.score(shiftedRect(-30, 10, 0, 0, SHIFT), null), EPS);\n\n      //test with point query\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 0, 0, SHIFT), 0.5, minSideLength);\n      assertEquals(\"same\", 1.0, sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n      assertEquals(\"contains\", 0.5 + (MSL?(0.1*0.1/(30*10)/2.0):0.0), sim.score(shiftedRect(0, 30, 0, 10, SHIFT), null), EPS);\n\n      //test with line query (vertical this time)\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 20, 40, SHIFT), 0.5, minSideLength);\n      assertEquals(\"line 50%\", 0.5, sim.score(shiftedRect(0, 0, 10, 30, SHIFT), null), EPS);\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/(20*0.1)/2.0):0.0), sim.score(shiftedRect(0, 0, 30, 30, SHIFT), null), EPS);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","sourceNew":"  public void testOverlapRatio() throws IOException {\n    setupGeo();\n\n    //Simply assert null shape results in 0\n    adoc(\"999\", (Shape) null);\n    commit();\n    BBoxStrategy bboxStrategy = (BBoxStrategy) strategy;\n    checkValueSource(bboxStrategy.makeOverlapRatioValueSource(randomRectangle(), 0.0), new float[]{0f}, 0f);\n\n    //we test raw BBoxOverlapRatioValueSource without actual indexing\n    for (int SHIFT = 0; SHIFT < 360; SHIFT += 10) {\n      Rectangle queryBox = shiftedRect(0, 40, -20, 20, SHIFT);//40x40, 1600 area\n\n      final boolean MSL = random().nextBoolean();\n      final double minSideLength = MSL ? 0.1 : 0.0;\n      BBoxOverlapRatioValueSource sim = new BBoxOverlapRatioValueSource(null, true, queryBox, 0.5, minSideLength);\n      int nudge = SHIFT == 0 ? 0 : random().nextInt(3) * 10 - 10;//-10, 0, or 10.  Keep 0 on first round.\n\n      final double EPS = 0.0000001;\n\n      assertEquals(\"within\", (200d/1600d * 0.5) + (0.5), sim.score(shiftedRect(10, 30, 0, 10, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"in25%\", 0.25, sim.score(shiftedRect(30, 70, -20, 20, SHIFT), null), EPS);\n\n      assertEquals(\"wrap\", 0.2794117, sim.score(shiftedRect(30, 10, -20, 20, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"no intersection H\", 0.0, sim.score(shiftedRect(-10, -10, -20, 20, SHIFT), null), EPS);\n      assertEquals(\"no intersection V\", 0.0, sim.score(shiftedRect(0, 20, -30, -30, SHIFT), null), EPS);\n\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/1600.0/2.0):0), sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n\n      assertEquals(\"line 25% intersection\", 0.25/2 + (MSL?(10.0*0.1/1600.0/2.0):0.0), sim.score(shiftedRect(-30, 10, 0, 0, SHIFT), null), EPS);\n\n      //test with point query\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 0, 0, SHIFT), 0.5, minSideLength);\n      assertEquals(\"same\", 1.0, sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n      assertEquals(\"contains\", 0.5 + (MSL?(0.1*0.1/(30*10)/2.0):0.0), sim.score(shiftedRect(0, 30, 0, 10, SHIFT), null), EPS);\n\n      //test with line query (vertical this time)\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 20, 40, SHIFT), 0.5, minSideLength);\n      assertEquals(\"line 50%\", 0.5, sim.score(shiftedRect(0, 0, 10, 30, SHIFT), null), EPS);\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/(20*0.1)/2.0):0.0), sim.score(shiftedRect(0, 0, 30, 30, SHIFT), null), EPS);\n    }\n\n  }\n\n","sourceOld":"  public void testOverlapRatio() throws IOException {\n    setupGeo();\n\n    //Simply assert null shape results in 0\n    adoc(\"999\", (Shape) null);\n    commit();\n    BBoxStrategy bboxStrategy = (BBoxStrategy) strategy;\n    checkValueSource(bboxStrategy.makeOverlapRatioValueSource(randomRectangle(), 0.0), new float[]{0f}, 0f);\n\n    //we test raw BBoxOverlapRatioValueSource without actual indexing\n    for (int SHIFT = 0; SHIFT < 360; SHIFT += 10) {\n      Rectangle queryBox = shiftedRect(0, 40, -20, 20, SHIFT);//40x40, 1600 area\n\n      final boolean MSL = random().nextBoolean();\n      final double minSideLength = MSL ? 0.1 : 0.0;\n      BBoxOverlapRatioValueSource sim = new BBoxOverlapRatioValueSource(null, true, queryBox, 0.5, minSideLength);\n      int nudge = SHIFT == 0 ? 0 : random().nextInt(3) * 10 - 10;//-10, 0, or 10.  Keep 0 on first round.\n\n      final double EPS = 0.0000001;\n\n      assertEquals(\"within\", (200d/1600d * 0.5) + (0.5), sim.score(shiftedRect(10, 30, 0, 10, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"in25%\", 0.25, sim.score(shiftedRect(30, 70, -20, 20, SHIFT), null), EPS);\n\n      assertEquals(\"wrap\", 0.2794117, sim.score(shiftedRect(30, 10, -20, 20, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"no intersection H\", 0.0, sim.score(shiftedRect(-10, -10, -20, 20, SHIFT), null), EPS);\n      assertEquals(\"no intersection V\", 0.0, sim.score(shiftedRect(0, 20, -30, -30, SHIFT), null), EPS);\n\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/1600.0/2.0):0), sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n\n      assertEquals(\"line 25% intersection\", 0.25/2 + (MSL?(10.0*0.1/1600.0/2.0):0.0), sim.score(shiftedRect(-30, 10, 0, 0, SHIFT), null), EPS);\n\n      //test with point query\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 0, 0, SHIFT), 0.5, minSideLength);\n      assertEquals(\"same\", 1.0, sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n      assertEquals(\"contains\", 0.5 + (MSL?(0.1*0.1/(30*10)/2.0):0.0), sim.score(shiftedRect(0, 30, 0, 10, SHIFT), null), EPS);\n\n      //test with line query (vertical this time)\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 20, 40, SHIFT), 0.5, minSideLength);\n      assertEquals(\"line 50%\", 0.5, sim.score(shiftedRect(0, 0, 10, 30, SHIFT), null), EPS);\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/(20*0.1)/2.0):0.0), sim.score(shiftedRect(0, 0, 30, 30, SHIFT), null), EPS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#testOverlapRatio().mjava","sourceNew":"  public void testOverlapRatio() throws IOException {\n    setupGeo();\n\n    //Simply assert null shape results in 0\n    adoc(\"999\", (Shape) null);\n    commit();\n    BBoxStrategy bboxStrategy = (BBoxStrategy) strategy;\n    checkValueSource(bboxStrategy.makeOverlapRatioValueSource(randomRectangle(), 0.0), new float[]{0f}, 0f);\n\n    //we test raw BBoxOverlapRatioValueSource without actual indexing\n    for (int SHIFT = 0; SHIFT < 360; SHIFT += 10) {\n      Rectangle queryBox = shiftedRect(0, 40, -20, 20, SHIFT);//40x40, 1600 area\n\n      final boolean MSL = random().nextBoolean();\n      final double minSideLength = MSL ? 0.1 : 0.0;\n      BBoxOverlapRatioValueSource sim = new BBoxOverlapRatioValueSource(null, true, queryBox, 0.5, minSideLength);\n      int nudge = SHIFT == 0 ? 0 : random().nextInt(3) * 10 - 10;//-10, 0, or 10.  Keep 0 on first round.\n\n      final double EPS = 0.0000001;\n\n      assertEquals(\"within\", (200d/1600d * 0.5) + (0.5), sim.score(shiftedRect(10, 30, 0, 10, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"in25%\", 0.25, sim.score(shiftedRect(30, 70, -20, 20, SHIFT), null), EPS);\n\n      assertEquals(\"wrap\", 0.2794117, sim.score(shiftedRect(30, 10, -20, 20, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"no intersection H\", 0.0, sim.score(shiftedRect(-10, -10, -20, 20, SHIFT), null), EPS);\n      assertEquals(\"no intersection V\", 0.0, sim.score(shiftedRect(0, 20, -30, -30, SHIFT), null), EPS);\n\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/1600.0/2.0):0), sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n\n      assertEquals(\"line 25% intersection\", 0.25/2 + (MSL?(10.0*0.1/1600.0/2.0):0.0), sim.score(shiftedRect(-30, 10, 0, 0, SHIFT), null), EPS);\n\n      //test with point query\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 0, 0, SHIFT), 0.5, minSideLength);\n      assertEquals(\"same\", 1.0, sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n      assertEquals(\"contains\", 0.5 + (MSL?(0.1*0.1/(30*10)/2.0):0.0), sim.score(shiftedRect(0, 30, 0, 10, SHIFT), null), EPS);\n\n      //test with line query (vertical this time)\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 20, 40, SHIFT), 0.5, minSideLength);\n      assertEquals(\"line 50%\", 0.5, sim.score(shiftedRect(0, 0, 10, 30, SHIFT), null), EPS);\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/(20*0.1)/2.0):0.0), sim.score(shiftedRect(0, 0, 30, 30, SHIFT), null), EPS);\n    }\n\n  }\n\n","sourceOld":"  public void testOverlapRatio() throws IOException {\n    setupGeo();\n\n    //Simply assert null shape results in 0\n    adoc(\"999\", (Shape) null);\n    commit();\n    BBoxStrategy bboxStrategy = (BBoxStrategy) strategy;\n    checkValueSource(bboxStrategy.makeOverlapRatioValueSource(randomRectangle(), 0.0), new float[]{0f}, 0f);\n\n    //we test raw BBoxOverlapRatioValueSource without actual indexing\n    for (int SHIFT = 0; SHIFT < 360; SHIFT += 10) {\n      Rectangle queryBox = shiftedRect(0, 40, -20, 20, SHIFT);//40x40, 1600 area\n\n      final boolean MSL = random().nextBoolean();\n      final double minSideLength = MSL ? 0.1 : 0.0;\n      BBoxOverlapRatioValueSource sim = new BBoxOverlapRatioValueSource(null, true, queryBox, 0.5, minSideLength);\n      int nudge = SHIFT == 0 ? 0 : random().nextInt(3) * 10 - 10;//-10, 0, or 10.  Keep 0 on first round.\n\n      final double EPS = 0.0000001;\n\n      assertEquals(\"within\", (200d/1600d * 0.5) + (0.5), sim.score(shiftedRect(10, 30, 0, 10, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"in25%\", 0.25, sim.score(shiftedRect(30, 70, -20, 20, SHIFT), null), EPS);\n\n      assertEquals(\"wrap\", 0.2794117, sim.score(shiftedRect(30, 10, -20, 20, SHIFT + nudge), null), EPS);\n\n      assertEquals(\"no intersection H\", 0.0, sim.score(shiftedRect(-10, -10, -20, 20, SHIFT), null), EPS);\n      assertEquals(\"no intersection V\", 0.0, sim.score(shiftedRect(0, 20, -30, -30, SHIFT), null), EPS);\n\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/1600.0/2.0):0), sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n\n      assertEquals(\"line 25% intersection\", 0.25/2 + (MSL?(10.0*0.1/1600.0/2.0):0.0), sim.score(shiftedRect(-30, 10, 0, 0, SHIFT), null), EPS);\n\n      //test with point query\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 0, 0, SHIFT), 0.5, minSideLength);\n      assertEquals(\"same\", 1.0, sim.score(shiftedRect(0, 0, 0, 0, SHIFT), null), EPS);\n      assertEquals(\"contains\", 0.5 + (MSL?(0.1*0.1/(30*10)/2.0):0.0), sim.score(shiftedRect(0, 30, 0, 10, SHIFT), null), EPS);\n\n      //test with line query (vertical this time)\n      sim = new BBoxOverlapRatioValueSource(null, true, shiftedRect(0, 0, 20, 40, SHIFT), 0.5, minSideLength);\n      assertEquals(\"line 50%\", 0.5, sim.score(shiftedRect(0, 0, 10, 30, SHIFT), null), EPS);\n      assertEquals(\"point\", 0.5 + (MSL?(0.1*0.1/(20*0.1)/2.0):0.0), sim.score(shiftedRect(0, 0, 30, 30, SHIFT), null), EPS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}