{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11aff2ac25cc001599c10577012e84297104c48","date":1355045169,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(Paths.get(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader(lineFileOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f11aff2ac25cc001599c10577012e84297104c48"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f11aff2ac25cc001599c10577012e84297104c48":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f11aff2ac25cc001599c10577012e84297104c48"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f11aff2ac25cc001599c10577012e84297104c48","407687e67faf6e1f02a211ca078d8e3eed631027"],"f11aff2ac25cc001599c10577012e84297104c48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}