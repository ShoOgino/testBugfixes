{"path":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","sourceNew":"  public void set(int index, long value) {\n    if (value >= currentMaxValue) {\n      int bpv = getBitsPerValue();\n      while(currentMaxValue <= value && currentMaxValue != Long.MAX_VALUE) {\n        bpv++;\n        currentMaxValue *= 2;\n      }\n      final int valueCount = size();\n      PackedInts.Mutable next = PackedInts.getMutable(valueCount, getSize(bpv));\n      for(int i=0;i<valueCount;i++) {\n        next.set(i, current.get(i));\n      }\n      current = next;\n      currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n    }\n    current.set(index, value);\n  }\n\n","sourceOld":"  public void set(int index, long value) {\n    if (value >= currentMaxValue) {\n      int bpv = getBitsPerValue();\n      while(currentMaxValue <= value && currentMaxValue != Long.MAX_VALUE) {\n        bpv++;\n        currentMaxValue *= 2;\n      }\n      final int valueCount = size();\n      PackedInts.Mutable next = PackedInts.getMutable(valueCount, getSize(bpv));\n      for(int i=0;i<valueCount;i++) {\n        next.set(i, current.get(i));\n      }\n      current = next;\n      currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n    }\n    current.set(index, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","sourceNew":"  public void set(int index, long value) {\n    if (value >= currentMaxValue) {\n      int bpv = getBitsPerValue();\n      while(currentMaxValue <= value && currentMaxValue != Long.MAX_VALUE) {\n        bpv++;\n        currentMaxValue *= 2;\n      }\n      final int valueCount = size();\n      PackedInts.Mutable next = PackedInts.getMutable(valueCount, bpv, acceptableOverheadRatio);\n      for(int i=0;i<valueCount;i++) {\n        next.set(i, current.get(i));\n      }\n      current = next;\n      currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n    }\n    current.set(index, value);\n  }\n\n","sourceOld":"  public void set(int index, long value) {\n    if (value >= currentMaxValue) {\n      int bpv = getBitsPerValue();\n      while(currentMaxValue <= value && currentMaxValue != Long.MAX_VALUE) {\n        bpv++;\n        currentMaxValue *= 2;\n      }\n      final int valueCount = size();\n      PackedInts.Mutable next = PackedInts.getMutable(valueCount, getSize(bpv));\n      for(int i=0;i<valueCount;i++) {\n        next.set(i, current.get(i));\n      }\n      current = next;\n      currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n    }\n    current.set(index, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","sourceNew":"  public void set(int index, long value) {\n    ensureCapacity(value);\n    current.set(index, value);\n  }\n\n","sourceOld":"  public void set(int index, long value) {\n    if (value >= currentMaxValue) {\n      int bpv = getBitsPerValue();\n      while(currentMaxValue <= value && currentMaxValue != Long.MAX_VALUE) {\n        bpv++;\n        currentMaxValue *= 2;\n      }\n      final int valueCount = size();\n      PackedInts.Mutable next = PackedInts.getMutable(valueCount, bpv, acceptableOverheadRatio);\n      for(int i=0;i<valueCount;i++) {\n        next.set(i, current.get(i));\n      }\n      current = next;\n      currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n    }\n    current.set(index, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","sourceNew":"  @Override\n  public void set(int index, long value) {\n    ensureCapacity(value);\n    current.set(index, value);\n  }\n\n","sourceOld":"  public void set(int index, long value) {\n    ensureCapacity(value);\n    current.set(index, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#set(int,long).mjava","sourceNew":"  @Override\n  public void set(int index, long value) {\n    ensureCapacity(value);\n    current.set(index, value);\n  }\n\n","sourceOld":"  public void set(int index, long value) {\n    ensureCapacity(value);\n    current.set(index, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["747628bb19a950ac2141b16756bdce9a47e94cc2","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}