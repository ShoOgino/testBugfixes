{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n      @Override\n      protected List<OffsetsEnum> createOffsetsEnumsFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumsFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n      @Override\n      protected List<OffsetsEnum> createOffsetsEnumsFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumsFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(IndexReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public List<OffsetsEnum> getOffsetsEnums(IndexReader reader, int docId, String content) throws IOException {\n        return Collections.emptyList();\n      }\n\n      @Override\n      protected List<OffsetsEnum> createOffsetsEnumsFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumsFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(new UHComponents(\"field\",\n        (s) -> false,\n        new MatchAllDocsQuery(), new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0], Collections.emptySet())) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(LeafReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(\"field\",\n        new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0]) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(IndexReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":null,"bugIntro":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2a55d7ebf9e9ced797f40d5154d602029a9791d","date":1561151156,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(new UHComponents(\"field\",\n        (s) -> false,\n        new MatchAllDocsQuery(), new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0], false, Collections.emptySet())) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(LeafReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(new UHComponents(\"field\",\n        (s) -> false,\n        new MatchAllDocsQuery(), new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0], Collections.emptySet())) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(LeafReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testFieldOffsetStrategyExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(new UHComponents(\"field\",\n        (s) -> false,\n        new MatchAllDocsQuery(), new BytesRef[0],\n        PhraseHelper.NONE,\n        new LabelledCharArrayMatcher[0], false, Collections.emptySet())) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(LeafReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the FieldOffsetStrategy\n   * for customizations out of package.\n   */\n  @Test\n  public void testFieldOffsetStrategyExtensibility() {\n    final UnifiedHighlighter.OffsetSource offsetSource = UnifiedHighlighter.OffsetSource.NONE_NEEDED;\n    FieldOffsetStrategy strategy = new FieldOffsetStrategy(new UHComponents(\"field\",\n        (s) -> false,\n        new MatchAllDocsQuery(), new BytesRef[0],\n        PhraseHelper.NONE,\n        new CharacterRunAutomaton[0], false, Collections.emptySet())) {\n      @Override\n      public UnifiedHighlighter.OffsetSource getOffsetSource() {\n        return offsetSource;\n      }\n\n      @Override\n      public OffsetsEnum getOffsetsEnum(LeafReader reader, int docId, String content) throws IOException {\n        return OffsetsEnum.EMPTY;\n      }\n\n      @Override\n      protected OffsetsEnum createOffsetsEnumFromReader(LeafReader leafReader, int doc) throws IOException {\n        return super.createOffsetsEnumFromReader(leafReader, doc);\n      }\n\n    };\n    assertEquals(offsetSource, strategy.getOffsetSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["8764ca7bb74ee716c839b9545a93ec4a578c2005"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d35c63123a7e255b58f8cf3948eb9a6128100a32"]},"commit2Childs":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["8764ca7bb74ee716c839b9545a93ec4a578c2005","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["f2e9861e4a2b724d9fc51b618714c579491b78d7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}