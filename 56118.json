{"path":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","commits":[{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    // Should pass\n    testCollectionCreateSearchDelete();\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4f90b75d4c7f33d491332e1b1482e5ed463ef8ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n    \n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    // Should pass\n    testCollectionCreateSearchDelete();\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c7e490a32a4bba4c76369c6424596e9a2afd0f8","date":1438805127,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    // save original username/password\n    final String originalRequestUsername = requestUsername;\n    final String originalRequestPassword = requestPassword;\n\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n    \n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      // restore original username/password\n      requestUsername = originalRequestUsername;\n      requestPassword = originalRequestPassword;        \n    }\n  }\n\n","sourceOld":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n    \n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n\n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n\n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n    // save original username/password\n    final String originalRequestUsername = requestUsername;\n    final String originalRequestPassword = requestPassword;\n\n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = MockAuthenticationPlugin.expectedPassword;\n    \n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n    \n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n    \n    requestUsername = MockAuthenticationPlugin.expectedUsername;\n    requestPassword = \"junkpassword\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      // restore original username/password\n      requestUsername = originalRequestUsername;\n      requestPassword = originalRequestPassword;        \n    }\n  }\n\n","bugFix":null,"bugIntro":["4f90b75d4c7f33d491332e1b1482e5ed463ef8ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // Should pass\n    testCollectionCreateSearchDelete();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  @Override\n  public void testBasics() throws Exception {\n\n    final String collectionName = \"testAuthenticationFrameworkCollection\";\n\n    // Should pass\n    testCollectionCreateSearchDelete(collectionName);\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete(collectionName);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae827abc0676fd634796da7b0a0726ebac813b8","date":1467296417,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n\n    // Should pass\n    collectionCreateSearchDelete(miniCluster);\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      collectionCreateSearchDelete(miniCluster);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n\n    miniCluster.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // Should pass\n    testCollectionCreateSearchDelete();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["4f90b75d4c7f33d491332e1b1482e5ed463ef8ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f90b75d4c7f33d491332e1b1482e5ed463ef8ef","date":1467306143,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n\n    // Should pass\n    collectionCreateSearchDelete(miniCluster);\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      collectionCreateSearchDelete(miniCluster);\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n\n    miniCluster.shutdown();\n  }\n\n","bugFix":["5ae827abc0676fd634796da7b0a0726ebac813b8","58b7eb80017f1c5b32035176b965fa0cc0287d04","6bdcb86c29922edae9a14852e636303bc52df094"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ae3539e829325e80cc0e8d65df4d724cc762d1","date":1467374872,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // Should pass\n    testCollectionCreateSearchDelete();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // Should pass\n    testCollectionCreateSearchDelete();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n    \n    // Should fail with 401\n    try {\n      testCollectionCreateSearchDelete();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    try {\n      // Should pass\n      collectionCreateSearchDelete(miniCluster);\n\n      MockAuthenticationPlugin.expectedUsername = \"solr\";\n      MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n      // Should fail with 401\n      try {\n        collectionCreateSearchDelete(miniCluster);\n        fail(\"Should've returned a 401 error\");\n      } catch (Exception ex) {\n        if (!ex.getMessage().contains(\"Error 401\")) {\n          fail(\"Should've returned a 401 error\");\n        }\n      } finally {\n        MockAuthenticationPlugin.expectedUsername = null;\n        MockAuthenticationPlugin.expectedPassword = null;\n      }\n    } finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n          this::collectionCreateSearchDeleteTwice);\n      assertTrue(\"Should've returned a 401 error\", e.getMessage().contains(\"Error 401\"));\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      collectionCreateSearchDeleteTwice();\n      fail(\"Should've returned a 401 error\");\n    } catch (Exception ex) {\n      if (!ex.getMessage().contains(\"Error 401\")) {\n        fail(\"Should've returned a 401 error\");\n      }\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n          this::collectionCreateSearchDeleteTwice);\n      assertTrue(\"Should've returned a 401 error\", e.getMessage().contains(\"Error 401\"));\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n          this::collectionCreateSearchDeleteTwice);\n      assertTrue(\"Should've returned a 401 error\", e.getMessage().contains(\"Error 401\"));\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n          this::collectionCreateSearchDeleteTwice);\n      assertTrue(\"Should've returned a 401 error\", e.getMessage().contains(\"Error 401\"));\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    collectionCreateSearchDeleteTwice();\n\n    MockAuthenticationPlugin.expectedUsername = \"solr\";\n    MockAuthenticationPlugin.expectedPassword = \"s0lrRocks\";\n\n    // Should fail with 401\n    try {\n      HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n          this::collectionCreateSearchDeleteTwice);\n      assertTrue(\"Should've returned a 401 error\", e.getMessage().contains(\"Error 401\"));\n    } finally {\n      MockAuthenticationPlugin.expectedUsername = null;\n      MockAuthenticationPlugin.expectedPassword = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["0c7e490a32a4bba4c76369c6424596e9a2afd0f8"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","4f90b75d4c7f33d491332e1b1482e5ed463ef8ef"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["a52341299179de5479672f7cf518bf4b173f34b3"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["56ae3539e829325e80cc0e8d65df4d724cc762d1","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["6bdcb86c29922edae9a14852e636303bc52df094"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","56ae3539e829325e80cc0e8d65df4d724cc762d1"],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"a52341299179de5479672f7cf518bf4b173f34b3":["56ae3539e829325e80cc0e8d65df4d724cc762d1","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5ae827abc0676fd634796da7b0a0726ebac813b8":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"4f90b75d4c7f33d491332e1b1482e5ed463ef8ef":["5ae827abc0676fd634796da7b0a0726ebac813b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"db96734b79e26d948b59f68bd4564c4836a71acf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0c7e490a32a4bba4c76369c6424596e9a2afd0f8":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["936cdd5882761db3b844afd6f84ab81cbb011a75","5719bfb2650ba43855e20564d39873bbbdc7f02c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a52341299179de5479672f7cf518bf4b173f34b3"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["db96734b79e26d948b59f68bd4564c4836a71acf"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["56ae3539e829325e80cc0e8d65df4d724cc762d1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ae827abc0676fd634796da7b0a0726ebac813b8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["0c7e490a32a4bba4c76369c6424596e9a2afd0f8"],"a52341299179de5479672f7cf518bf4b173f34b3":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"5ae827abc0676fd634796da7b0a0726ebac813b8":["4f90b75d4c7f33d491332e1b1482e5ed463ef8ef"],"4f90b75d4c7f33d491332e1b1482e5ed463ef8ef":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c7e490a32a4bba4c76369c6424596e9a2afd0f8":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}