{"path":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application allways asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    return topDocs(start, pq.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","sourceNew":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application allways asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(start, totalHits < pq.size() ? totalHits : pq.size());\n  }\n\n","sourceOld":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application allways asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    return topDocs(start, pq.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","sourceNew":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application always asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(start, totalHits < pq.size() ? totalHits : pq.size());\n  }\n\n","sourceOld":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application allways asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(start, totalHits < pq.size() ? totalHits : pq.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int).mjava","sourceNew":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application always asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(start, totalHits < pq.size() ? totalHits : pq.size());\n  }\n\n","sourceOld":"  /**\n   * Returns the documents in the rage [start .. pq.size()) that were collected\n   * by this collector. Note that if start >= pq.size(), an empty TopDocs is\n   * returned.<br>\n   * This method is convenient to call if the application always asks for the\n   * last results, starting from the last 'page'.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different <code>start</code>, you should call {@link #topDocs()} and work\n   * with the returned {@link TopDocs} object, which will contain all the\n   * results this search execution collected.\n   */\n  public final TopDocs topDocs(int start) {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(start, totalHits < pq.size() ? totalHits : pq.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}