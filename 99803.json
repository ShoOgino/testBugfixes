{"path":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new EnhancementsIndexingParams(new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new EnhancementsIndexingParams(new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}