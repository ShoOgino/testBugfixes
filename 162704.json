{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}