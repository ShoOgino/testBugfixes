{"path":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.getField( n ).stringValue();\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":null,"sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.getField( n ).stringValue();\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}