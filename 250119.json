{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","sourceNew":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws CorruptIndexException, IOException {\n    forceMergeDeletes(true);\n  }\n\n","sourceOld":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws CorruptIndexException, IOException {\n    forceMergeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","sourceNew":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws IOException {\n    forceMergeDeletes(true);\n  }\n\n","sourceOld":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws CorruptIndexException, IOException {\n    forceMergeDeletes(true);\n  }\n\n","bugFix":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","sourceNew":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws IOException {\n    forceMergeDeletes(true);\n  }\n\n","sourceOld":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws CorruptIndexException, IOException {\n    forceMergeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes().mjava","sourceNew":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   */\n  public void forceMergeDeletes() throws IOException {\n    forceMergeDeletes(true);\n  }\n\n","sourceOld":"  /**\n   *  Forces merging of all segments that have deleted\n   *  documents.  The actual merges to be executed are\n   *  determined by the {@link MergePolicy}.  For example,\n   *  the default {@link TieredMergePolicy} will only\n   *  pick a segment if the percentage of\n   *  deleted docs is over 10%.\n   *\n   *  <p>This is often a horribly costly operation; rarely\n   *  is it warranted.</p>\n   *\n   *  <p>To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}.</p>\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMergeDeletes() throws IOException {\n    forceMergeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}