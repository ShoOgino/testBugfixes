{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createWeight(searcher.rewrite(query2.build()), ScoreMode.COMPLETE, 1);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createWeight(searcher.rewrite(query2.build()), ScoreMode.COMPLETE, 1);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7dd748bb245633a8195281556bb0e68a6ea97d18","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}