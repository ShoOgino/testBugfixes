{"path":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","commits":[{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,String,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    String val;\n    try {\n      val = toInternal(externalVal);\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + externalVal + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c26f00b574427b55127e869b935845554afde1fa":["292ece8c0acfbfc6126153b17f0c3ca809add4f0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}