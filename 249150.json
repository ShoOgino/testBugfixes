{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<BytesRef> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new BytesRef(acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(\"id\", terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<BytesRef> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new BytesRef(acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(\"id\", terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomIntBetween(0, 1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomIntBetween(0, 2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomIntBetween(0, acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<BytesRef> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new BytesRef(acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(\"id\", terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<BytesRef> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new BytesRef(acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermInSetQuery(\"id\", terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"830a7b9be2f498e249b346796921c94cdd39d98f":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["af2638813028b254a88b418ebeafb541afb49653"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["af2638813028b254a88b418ebeafb541afb49653","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["830a7b9be2f498e249b346796921c94cdd39d98f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"830a7b9be2f498e249b346796921c94cdd39d98f":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["830a7b9be2f498e249b346796921c94cdd39d98f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}