{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":["cab31d869ae741ad9e0dcd49b07ef6ce51107a7c","cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          if (cacheValue.refCnt == 0) {\n            close(cacheValue.directory);\n          }\n        }\n      }\n      \n      if (directory == null || forceNew) {\n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eafe65017ee691866644025d85b041b4880c5e3","date":1355253547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a2db3227fbc9542db033f69166e6608fd8f27be","date":1355326983,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType, boolean forceNew)\n      throws IOException {\n    String fullPath = new File(path).getAbsolutePath();\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n        if (forceNew) {\n          cacheValue.doneWithDir = true;\n          \n          // we make a quick close attempt,\n          // otherwise this should be closed\n          // when whatever is using it, releases it\n          \n          if (cacheValue.refCnt == 0) {\n            try {\n              // the following will decref, so\n              // first incref\n              cacheValue.refCnt++;\n              close(cacheValue.directory);\n            } catch (IOException e) {\n              SolrException.log(log, \"Error closing directory\", e);\n            }\n          }\n          \n        }\n      }\n      \n      if (directory == null || forceNew) { \n        directory = create(fullPath);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue();\n        newCacheValue.directory = directory;\n        newCacheValue.path = fullPath;\n        \n        injectLockFactory(directory, path, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath + \" forceNew:\" + forceNew);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eafe65017ee691866644025d85b041b4880c5e3":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","5a2db3227fbc9542db033f69166e6608fd8f27be"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["e22ffe8cc51a892ae103df018822d7873e901c2a","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["5a2db3227fbc9542db033f69166e6608fd8f27be"],"5a2db3227fbc9542db033f69166e6608fd8f27be":["1eafe65017ee691866644025d85b041b4880c5e3"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["e22ffe8cc51a892ae103df018822d7873e901c2a","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"1eafe65017ee691866644025d85b041b4880c5e3":["5a2db3227fbc9542db033f69166e6608fd8f27be"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a2db3227fbc9542db033f69166e6608fd8f27be":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["1eafe65017ee691866644025d85b041b4880c5e3","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["616c1830142ff5c1ddedec1ed898733b73c8e23b","d9405f486872f1e416304dfe389741f4ee2f8a4d","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["616c1830142ff5c1ddedec1ed898733b73c8e23b","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}