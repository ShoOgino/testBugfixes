{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      LOG.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      LOG.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStdOut();\n    LOG.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      LOG.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      LOG.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStdOut();\n    LOG.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStdOut();\n    log.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      LOG.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      LOG.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStdOut();\n    LOG.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStream(System.out);\n    log.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStdOut();\n    log.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      if (log.isInfoEnabled()) {\n        log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      }\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStream(System.out);\n    if (log.isInfoEnabled()) {\n      log.info(\"Saw states: {}\", Arrays.toString(statesSeen.toArray()));\n    }\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStream(System.out);\n    log.info(\"Saw states: \" + Arrays.toString(statesSeen.toArray()));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testPullReplicaStates().mjava","sourceNew":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      if (log.isInfoEnabled()) {\n        log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      }\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStream(System.out);\n    if (log.isInfoEnabled()) {\n      log.info(\"Saw states: {}\", Arrays.toString(statesSeen.toArray()));\n    }\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","sourceOld":"  @Ignore(\"Ignore until I figure out a way to reliably record state transitions\")\n  public void testPullReplicaStates() throws Exception {\n    // Validate that pull replicas go through the correct states when starting, stopping, reconnecting\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(500);\n    List<Replica.State> statesSeen = new ArrayList<>(3);\n    cluster.getSolrClient().registerCollectionStateWatcher(collectionName, (liveNodes, collectionState) -> {\n      Replica r = collectionState.getSlice(\"shard1\").getReplica(\"core_node2\");\n      log.info(\"CollectionStateWatcher state change: {}\", r);\n      if (r == null) {\n        return false;\n      }\n      statesSeen.add(r.getState());\n      if (log.isInfoEnabled()) {\n        log.info(\"CollectionStateWatcher saw state: {}\", r.getState());\n      }\n      return r.getState() == Replica.State.ACTIVE;\n    });\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    zkClient().printLayoutToStream(System.out);\n    if (log.isInfoEnabled()) {\n      log.info(\"Saw states: {}\", Arrays.toString(statesSeen.toArray()));\n    }\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), 3, statesSeen.size());\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.DOWN, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.RECOVERING, statesSeen.get(0));\n    assertEquals(\"Expecting DOWN->RECOVERING->ACTIVE but saw: \" + Arrays.toString(statesSeen.toArray()), Replica.State.ACTIVE, statesSeen.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}