{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lat/lon distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinLat, final double rMaxLat, final double rMinLon,\n                                                     final double rMaxLon, final double centerLat, final double centerLon,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinLat, rMaxLat, rMinLon, rMaxLon, centerLat, centerLon, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxLon - rMinLon) <= 70.0) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, rMinLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, rMinLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, rMaxLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, rMaxLon) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLat, centerLon,\n                                   radiusMeters,\n                                   rMinLat, rMaxLat,\n                                   rMinLon, rMaxLon);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lat/lon distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinLat, final double rMaxLat, final double rMinLon,\n                                                     final double rMaxLon, final double centerLat, final double centerLon,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinLat, rMaxLat, rMinLon, rMaxLon, centerLat, centerLon, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxLon - rMinLon) <= 70.0) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, rMinLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, rMinLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, rMaxLon) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, rMaxLon) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLat, centerLon,\n                                   radiusMeters,\n                                   rMinLat, rMaxLat,\n                                   rMinLon, rMaxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}