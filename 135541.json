{"path":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Date start = new Date();\n\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Date start = new Date();\n\n      IndexWriter writer = new IndexWriter(\"index\", new StopAnalyzer(), true);\n      writer.mergeFactor = 20;\n\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474","date":1075379110,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    try {\n      Date start = new Date();\n\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Date start = new Date();\n\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10467d4e31a3e547d4c86fcb69606f3be7503db9","date":1080652979,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    String usage = \"java \" + IndexFiles.class + \" <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    try {\n      Date start = new Date();\n\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff29b6ca81ce606a35ea1f66540f658f6834977f","date":1091569631,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    String usage = \"java \" + IndexFiles.class + \" <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b631c2fa399b5bd35cf5fd14eaf0dac1e02d89","date":1094161523,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, new File(args[0]));\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(\"index\", new StandardAnalyzer(), true);\n      indexDocs(writer, new File(args[0]));\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc642e0d5765c62f87377deddcba50c84f64aa7","date":1100804053,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, new File(args[0]));\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a862b582eb65bb20bb71a7b3890193c3bc02ad99","date":1141070662,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6880911c836817ac2521251b88f85d02c450ecb","date":1251223725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT).setOpenMode(\n              OpenMode.CREATE).setAnalyzer(\n              new StandardAnalyzer(Version.LUCENE_CURRENT)));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT).setOpenMode(\n              OpenMode.CREATE).setAnalyzer(\n              new StandardAnalyzer(Version.LUCENE_CURRENT)));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10467d4e31a3e547d4c86fcb69606f3be7503db9":["f69c8a96ae80e1a0dcec4ca1702fe3c53c293474"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"f6880911c836817ac2521251b88f85d02c450ecb":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"f9b631c2fa399b5bd35cf5fd14eaf0dac1e02d89":["ff29b6ca81ce606a35ea1f66540f658f6834977f"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["f6880911c836817ac2521251b88f85d02c450ecb"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cdc642e0d5765c62f87377deddcba50c84f64aa7":["f9b631c2fa399b5bd35cf5fd14eaf0dac1e02d89"],"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"ff29b6ca81ce606a35ea1f66540f658f6834977f":["10467d4e31a3e547d4c86fcb69606f3be7503db9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["cdc642e0d5765c62f87377deddcba50c84f64aa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"10467d4e31a3e547d4c86fcb69606f3be7503db9":["ff29b6ca81ce606a35ea1f66540f658f6834977f"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["f6880911c836817ac2521251b88f85d02c450ecb"],"f6880911c836817ac2521251b88f85d02c450ecb":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"f9b631c2fa399b5bd35cf5fd14eaf0dac1e02d89":["cdc642e0d5765c62f87377deddcba50c84f64aa7"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cdc642e0d5765c62f87377deddcba50c84f64aa7":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474":["10467d4e31a3e547d4c86fcb69606f3be7503db9"],"ff29b6ca81ce606a35ea1f66540f658f6834977f":["f9b631c2fa399b5bd35cf5fd14eaf0dac1e02d89"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["f69c8a96ae80e1a0dcec4ca1702fe3c53c293474"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}