{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    testSkipTo(1);\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    testSkipTo(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    testSkipTo(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    testSkipTo(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    PostingsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    DocsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    PostingsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    PostingsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo().mjava","sourceNew":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    PostingsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        null,\n        PostingsEnum.FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        null,\n        PostingsEnum.FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n\n    PostingsEnum tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        ta.field(),\n        new BytesRef(ta.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = TestUtil.docs(random(), reader,\n        tb.field(),\n        new BytesRef(tb.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        PostingsEnum.FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = TestUtil.docs(random(), reader,\n        tc.field(),\n        new BytesRef(tc.text()),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}