{"path":"contrib/snowball/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","commits":[{"id":"b62da6a75575f59a016a076b4753dc6e20c74b44","date":1219528967,"type":1,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/snowball/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","pathOld":"contrib/snowball/src/java/net/sf/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","sourceNew":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","pathOld":"contrib/snowball/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","sourceNew":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","pathOld":"/dev/null","sourceNew":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40ff39db4a2b90a440b97f2a7d7eda344f004ef","date":1264074978,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/snowball/src/java/org/tartarus/snowball/ext/SpanishStemmer#r_attached_pronoun().mjava","sourceNew":null,"sourceOld":"        private boolean r_attached_pronoun() {\n            int among_var;\n            // (, line 67\n            // [, line 68\n            ket = cursor;\n            // substring, line 68\n            if (find_among_b(a_1, 13) == 0)\n            {\n                return false;\n            }\n            // ], line 68\n            bra = cursor;\n            // substring, line 72\n            among_var = find_among_b(a_2, 11);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // call RV, line 72\n            if (!r_RV())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 73\n                    // ], line 73\n                    bra = cursor;\n                    // <-, line 73\n                    slice_from(\"iendo\");\n                    break;\n                case 2:\n                    // (, line 74\n                    // ], line 74\n                    bra = cursor;\n                    // <-, line 74\n                    slice_from(\"ando\");\n                    break;\n                case 3:\n                    // (, line 75\n                    // ], line 75\n                    bra = cursor;\n                    // <-, line 75\n                    slice_from(\"ar\");\n                    break;\n                case 4:\n                    // (, line 76\n                    // ], line 76\n                    bra = cursor;\n                    // <-, line 76\n                    slice_from(\"er\");\n                    break;\n                case 5:\n                    // (, line 77\n                    // ], line 77\n                    bra = cursor;\n                    // <-, line 77\n                    slice_from(\"ir\");\n                    break;\n                case 6:\n                    // (, line 81\n                    // delete, line 81\n                    slice_del();\n                    break;\n                case 7:\n                    // (, line 82\n                    // literal, line 82\n                    if (!(eq_s_b(1, \"u\")))\n                    {\n                        return false;\n                    }\n                    // delete, line 82\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"]},"commit2Childs":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}