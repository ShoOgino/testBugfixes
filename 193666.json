{"path":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","pathOld":"/dev/null","sourceNew":"  private static void message(String message) {\n    if (infoStream != null) {\n      infoStream.println(Thread.currentThread().getName() + \": \" + message);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","sourceNew":"  private static void message(String message) {\n    if (infoStream != null) {\n      infoStream.println(\"SIS [\" + Thread.currentThread().getName() + \"]: \" + message);\n    }\n  }\n\n","sourceOld":"  private static void message(String message) {\n    if (infoStream != null) {\n      infoStream.println(Thread.currentThread().getName() + \": \" + message);\n    }\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8a2ba2f29c523b1ce4db7c3491d01615d912b15","date":1267376414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","sourceNew":"  /**\n   * Prints the given message to the infoStream. Note, this method does not\n   * check for null infoStream. It assumes this check has been performed by the\n   * caller, which is recommended to avoid the (usually) expensive message\n   * creation.\n   */\n  private static void message(String message) {\n    infoStream.println(\"SIS [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  private static void message(String message) {\n    if (infoStream != null) {\n      infoStream.println(\"SIS [\" + Thread.currentThread().getName() + \"]: \" + message);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#message(String).mjava","sourceNew":"  /**\n   * Prints the given message to the infoStream. Note, this method does not\n   * check for null infoStream. It assumes this check has been performed by the\n   * caller, which is recommended to avoid the (usually) expensive message\n   * creation.\n   */\n  private static void message(String message) {\n    infoStream.println(\"SIS [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  /**\n   * Prints the given message to the infoStream. Note, this method does not\n   * check for null infoStream. It assumes this check has been performed by the\n   * caller, which is recommended to avoid the (usually) expensive message\n   * creation.\n   */\n  private static void message(String message) {\n    infoStream.println(\"SIS [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8a2ba2f29c523b1ce4db7c3491d01615d912b15":["67006a60923e2124212d3baa0d29b444bcbd8373"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67006a60923e2124212d3baa0d29b444bcbd8373":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8a2ba2f29c523b1ce4db7c3491d01615d912b15"]},"commit2Childs":{"d8a2ba2f29c523b1ce4db7c3491d01615d912b15":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["67006a60923e2124212d3baa0d29b444bcbd8373"],"67006a60923e2124212d3baa0d29b444bcbd8373":["d8a2ba2f29c523b1ce4db7c3491d01615d912b15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}