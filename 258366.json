{"path":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c996b769d988552a15ae14a911b94a2d4c534b08","date":1428592217,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n\n    ramBytesUsed = BASE_RAM_BYTES_USED + RamUsageEstimator.sizeOf(table);\n  }\n\n","sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee9dd8b366ecd2954493d63ef9b4bdc78c57608c","date":1428598336,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n\n    ramBytesUsed = BASE_RAM_BYTES_USED + RamUsageEstimator.sizeOf(table);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/HashDocSet#HashDocSet(int[],int,int,float).mjava","sourceNew":null,"sourceOld":"  /** Create a HashDocSet from a list of *unique* ids */  \n  public HashDocSet(int[] docs, int offset, int len, float inverseLoadFactor) {\n    int tsize = Math.max(BitUtil.nextHighestPowerOfTwo(len), 1);\n    if (tsize < len * inverseLoadFactor) {\n      tsize <<= 1;\n    }\n\n    mask=tsize-1;\n\n    table = new int[tsize];\n    // (for now) better then: Arrays.fill(table, EMPTY);\n    // https://issues.apache.org/jira/browse/SOLR-390\n    for (int i=tsize-1; i>=0; i--) table[i]=EMPTY;\n\n    int end = offset + len;\n    for (int i=offset; i<end; i++) {\n      put(docs[i]);\n    }\n\n    size = len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["ee9dd8b366ecd2954493d63ef9b4bdc78c57608c"],"c996b769d988552a15ae14a911b94a2d4c534b08":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"ee9dd8b366ecd2954493d63ef9b4bdc78c57608c":["c996b769d988552a15ae14a911b94a2d4c534b08"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c996b769d988552a15ae14a911b94a2d4c534b08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c996b769d988552a15ae14a911b94a2d4c534b08":["ee9dd8b366ecd2954493d63ef9b4bdc78c57608c"],"ee9dd8b366ecd2954493d63ef9b4bdc78c57608c":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}