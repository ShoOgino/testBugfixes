{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/Among#Among(String,int,int,String,MethodHandles.Lookup).mjava","commits":[{"id":"770e1c49d8dece84946f0ced1abe4409f451bc41","date":1439734957,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/Among#Among(String,int,int,String,MethodHandles.Lookup).mjava","pathOld":"/dev/null","sourceNew":"  public Among(String s, int substring_i, int result,\n               String methodname, MethodHandles.Lookup methodobject) {\n    this.s_size = s.length();\n    this.s = s.toCharArray();\n    this.substring_i = substring_i;\n    this.result = result;\n    if (methodname.isEmpty()) {\n      this.method = null;\n    } else {\n      final Class<? extends SnowballProgram> clazz = methodobject.lookupClass().asSubclass(SnowballProgram.class);\n      try {\n        this.method = methodobject.findVirtual(clazz, methodname, MethodType.methodType(boolean.class))\n            .asType(MethodType.methodType(boolean.class, SnowballProgram.class));\n      } catch (NoSuchMethodException | IllegalAccessException e) {\n        throw new RuntimeException(String.format(Locale.ENGLISH,\n            \"Snowball program '%s' is broken, cannot access method: boolean %s()\",\n            clazz.getSimpleName(), methodname\n        ), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/Among#Among(String,int,int,String,MethodHandles.Lookup).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/Among#Among(String,int,int,String,MethodHandles.Lookup).mjava","sourceNew":"  public Among (String s, int substring_i, int result, String methodname,\n          MethodHandles.Lookup methodobject) {\n    this.s = s.toCharArray();\n    this.substring_i = substring_i;\n    this.result = result;\n    final Class<? extends SnowballProgram> clazz = methodobject.lookupClass().asSubclass(SnowballProgram.class);\n    if (methodname.length() > 0) {\n      try {\n        this.method = methodobject.findVirtual(clazz, methodname, MethodType.methodType(boolean.class))\n          .asType(MethodType.methodType(boolean.class, SnowballProgram.class));\n      } catch (NoSuchMethodException | IllegalAccessException e) {\n        throw new RuntimeException(String.format(Locale.ENGLISH,\n          \"Snowball program '%s' is broken, cannot access method: boolean %s()\",\n          clazz.getSimpleName(), methodname\n        ), e);\n      }\n    } else {\n      this.method = null;\n    }\n  }\n\n","sourceOld":"  public Among(String s, int substring_i, int result,\n               String methodname, MethodHandles.Lookup methodobject) {\n    this.s_size = s.length();\n    this.s = s.toCharArray();\n    this.substring_i = substring_i;\n    this.result = result;\n    if (methodname.isEmpty()) {\n      this.method = null;\n    } else {\n      final Class<? extends SnowballProgram> clazz = methodobject.lookupClass().asSubclass(SnowballProgram.class);\n      try {\n        this.method = methodobject.findVirtual(clazz, methodname, MethodType.methodType(boolean.class))\n            .asType(MethodType.methodType(boolean.class, SnowballProgram.class));\n      } catch (NoSuchMethodException | IllegalAccessException e) {\n        throw new RuntimeException(String.format(Locale.ENGLISH,\n            \"Snowball program '%s' is broken, cannot access method: boolean %s()\",\n            clazz.getSimpleName(), methodname\n        ), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770e1c49d8dece84946f0ced1abe4409f451bc41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["770e1c49d8dece84946f0ced1abe4409f451bc41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"770e1c49d8dece84946f0ced1abe4409f451bc41":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770e1c49d8dece84946f0ced1abe4409f451bc41"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}