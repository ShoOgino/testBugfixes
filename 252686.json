{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9be242e584b2f40a71c1736de4cbdb36bcf08a5","date":1335144174,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(CategoryPath, int)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b52ea8b7f80d4a0600efc9765dc896387008ebd4","date":1340109038,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(CategoryPath, int)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["ade9d7ae1b1bd9a5106326063f9407397e7168cc","ade9d7ae1b1bd9a5106326063f9407397e7168cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}