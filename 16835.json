{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0a9f776f230888561498119e8a3c2d903a7b4a","date":1413920964,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene84/TestLucene84PostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.getStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["2a1862266772deb28cdcb7d996b64d2177022687"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de0a9f776f230888561498119e8a3c2d903a7b4a"],"de0a9f776f230888561498119e8a3c2d903a7b4a":["99eb4a732d1a908f4636ace52928876136bf1896"],"28288370235ed02234a64753cdbf0c6ec096304a":["2a1862266772deb28cdcb7d996b64d2177022687","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2a1862266772deb28cdcb7d996b64d2177022687","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["de0a9f776f230888561498119e8a3c2d903a7b4a"],"2a1862266772deb28cdcb7d996b64d2177022687":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2a1862266772deb28cdcb7d996b64d2177022687"],"de0a9f776f230888561498119e8a3c2d903a7b4a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"28288370235ed02234a64753cdbf0c6ec096304a":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}