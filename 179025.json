{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}