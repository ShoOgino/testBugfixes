{"path":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","commits":[{"id":"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b","date":1196102739,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    Hits hits = searcher.search(query, sort);\n    for (int i = 0; i < hits.length(); i++) {\n      Document document = hits.doc(i);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    Hits hits = searcher.search(query, sort);\n    for (int i = 0; i < hits.length(); i++) {\n      Document document = hits.doc(i);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // Create a Sort object.  reverse is set to true.\n    // problem occurs only with SortField.AUTO:\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.AUTO, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}