{"path":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiBits.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}