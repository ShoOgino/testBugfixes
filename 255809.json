{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","commits":[{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextBoxNear(holes[random().nextInt(holes.length)]);\n    }\n    \n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = random().nextInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextBoxNear(holes[random().nextInt(holes.length)]);\n    }\n    \n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = random().nextInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","sourceNew":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextBoxNear(holes[randomInt(holes.length)]);\n    }\n    \n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = randomInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextBoxNear(holes[random().nextInt(holes.length)]);\n    }\n    \n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = random().nextInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxNear(Polygon).mjava","sourceNew":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextBoxNear(holes[random().nextInt(holes.length)]);\n    }\n    \n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = random().nextInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":"  /** Returns next box for testing near a Polygon */\n  public static Rectangle nextBoxNear(Polygon polygon) {\n    final double point1[];\n    final double point2[];\n    \n    // if there are any holes, target them aggressively\n    Polygon holes[] = polygon.getHoles();\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextBoxNear(holes[randomInt(holes.length)]);\n    }\n    \n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // formed from two interesting points\n      point1 = nextPointNear(polygon);\n      point2 = nextPointNear(polygon);\n    } else {\n      // formed from one interesting point: then random within delta.\n      point1 = nextPointNear(polygon);\n      point2 = new double[2];\n      // now figure out a good delta: we use a rough heuristic, up to the length of an edge\n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      int vertex = randomInt(polyLats.length - 1);\n      double deltaX = polyLons[vertex+1] - polyLons[vertex];\n      double deltaY = polyLats[vertex+1] - polyLats[vertex];\n      double edgeLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      point2[0] = nextLatitudeNear(point1[0], edgeLength);\n      point2[1] = nextLongitudeNear(point1[1], edgeLength);\n    }\n    \n    // form a box from the two points\n    double minLat = Math.min(point1[0], point2[0]);\n    double maxLat = Math.max(point1[0], point2[0]);\n    double minLon = Math.min(point1[1], point2[1]);\n    double maxLon = Math.max(point1[1], point2[1]);\n    return new Rectangle(minLat, maxLat, minLon, maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["713122036535651642e6d4fe57ce12b449e18473"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}