{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createGlobalACLsToAdd().mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createGlobalACLsToAdd().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected List<ACL> createGlobalACLsToAdd() {\n    try {\n      List<ACL> result = new ArrayList<ACL>();\n  \n      // Not to have to provide too much credentials and ACL information to the process it is assumed that you want \"ALL\"-acls\n      // added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)\n      String digestAllUsername = System.getProperty(zkDigestAllUsernameVMParamName);\n      String digestAllPassword = System.getProperty(zkDigestAllPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {\n        result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestAllUsername + \":\" + digestAllPassword))));\n      }\n  \n      // Besides that support for adding additional \"READONLY\"-acls for another user\n      String digestReadonlyUsername = System.getProperty(zkDigestReadonlyUsernameVMParamName);\n      String digestReadonlyPassword = System.getProperty(zkDigestReadonlyPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n        result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n      }\n      \n      if (result.isEmpty()) {\n        result = super.createGlobalACLsToAdd();\n      }\n      \n      return result;\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createACLsToAdd(boolean,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createGlobalACLsToAdd().mjava","sourceNew":"  @VisibleForTesting\n  protected List<ACL> createACLsToAdd(boolean includeReadOnly,\n                                      String digestAllUsername, String digestAllPassword,\n                                      String digestReadonlyUsername, String digestReadonlyPassword) {\n\n      try {\n      List<ACL> result = new ArrayList<ACL>();\n  \n      // Not to have to provide too much credentials and ACL information to the process it is assumed that you want \"ALL\"-acls\n      // added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)\n      if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {\n        result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestAllUsername + \":\" + digestAllPassword))));\n      }\n\n      if (includeReadOnly) {\n        // Besides that support for adding additional \"READONLY\"-acls for another user\n        if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n        }\n      }\n      \n      if (result.isEmpty()) {\n        result = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n      }\n      \n      return result;\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected List<ACL> createGlobalACLsToAdd() {\n    try {\n      List<ACL> result = new ArrayList<ACL>();\n  \n      // Not to have to provide too much credentials and ACL information to the process it is assumed that you want \"ALL\"-acls\n      // added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)\n      String digestAllUsername = System.getProperty(zkDigestAllUsernameVMParamName);\n      String digestAllPassword = System.getProperty(zkDigestAllPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {\n        result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestAllUsername + \":\" + digestAllPassword))));\n      }\n  \n      // Besides that support for adding additional \"READONLY\"-acls for another user\n      String digestReadonlyUsername = System.getProperty(zkDigestReadonlyUsernameVMParamName);\n      String digestReadonlyPassword = System.getProperty(zkDigestReadonlyPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n        result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n      }\n      \n      if (result.isEmpty()) {\n        result = super.createGlobalACLsToAdd();\n      }\n      \n      return result;\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createGlobalACLsToAdd().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected List<ACL> createGlobalACLsToAdd() {\n    try {\n      List<ACL> result = new ArrayList<ACL>();\n  \n      // Not to have to provide too much credentials and ACL information to the process it is assumed that you want \"ALL\"-acls\n      // added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)\n      String digestAllUsername = System.getProperty(zkDigestAllUsernameVMParamName);\n      String digestAllPassword = System.getProperty(zkDigestAllPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {\n        result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestAllUsername + \":\" + digestAllPassword))));\n      }\n  \n      // Besides that support for adding additional \"READONLY\"-acls for another user\n      String digestReadonlyUsername = System.getProperty(zkDigestReadonlyUsernameVMParamName);\n      String digestReadonlyPassword = System.getProperty(zkDigestReadonlyPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n        result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n      }\n      \n      if (result.isEmpty()) {\n        result = super.createGlobalACLsToAdd();\n      }\n      \n      return result;\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/VMParamsAllAndReadonlyDigestZkACLProvider#createGlobalACLsToAdd().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected List<ACL> createGlobalACLsToAdd() {\n    try {\n      List<ACL> result = new ArrayList<ACL>();\n  \n      // Not to have to provide too much credentials and ACL information to the process it is assumed that you want \"ALL\"-acls\n      // added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)\n      String digestAllUsername = System.getProperty(zkDigestAllUsernameVMParamName);\n      String digestAllPassword = System.getProperty(zkDigestAllPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {\n        result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestAllUsername + \":\" + digestAllPassword))));\n      }\n  \n      // Besides that support for adding additional \"READONLY\"-acls for another user\n      String digestReadonlyUsername = System.getProperty(zkDigestReadonlyUsernameVMParamName);\n      String digestReadonlyPassword = System.getProperty(zkDigestReadonlyPasswordVMParamName);\n      if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n        result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n      }\n      \n      if (result.isEmpty()) {\n        result = super.createGlobalACLsToAdd();\n      }\n      \n      return result;\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20be168d828ac40d262f85364d02f15b491dd88b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"20be168d828ac40d262f85364d02f15b491dd88b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c83f985d9828d30801541f1eed26aa3169646baf":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}