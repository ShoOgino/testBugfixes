{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException {\n    throw new UnsupportedOperationException(\"this FacetRequest does not support this type of Aggregator anymore; \" +\n        \"you should override FacetsAccumulator to return the proper FacetsAggregator\");\n  }\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException {\n    throw new UnsupportedOperationException(\"this FacetRequest does not support this type of Aggregator anymore; \" +\n        \"you should override FacetsAccumulator to return the proper FacetsAggregator\");\n  }\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException {\n    throw new UnsupportedOperationException(\"this FacetRequest does not support this type of Aggregator anymore; \" +\n        \"you should override FacetsAccumulator to return the proper FacetsAggregator\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException {\n    throw new UnsupportedOperationException(\"this FacetRequest does not support this type of Aggregator anymore; \" +\n        \"you should override FacetsAccumulator to return the proper FacetsAggregator\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["607428da722dcb3e86bbd11c63de8986e6275c36","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"607428da722dcb3e86bbd11c63de8986e6275c36":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}