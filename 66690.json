{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if(pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (requireName) {\n        pluginInfo.pathInConfig = Arrays.asList(tag, pluginInfo.name);\n      }\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (requireName) {\n        pluginInfo.pathInConfig = Arrays.asList(tag, pluginInfo.name);\n      }\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#readPluginInfos(String,boolean,boolean).mjava","sourceNew":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<PluginInfo> readPluginInfos(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n      if (requireName) {\n        pluginInfo.pathInConfig = Arrays.asList(tag, pluginInfo.name);\n      }\n      if (pluginInfo.isEnabled()) result.add(pluginInfo);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}