{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigDir(configDir, configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDelete().mjava","sourceNew":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final String configSet = \"testDelete\";\n    zkConfigManager.uploadConfigDir(configset(\"configset-2\"), configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDelete() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final String configSet = \"configSet\";\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertTrue(configManager.configExists(configSet));\n\n      Delete delete = new Delete();\n      delete.setConfigSetName(configSet);\n      ConfigSetAdminResponse response = delete.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertFalse(configManager.configExists(configSet));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["c7612891097d4751617c396cdd7a092833799147","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}