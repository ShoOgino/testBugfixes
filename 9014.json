{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    this.metricManager = manager;\n    this.registryName = registryName;\n    // Metrics\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope, className);\n    numLost = manager.meter(this, registryName, \"lost\", getCategory().toString(), scope, className);\n    numLogged = manager.meter(this, registryName, \"count\", getCategory().toString(), scope, className);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      manager.registerGauge(this, registryName, () -> blockingQueueSize, \"queueCapacity\", true, \"queueCapacity\", getCategory().toString(), scope, className);\n      manager.registerGauge(this, registryName, () -> blockingQueueSize - queue.remainingCapacity(), \"queueSize\", true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = manager.timer(this, registryName, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    manager.registerGauge(this, registryName, () -> async, \"async\", true, \"async\", getCategory().toString(), scope, className);\n    metricNames.addAll(Arrays.asList(\"errors\", \"logged\", \"requestTimes\", \"totalTime\", \"queueCapacity\", \"queueSize\", \"async\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb84bc9b527d348a4d5b6abb028ab8aae43e62ac","date":1566566638,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    this.metricManager = manager;\n    this.registryName = registryName;\n    // Metrics\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope, className);\n    numLost = manager.meter(this, registryName, \"lost\", getCategory().toString(), scope, className);\n    numLogged = manager.meter(this, registryName, \"count\", getCategory().toString(), scope, className);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      manager.registerGauge(this, registryName, () -> blockingQueueSize, \"queueCapacity\", true, \"queueCapacity\", getCategory().toString(), scope, className);\n      manager.registerGauge(this, registryName, () -> blockingQueueSize - queue.remainingCapacity(), \"queueSize\", true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = manager.timer(this, registryName, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    manager.registerGauge(this, registryName, () -> async, \"async\", true, \"async\", getCategory().toString(), scope, className);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    this.metricManager = manager;\n    this.registryName = registryName;\n    // Metrics\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope, className);\n    numLost = manager.meter(this, registryName, \"lost\", getCategory().toString(), scope, className);\n    numLogged = manager.meter(this, registryName, \"count\", getCategory().toString(), scope, className);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      manager.registerGauge(this, registryName, () -> blockingQueueSize, \"queueCapacity\", true, \"queueCapacity\", getCategory().toString(), scope, className);\n      manager.registerGauge(this, registryName, () -> blockingQueueSize - queue.remainingCapacity(), \"queueSize\", true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = manager.timer(this, registryName, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    manager.registerGauge(this, registryName, () -> async, \"async\", true, \"async\", getCategory().toString(), scope, className);\n    metricNames.addAll(Arrays.asList(\"errors\", \"logged\", \"requestTimes\", \"totalTime\", \"queueCapacity\", \"queueSize\", \"async\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    this.metricManager = manager;\n    this.registryName = registryName;\n    // Metrics\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope, className);\n    numLost = manager.meter(this, registryName, \"lost\", getCategory().toString(), scope, className);\n    numLogged = manager.meter(this, registryName, \"count\", getCategory().toString(), scope, className);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      manager.registerGauge(this, registryName, () -> blockingQueueSize, \"queueCapacity\", true, \"queueCapacity\", getCategory().toString(), scope, className);\n      manager.registerGauge(this, registryName, () -> blockingQueueSize - queue.remainingCapacity(), \"queueSize\", true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = manager.timer(this, registryName, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    manager.registerGauge(this, registryName, () -> async, \"async\", true, \"async\", getCategory().toString(), scope, className);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["bb84bc9b527d348a4d5b6abb028ab8aae43e62ac"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb84bc9b527d348a4d5b6abb028ab8aae43e62ac":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["bb84bc9b527d348a4d5b6abb028ab8aae43e62ac"],"bb84bc9b527d348a4d5b6abb028ab8aae43e62ac":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}