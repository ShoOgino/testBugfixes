{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#isDerivedFromDoc(SolrInputDocument,SolrInputDocument).mjava","commits":[{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#isDerivedFromDoc(SolrInputDocument,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param fullDoc the full doc to  be compared against\n   * @param partialDoc the sub document to be tested\n   * @return whether partialDoc is derived from fullDoc\n   */\n  public static boolean isDerivedFromDoc(SolrInputDocument fullDoc, SolrInputDocument partialDoc) {\n    for(SolrInputField subSif: partialDoc) {\n      Collection<Object> fieldValues = fullDoc.getFieldValues(subSif.getName());\n      if (fieldValues == null) return false;\n      if (fieldValues.size() < subSif.getValueCount()) return false;\n      Collection<Object> partialFieldValues = subSif.getValues();\n      // filter all derived child docs from partial field values since they fail List#containsAll check (uses SolrInputDocument#equals which fails).\n      // If a child doc exists in partialDoc but not in full doc, it will not be filtered, and therefore List#containsAll will return false\n      Stream<Object> nonChildDocElements = partialFieldValues.stream().filter(x -> !(isChildDoc(x) &&\n          (fieldValues.stream().anyMatch(y ->\n              (isChildDoc(x) &&\n                  isDerivedFromDoc((SolrInputDocument) y, (SolrInputDocument) x)\n              )\n          )\n          )));\n      if (!nonChildDocElements.allMatch(fieldValues::contains)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}