{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.SolrDocumentListIterator#doQuery().mjava","commits":[{"id":"d631465f88a03f4c835b8afad23d09615067b978","date":1483120253,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.SolrDocumentListIterator#doQuery().mjava","pathOld":"/dev/null","sourceNew":"    protected QueryResponse doQuery() {\n      SolrEntityProcessor.this.queryString = context.getResolvedEntityAttribute(QUERY);\n      if (SolrEntityProcessor.this.queryString == null) {\n        throw new DataImportHandlerException(\n            DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'query' is required\"\n        );\n      }\n\n      String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n      if (rowsP != null) {\n        rows = Integer.parseInt(rowsP);\n      }\n\n      String sortParam = context.getResolvedEntityAttribute(CommonParams.SORT);\n      \n      String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n      if (fqAsString != null) {\n        SolrEntityProcessor.this.filterQueries = fqAsString.split(\",\");\n      }\n\n      String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n      if (fieldsAsString != null) {\n        SolrEntityProcessor.this.fields = fieldsAsString.split(\",\");\n      }\n      SolrEntityProcessor.this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n     \n\n      SolrQuery solrQuery = new SolrQuery(queryString);\n      solrQuery.setRows(rows);\n      \n      if (sortParam!=null) {\n        solrQuery.setParam(CommonParams.SORT, sortParam);\n      }\n      \n      passNextPage(solrQuery);\n      \n      if (fields != null) {\n        for (String field : fields) {\n          solrQuery.addField(field);\n        }\n      }\n      solrQuery.setRequestHandler(requestHandler);\n      solrQuery.setFilterQueries(filterQueries);\n      \n      \n      QueryResponse response = null;\n      try {\n        response = solrClient.query(solrQuery);\n      } catch (SolrServerException | IOException | SolrException e) {\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n        }\n      }\n      \n      if (response != null) {\n        SolrEntityProcessor.this.rowIterator = createNextPageIterator(response);\n      }\n      return response;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.SolrDocumentListIterator#doQuery().mjava","pathOld":"/dev/null","sourceNew":"    protected QueryResponse doQuery() {\n      SolrEntityProcessor.this.queryString = context.getResolvedEntityAttribute(QUERY);\n      if (SolrEntityProcessor.this.queryString == null) {\n        throw new DataImportHandlerException(\n            DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'query' is required\"\n        );\n      }\n\n      String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n      if (rowsP != null) {\n        rows = Integer.parseInt(rowsP);\n      }\n\n      String sortParam = context.getResolvedEntityAttribute(CommonParams.SORT);\n      \n      String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n      if (fqAsString != null) {\n        SolrEntityProcessor.this.filterQueries = fqAsString.split(\",\");\n      }\n\n      String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n      if (fieldsAsString != null) {\n        SolrEntityProcessor.this.fields = fieldsAsString.split(\",\");\n      }\n      SolrEntityProcessor.this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n     \n\n      SolrQuery solrQuery = new SolrQuery(queryString);\n      solrQuery.setRows(rows);\n      \n      if (sortParam!=null) {\n        solrQuery.setParam(CommonParams.SORT, sortParam);\n      }\n      \n      passNextPage(solrQuery);\n      \n      if (fields != null) {\n        for (String field : fields) {\n          solrQuery.addField(field);\n        }\n      }\n      solrQuery.setRequestHandler(requestHandler);\n      solrQuery.setFilterQueries(filterQueries);\n      \n      \n      QueryResponse response = null;\n      try {\n        response = solrClient.query(solrQuery);\n      } catch (SolrServerException | IOException | SolrException e) {\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n        }\n      }\n      \n      if (response != null) {\n        SolrEntityProcessor.this.rowIterator = createNextPageIterator(response);\n      }\n      return response;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.SolrDocumentListIterator#doQuery().mjava","sourceNew":null,"sourceOld":"    protected QueryResponse doQuery() {\n      SolrEntityProcessor.this.queryString = context.getResolvedEntityAttribute(QUERY);\n      if (SolrEntityProcessor.this.queryString == null) {\n        throw new DataImportHandlerException(\n            DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'query' is required\"\n        );\n      }\n\n      String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n      if (rowsP != null) {\n        rows = Integer.parseInt(rowsP);\n      }\n\n      String sortParam = context.getResolvedEntityAttribute(CommonParams.SORT);\n      \n      String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n      if (fqAsString != null) {\n        SolrEntityProcessor.this.filterQueries = fqAsString.split(\",\");\n      }\n\n      String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n      if (fieldsAsString != null) {\n        SolrEntityProcessor.this.fields = fieldsAsString.split(\",\");\n      }\n      SolrEntityProcessor.this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n     \n\n      SolrQuery solrQuery = new SolrQuery(queryString);\n      solrQuery.setRows(rows);\n      \n      if (sortParam!=null) {\n        solrQuery.setParam(CommonParams.SORT, sortParam);\n      }\n      \n      passNextPage(solrQuery);\n      \n      if (fields != null) {\n        for (String field : fields) {\n          solrQuery.addField(field);\n        }\n      }\n      solrQuery.setRequestHandler(requestHandler);\n      solrQuery.setFilterQueries(filterQueries);\n      \n      \n      QueryResponse response = null;\n      try {\n        response = solrClient.query(solrQuery);\n      } catch (SolrServerException | IOException | SolrException e) {\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n        }\n      }\n      \n      if (response != null) {\n        SolrEntityProcessor.this.rowIterator = createNextPageIterator(response);\n      }\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d631465f88a03f4c835b8afad23d09615067b978"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d631465f88a03f4c835b8afad23d09615067b978":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d631465f88a03f4c835b8afad23d09615067b978"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d631465f88a03f4c835b8afad23d09615067b978","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d631465f88a03f4c835b8afad23d09615067b978":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}