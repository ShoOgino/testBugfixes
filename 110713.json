{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"/dev/null","sourceNew":"  public Comparator<Tuple> constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      Comparator[] comps = new Comparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultiComp(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (Comparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public Comparator<Tuple> constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      Comparator[] comps = new Comparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultiComp(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (Comparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else if(null == order){ \n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else if(null == order){ \n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else if(null == order){ \n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        // skip empty\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        // assign each in order\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        // skip empty\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        // assign each in order\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructComparator(String,Class).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public StreamComparator constructComparator(String comparatorString, @SuppressWarnings({\"rawtypes\"})Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        // skip empty\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        // assign each in order\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","sourceOld":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      // expected format is \"left=right order\"\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        // skip empty\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        // assign each in order\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; // we're done, stop looping\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      // expected format is \"field order\"\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["333d804f5abfaf34c57493306a4cb2e01e55662d","c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["804a8d5358fe7b7563b85ee7838714d720b89272","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}