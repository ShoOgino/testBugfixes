{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","4708e7bf7695781d702d204d178627b4faddc03f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    fstCompiler.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    fstCompiler.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    fstCompiler.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    fstCompiler.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    fstCompiler.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    fstCompiler.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    fstCompiler.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    fstCompiler.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    fstCompiler.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    @SuppressWarnings(\"deprecation\") IntsRef byOutput = Util.getByOutput(fst, 13824324872317238L);\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()), byOutput);\n\n    @SuppressWarnings(\"deprecation\") IntsRef byOutput47 = Util.getByOutput(fst, 47);\n    assertNull(byOutput47);\n\n    @SuppressWarnings(\"deprecation\") IntsRef byOutput42 = Util.getByOutput(fst, 42);\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()), byOutput42);\n\n    @SuppressWarnings(\"deprecation\") IntsRef byOutput17 = Util.getByOutput(fst, 17);\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()), byOutput17);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n\n    // Build an FST mapping BytesRef -> Long\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    fstCompiler.add(Util.toIntsRef(a, new IntsRefBuilder()), 17L);\n    fstCompiler.add(Util.toIntsRef(b, new IntsRefBuilder()), 42L);\n    fstCompiler.add(Util.toIntsRef(c, new IntsRefBuilder()), 13824324872317238L);\n\n    final FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRefBuilder()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}