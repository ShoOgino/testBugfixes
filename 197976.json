{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","sourceNew":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            lastSubFP = fp - suffixesReader.readVLong();\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","sourceOld":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            lastSubFP = fp - suffixesReader.readVLong();\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78af7fa73409a006058caf79d3e4e0d719dcd124","date":1336172971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","sourceNew":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            subCode = 0;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            subCode = suffixesReader.readVLong();\n            lastSubFP = fp - subCode;\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","sourceOld":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            lastSubFP = fp - suffixesReader.readVLong();\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","sourceNew":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            subCode = 0;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            subCode = suffixesReader.readVLong();\n            lastSubFP = fp - subCode;\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","sourceOld":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            subCode = 0;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            subCode = suffixesReader.readVLong();\n            lastSubFP = fp - subCode;\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#nextNonLeaf().mjava","sourceNew":null,"sourceOld":"        public boolean nextNonLeaf() {\n          //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n          assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n          nextEnt++;\n          final int code = suffixesReader.readVInt();\n          suffix = code >>> 1;\n          startBytePos = suffixesReader.getPosition();\n          term.length = prefix + suffix;\n          if (term.bytes.length < term.length) {\n            term.grow(term.length);\n          }\n          suffixesReader.readBytes(term.bytes, prefix, suffix);\n          if ((code & 1) == 0) {\n            // A normal term\n            termExists = true;\n            subCode = 0;\n            state.termBlockOrd++;\n            return false;\n          } else {\n            // A sub-block; make sub-FP absolute:\n            termExists = false;\n            subCode = suffixesReader.readVLong();\n            lastSubFP = fp - subCode;\n            //if (DEBUG) {\n            //System.out.println(\"    lastSubFP=\" + lastSubFP);\n            //}\n            return true;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["78af7fa73409a006058caf79d3e4e0d719dcd124","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["78af7fa73409a006058caf79d3e4e0d719dcd124"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78af7fa73409a006058caf79d3e4e0d719dcd124":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["78af7fa73409a006058caf79d3e4e0d719dcd124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"78af7fa73409a006058caf79d3e4e0d719dcd124":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}