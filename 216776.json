{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[Document]).mjava","commits":[{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[Document]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<Document> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[Document]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<Document> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[Document]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<Document> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[Document]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<Document> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}