{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","commits":[{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = LatLonPoint.decodeLatitude(latitude);\n    double docLongitude = LatLonPoint.decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = LatLonPoint.decodeLatitude(latitude);\n    double docLongitude = LatLonPoint.decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = LatLonPoint.decodeLatitude(latitude);\n    double docLongitude = LatLonPoint.decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = LatLonPoint.decodeLatitude(latitude);\n    double docLongitude = LatLonPoint.decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return LatLonTree.contains(tree, docLatitude, docLongitude);\n  }\n\n","sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return LatLonTree.contains(tree, docLatitude, docLongitude);\n  }\n\n","sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return Polygon.contains(polygons, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return LatLonTree.contains(tree, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#contains(int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns true if inside one of our polygons, false otherwise */\n  boolean contains(int latitude, int longitude) {\n    // first see if the grid knows the answer\n    int index = index(latitude, longitude);\n    if (index == -1) {\n      return false; // outside of bounding box range\n    } else if (haveAnswer.get(index)) {\n      return answer.get(index);\n    }\n\n    // the grid is unsure (boundary): do a real test.\n    double docLatitude = decodeLatitude(latitude);\n    double docLongitude = decodeLongitude(longitude);\n    return LatLonTree.contains(tree, docLatitude, docLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82235a501cff963da53cb98d86009e33e15cf47f"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["09f15823cf5eb6e807005579e875e117d8598f95","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","925fce43f3bac029d912b9b7de03c789e258a333"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["82235a501cff963da53cb98d86009e33e15cf47f"],"034996547ca41c5004216fdd0178acbf06438da2":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"09f15823cf5eb6e807005579e875e117d8598f95":["82235a501cff963da53cb98d86009e33e15cf47f","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"],"925fce43f3bac029d912b9b7de03c789e258a333":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}