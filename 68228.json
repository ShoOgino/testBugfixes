{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","pathOld":"/dev/null","sourceNew":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  public boolean isNewFragment(Token token) {\r\n    position += token.getPositionIncrement();\r\n\r\n    if (waitForPos == position) {\r\n      waitForPos = -1;\r\n    } else if (waitForPos != -1) {\r\n      return false;\r\n    }\r\n\r\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(new String(token.termBuffer(), 0, token.termLength()));\r\n\r\n    if (wSpanTerm != null) {\r\n      List positionSpans = wSpanTerm.getPositionSpans();\r\n\r\n      for (int i = 0; i < positionSpans.size(); i++) {\r\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\r\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\r\n\r\n    if (isNewFrag) {\r\n      currentNumFrags++;\r\n    }\r\n\r\n    return isNewFrag;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  public boolean isNewFragment(Token token) {\r\n    position += token.getPositionIncrement();\r\n\r\n    if (waitForPos == position) {\r\n      waitForPos = -1;\r\n    } else if (waitForPos != -1) {\r\n      return false;\r\n    }\r\n\r\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\r\n\r\n    if (wSpanTerm != null) {\r\n      List positionSpans = wSpanTerm.getPositionSpans();\r\n\r\n      for (int i = 0; i < positionSpans.size(); i++) {\r\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\r\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\r\n\r\n    if (isNewFrag) {\r\n      currentNumFrags++;\r\n    }\r\n\r\n    return isNewFrag;\r\n  }\r\n\n","sourceOld":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  public boolean isNewFragment(Token token) {\r\n    position += token.getPositionIncrement();\r\n\r\n    if (waitForPos == position) {\r\n      waitForPos = -1;\r\n    } else if (waitForPos != -1) {\r\n      return false;\r\n    }\r\n\r\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(new String(token.termBuffer(), 0, token.termLength()));\r\n\r\n    if (wSpanTerm != null) {\r\n      List positionSpans = wSpanTerm.getPositionSpans();\r\n\r\n      for (int i = 0; i < positionSpans.size(); i++) {\r\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\r\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\r\n\r\n    if (isNewFrag) {\r\n      currentNumFrags++;\r\n    }\r\n\r\n    return isNewFrag;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token) {\n    position += token.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n\n          return true;\n        }\n      }\n    }\n\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\n\n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  public boolean isNewFragment(Token token) {\r\n    position += token.getPositionIncrement();\r\n\r\n    if (waitForPos == position) {\r\n      waitForPos = -1;\r\n    } else if (waitForPos != -1) {\r\n      return false;\r\n    }\r\n\r\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\r\n\r\n    if (wSpanTerm != null) {\r\n      List positionSpans = wSpanTerm.getPositionSpans();\r\n\r\n      for (int i = 0; i < positionSpans.size(); i++) {\r\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\r\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\r\n\r\n    if (isNewFrag) {\r\n      currentNumFrags++;\r\n    }\r\n\r\n    return isNewFrag;\r\n  }\r\n\n","bugFix":null,"bugIntro":["023adf1fcf97d9ed3f15d57669a8e116623d28bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"023adf1fcf97d9ed3f15d57669a8e116623d28bb","date":1226534503,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token) {\n    position += token.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - token.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token) {\n    position += token.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n\n          return true;\n        }\n      }\n    }\n\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);\n\n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token) {\n    position += token.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - token.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["296b8b38a87feb478921f77834a2302dfe77641c"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["023adf1fcf97d9ed3f15d57669a8e116623d28bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"023adf1fcf97d9ed3f15d57669a8e116623d28bb":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["023adf1fcf97d9ed3f15d57669a8e116623d28bb"],"023adf1fcf97d9ed3f15d57669a8e116623d28bb":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"296b8b38a87feb478921f77834a2302dfe77641c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}