{"path":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            return values.lookupOrd(nextOrd++);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            return values.lookupOrd(nextOrd++);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","sourceNew":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            try {\n              return values.lookupOrd(nextOrd++);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            return values.lookupOrd(nextOrd++);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            try {\n              return values.lookupOrd(nextOrd++);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701377879d61cf6e2de072d11c76089338c0c3b2","date":1542374674,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#valuesIterable(SortedDocValues).mjava","sourceNew":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            try {\n              return values.lookupOrd(nextOrd++);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<BytesRef> valuesIterable(final SortedDocValues values) {\n    return new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new Iterator<BytesRef>() {\n          private int nextOrd;\n    \n          @Override\n          public boolean hasNext() {\n            return nextOrd < values.getValueCount();\n          }\n\n          @Override\n          public BytesRef next() {\n            try {\n              return values.lookupOrd(nextOrd++);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"701377879d61cf6e2de072d11c76089338c0c3b2":["f7558b5077dd4abd457be151475f13b541f4f13e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["701377879d61cf6e2de072d11c76089338c0c3b2"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["701377879d61cf6e2de072d11c76089338c0c3b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"701377879d61cf6e2de072d11c76089338c0c3b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}