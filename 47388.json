{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > blockSize) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > blockSize) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["0e3359210474c12c0b79e6400450313e3d7ef2bb"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}