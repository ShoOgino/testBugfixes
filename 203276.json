{"path":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","commits":[{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n          String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n              relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n          String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n              relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n          String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n              relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","date":1477294600,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n          String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n              relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n          String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n              relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c","date":1551210752,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"accbc347dd28993a84ae51e9e6f01e31a26a7184","date":1551252530,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba52b298388110adda4c077defc2ab02b2b3fcc7","date":1563183607,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter();\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: \"+params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return Collections.enumeration(params.keySet());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap<>();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (@SuppressWarnings({\"rawtypes\"})Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return Collections.enumeration(params.keySet());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return Collections.enumeration(params.keySet());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#getInitFilterConfig(Map[String,Object],boolean).mjava","sourceNew":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap<>();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    boolean delegationTokenEnabled = Boolean.getBoolean(DELEGATION_TOKEN_ENABLED);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (Enumeration<?> e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return Collections.enumeration(params.keySet());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig, boolean skipKerberosChecking) {\n    Map<String, String> params = new HashMap<>();\n    params.put(\"type\", \"kerberos\");\n    putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n    putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n    putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n    if (!skipKerberosChecking) {\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n    } else {\n      putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n      putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n    }\n\n    String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n    boolean delegationTokenEnabled =\n        (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n    ZkController controller = coreContainer.getZkController();\n\n    if (delegationTokenEnabled) {\n      putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n      if (coreContainer.isZooKeeperAware()) {\n        putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n        if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n          String zkHost = controller.getZkServerAddress();\n          putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n          params.put(\"zk-dt-secret-manager.enable\", \"true\");\n\n          String chrootPath = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n          String znodeWorkingPath = chrootPath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\";\n          // Note - Curator complains if the znodeWorkingPath starts with /\n          znodeWorkingPath = znodeWorkingPath.startsWith(\"/\")? znodeWorkingPath.substring(1): znodeWorkingPath;\n          putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n              DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH, znodeWorkingPath);\n          putParam(params, \"signer.secret.provider.zookeeper.path\",\n              DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n          // ensure krb5 is setup properly before running curator\n          getHttpClientBuilder(SolrHttpClientBuilder.create());\n        }\n      } else {\n        log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n      }\n    }\n\n    // Special handling for the \"cookie.domain\" based on whether port should be\n    // appended to the domain. Useful for situations where multiple solr nodes are\n    // on the same host.\n    String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n    boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n    if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n    } else { // we need port aware cookies and we are in SolrCloud mode.\n      String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n      if (host==null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n      }\n      int port = controller.getHostPort();\n      params.put(\"cookie.domain\", host + \":\" + port);\n    }\n\n    // check impersonator config\n    for (@SuppressWarnings({\"rawtypes\"})Enumeration e = System.getProperties().propertyNames(); e.hasMoreElements();) {\n      String key = e.nextElement().toString();\n      if (key.startsWith(IMPERSONATOR_PREFIX)) {\n        if (!delegationTokenEnabled) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"Impersonator configuration requires delegation tokens to be enabled: \" + key);\n        }\n        params.put(key, System.getProperty(key));\n      }\n    }\n\n    // Needed to work around HADOOP-13346\n    params.put(DelegationTokenAuthenticationHandler.JSON_MAPPER_PREFIX + JsonGenerator.Feature.AUTO_CLOSE_TARGET,\n        \"false\");\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n    if (delegationTokenEnabled) {\n      kerberosFilter = new DelegationTokenKerberosFilter();\n      // pass an attribute-enabled context in order to pass the zkClient\n      // and because the filter may pass a curator instance.\n    } else {\n      kerberosFilter = new KerberosFilter(coreContainer);\n    }\n    log.info(\"Params: {}\", params);\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return Collections.enumeration(params.keySet());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"KerberosFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"ba52b298388110adda4c077defc2ab02b2b3fcc7":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["ba52b298388110adda4c077defc2ab02b2b3fcc7"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c"],"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba52b298388110adda4c077defc2ab02b2b3fcc7":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc3d73ce4049cb1520abaaae57fe8267639bda1d","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","accbc347dd28993a84ae51e9e6f01e31a26a7184","8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["ba52b298388110adda4c077defc2ab02b2b3fcc7"],"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}