{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    InvertedFields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    InvertedFields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.index.IndexableField} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}