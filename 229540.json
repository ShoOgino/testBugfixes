{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","commits":[{"id":"25a69ca6651c6c39154826d22ee7a0b606cb5d8c","date":1225195699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void xxxtestOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void xxxtestOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer()) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT)) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT)) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"25a69ca6651c6c39154826d22ee7a0b606cb5d8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"25a69ca6651c6c39154826d22ee7a0b606cb5d8c":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"09c482d1e63332617181729a225b215c452d8a79":["87c966e9308847938a7c905c2e46a56d8df788b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}