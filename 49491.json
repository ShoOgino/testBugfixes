{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,ScoreDoc,int).mjava","commits":[{"id":"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15","date":1316561169,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,ScoreDoc,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, using the given leaf readers applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, using the given leaf readers applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,ScoreDoc,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(AtomicReaderContext[] leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, using the given leaf readers applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6620df8541b174097b1133a4fc370adb2e570524":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}