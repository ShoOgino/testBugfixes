{"path":"lucene/core/src/java/org/apache/lucene/document/NumericField#NumericField(String,Number,FieldType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/NumericField#NumericField(String,Number,FieldType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#NumericField(String,Number,FieldType).mjava","sourceNew":"  public NumericField(String name, Number value, FieldType type) {\n    super(name, type);\n    final NumericField.DataType numericType = type.numericType();\n    if (numericType == null) {\n      throw new IllegalArgumentException(\"FieldType.numericType() cannot be null\");\n    }\n\n    switch(numericType) {\n    case INT:\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"value must be an Integer but got \" + value);\n      }\n      break;\n    case LONG:\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"value must be a Long but got \" + value);\n      }\n      break;\n    case FLOAT:\n      if (!(value instanceof Float)) {\n        throw new IllegalArgumentException(\"value must be a Float but got \" + value);\n      }\n      break;\n    case DOUBLE:\n      if (!(value instanceof Double)) {\n        throw new IllegalArgumentException(\"value must be a Double but got \" + value);\n      }\n      break;\n    default:\n      assert false : \"Should never get here\";\n    }\n\n    fieldsData = value;\n  }\n\n","sourceOld":"  public NumericField(String name, Number value, FieldType type) {\n    super(name, type);\n    final NumericField.DataType numericType = type.numericType();\n    if (numericType == null) {\n      throw new IllegalArgumentException(\"FieldType.numericType() cannot be null\");\n    }\n\n    switch(numericType) {\n    case INT:\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"value must be an Integer but got \" + value);\n      }\n      break;\n    case LONG:\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"value must be a Long but got \" + value);\n      }\n      break;\n    case FLOAT:\n      if (!(value instanceof Float)) {\n        throw new IllegalArgumentException(\"value must be a Float but got \" + value);\n      }\n      break;\n    case DOUBLE:\n      if (!(value instanceof Double)) {\n        throw new IllegalArgumentException(\"value must be a Double but got \" + value);\n      }\n      break;\n    default:\n      assert false : \"Should never get here\";\n    }\n\n    fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/NumericField#NumericField(String,Number,FieldType).mjava","sourceNew":null,"sourceOld":"  public NumericField(String name, Number value, FieldType type) {\n    super(name, type);\n    final NumericField.DataType numericType = type.numericType();\n    if (numericType == null) {\n      throw new IllegalArgumentException(\"FieldType.numericType() cannot be null\");\n    }\n\n    switch(numericType) {\n    case INT:\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"value must be an Integer but got \" + value);\n      }\n      break;\n    case LONG:\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"value must be a Long but got \" + value);\n      }\n      break;\n    case FLOAT:\n      if (!(value instanceof Float)) {\n        throw new IllegalArgumentException(\"value must be a Float but got \" + value);\n      }\n      break;\n    case DOUBLE:\n      if (!(value instanceof Double)) {\n        throw new IllegalArgumentException(\"value must be a Double but got \" + value);\n      }\n      break;\n    default:\n      assert false : \"Should never get here\";\n    }\n\n    fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a78a90fc9701e511308346ea29f4f5e548bb39fe"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}