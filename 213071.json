{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","commits":[{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    int numShards = 4;\n    int numReplicas = 1;\n    Create createCollection = CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", numShards, numReplicas);\n    createCollection.setMaxShardsPerNode(100);\n    String asyncId =\n        createCollection.processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have \"+numShards+\" shards and \"+\n        numShards*numReplicas+\" replica\", \"asynccall\", clusterShape(numShards, numShards*numReplicas));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      final int actualNumOfElems = 3+(numShards*numReplicas);\n      // responseHeader, success, status, + old responses per every replica  \n      assertEquals(\"Expected \"+actualNumOfElems+\" elements in the response\" + r.jsonStr(),\n               actualNumOfElems, r.size());\n    } else {\n      // responseHeader, success, status\n      assertEquals(\"Expected 3 elements in the response\" + r.jsonStr(), 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    {\n      final NamedList<?> success = (NamedList<?>)r.get(\"success\");\n      assertNotNull(\"Expected 'success' response\" + r, success);\n    \n      final int actualSuccessElems = 2*(numShards*numReplicas);\n      // every replica responds once on submit and once on complete\n      assertEquals(\"Expected \"+actualSuccessElems+\n        \" elements in the success element\" + success.jsonStr(), \n          actualSuccessElems, success.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n\n    String asyncId =\n        CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", 2, 1).processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have 2 shards and 1 replica\", \"asynccall\", clusterShape(2, 2));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      assertEquals(\"Expected 5 elements in the response\" + r, 5, r.size());\n    } else {\n      assertEquals(\"Expected 3 elements in the response\" + r, 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'success' response\" + r, r.get(\"success\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    assertEquals(\"Expected 4 elements in the success element\" + r.get(\"success\"), 4, ((NamedList<?>)r.get(\"success\")).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AsyncCallRequestStatusResponseTest#testAsyncCallStatusResponse().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    int numShards = 4;\n    int numReplicas = 1;\n    Create createCollection = CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", numShards, numReplicas);\n    String asyncId =\n        createCollection.processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have \"+numShards+\" shards and \"+\n        numShards*numReplicas+\" replica\", \"asynccall\", clusterShape(numShards, numShards*numReplicas));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      final int actualNumOfElems = 3+(numShards*numReplicas);\n      // responseHeader, success, status, + old responses per every replica  \n      assertEquals(\"Expected \"+actualNumOfElems+\" elements in the response\" + r.jsonStr(),\n               actualNumOfElems, r.size());\n    } else {\n      // responseHeader, success, status\n      assertEquals(\"Expected 3 elements in the response\" + r.jsonStr(), 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    {\n      final NamedList<?> success = (NamedList<?>)r.get(\"success\");\n      assertNotNull(\"Expected 'success' response\" + r, success);\n    \n      final int actualSuccessElems = 2*(numShards*numReplicas);\n      // every replica responds once on submit and once on complete\n      assertEquals(\"Expected \"+actualSuccessElems+\n        \" elements in the success element\" + success.jsonStr(), \n          actualSuccessElems, success.size());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testAsyncCallStatusResponse() throws Exception {\n    int numShards = 4;\n    int numReplicas = 1;\n    Create createCollection = CollectionAdminRequest.createCollection(\"asynccall\", \"conf\", numShards, numReplicas);\n    createCollection.setMaxShardsPerNode(100);\n    String asyncId =\n        createCollection.processAsync(cluster.getSolrClient());\n\n    waitForState(\"Expected collection 'asynccall' to have \"+numShards+\" shards and \"+\n        numShards*numReplicas+\" replica\", \"asynccall\", clusterShape(numShards, numShards*numReplicas));\n\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 30, cluster.getSolrClient());\n    assertEquals(\"Unexpected request status: \" + state, \"completed\", state.getKey());\n\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    CollectionAdminResponse rsp = requestStatus.process(cluster.getSolrClient());\n    NamedList<?> r = rsp.getResponse();\n    if (OverseerCollectionMessageHandler.INCLUDE_TOP_LEVEL_RESPONSE) {\n      final int actualNumOfElems = 3+(numShards*numReplicas);\n      // responseHeader, success, status, + old responses per every replica  \n      assertEquals(\"Expected \"+actualNumOfElems+\" elements in the response\" + r.jsonStr(),\n               actualNumOfElems, r.size());\n    } else {\n      // responseHeader, success, status\n      assertEquals(\"Expected 3 elements in the response\" + r.jsonStr(), 3, r.size());\n    }\n    assertNotNull(\"Expected 'responseHeader' response\" + r, r.get(\"responseHeader\"));\n    assertNotNull(\"Expected 'status' response\" + r, r.get(\"status\"));\n    {\n      final NamedList<?> success = (NamedList<?>)r.get(\"success\");\n      assertNotNull(\"Expected 'success' response\" + r, success);\n    \n      final int actualSuccessElems = 2*(numShards*numReplicas);\n      // every replica responds once on submit and once on complete\n      assertEquals(\"Expected \"+actualSuccessElems+\n        \" elements in the success element\" + success.jsonStr(), \n          actualSuccessElems, success.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69e6520a21709190413a63084ed135271aab1a7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["69e6520a21709190413a63084ed135271aab1a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"69e6520a21709190413a63084ed135271aab1a7c":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69e6520a21709190413a63084ed135271aab1a7c"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}