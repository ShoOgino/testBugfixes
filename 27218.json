{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlags(BytesRef,char[]).mjava","commits":[{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlags(BytesRef,char[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlagsWithHash(BytesRef,char[]).mjava","sourceNew":"  static void encodeFlags(BytesRef b, char flags[]) {\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      b.bytes[upto++] = (byte) ((flag >> 8) & 0xff);\n      b.bytes[upto++] = (byte) (flag & 0xff);\n    }\n  }\n\n","sourceOld":"  static int encodeFlagsWithHash(BytesRef b, char flags[]) {\n    int hash = 0;\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      hash = 31*hash + (b.bytes[upto++] = (byte) ((flag >> 8) & 0xff));\n      hash = 31*hash + (b.bytes[upto++] = (byte) (flag & 0xff));\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlags(BytesRefBuilder,char[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlags(BytesRef,char[]).mjava","sourceNew":"  static void encodeFlags(BytesRefBuilder b, char flags[]) {\n    int len = flags.length << 1;\n    b.grow(len);\n    b.clear();\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      b.append((byte) ((flag >> 8) & 0xff));\n      b.append((byte) (flag & 0xff));\n    }\n  }\n\n","sourceOld":"  static void encodeFlags(BytesRef b, char flags[]) {\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      b.bytes[upto++] = (byte) ((flag >> 8) & 0xff);\n      b.bytes[upto++] = (byte) (flag & 0xff);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}