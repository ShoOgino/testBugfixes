{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"/dev/null","sourceNew":"    protected Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient) \n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n      \n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        \n        // TODO: Need a better way to get the zkHost from a running server\n        // as it can be set from solr.xml vs. on the command-line\n        String zkHost = null;\n        List<String> args = asList(\"/jvm/jmx/commandLineArgs\", info);\n        if (args != null) {\n          for (String arg : args) {\n            if (arg.startsWith(\"-DzkHost=\")) {\n              zkHost = arg.substring(\"-DzkHost=\".length());\n              break;\n            } else if (arg.startsWith(\"-DzkRun\")) {\n              URL serverUrl = new URL(solrUrl);\n              String host = serverUrl.getHost();\n              int port = serverUrl.getPort();\n              zkHost = host+\":\"+(port+1000)+\" (embedded)\";\n              break;\n            }\n          }\n        }\n        \n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n      \n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":"    protected Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient) \n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n      \n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        \n        // TODO: Need a better way to get the zkHost from a running server\n        // as it can be set from solr.xml vs. on the command-line\n        String zkHost = null;\n        List<String> args = asList(\"/jvm/jmx/commandLineArgs\", info);\n        if (args != null) {\n          for (String arg : args) {\n            if (arg.startsWith(\"-DzkHost=\")) {\n              zkHost = arg.substring(\"-DzkHost=\".length());\n              break;\n            } else if (arg.startsWith(\"-DzkRun\")) {\n              URL serverUrl = new URL(solrUrl);\n              String host = serverUrl.getHost();\n              int port = serverUrl.getPort();\n              zkHost = host+\":\"+(port+1000)+\" (embedded)\";\n              break;\n            }\n          }\n        }\n        \n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n      \n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","sourceOld":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#reportStatus(String,Map[String,Object],HttpClient).mjava","sourceNew":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));\n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n\n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n\n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n\n      return status;\n    }\n\n","sourceOld":"    public Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient)\n        throws Exception\n    {\n      Map<String,Object> status = new LinkedHashMap<String,Object>();\n\n      String solrHome = (String)info.get(\"solr_home\");\n      status.put(\"solr_home\", solrHome != null ? solrHome : \"?\");\n      status.put(\"version\", asString(\"/lucene/solr-impl-version\", info));      \n      status.put(\"startTime\", asString(\"/jvm/jmx/startTime\", info));\n      status.put(\"uptime\", uptime(asLong(\"/jvm/jmx/upTimeMS\", info)));\n      \n      String usedMemory = asString(\"/jvm/memory/used\", info);\n      String totalMemory = asString(\"/jvm/memory/total\", info);\n      status.put(\"memory\", usedMemory+\" of \"+totalMemory);\n      \n      // if this is a Solr in solrcloud mode, gather some basic cluster info\n      if (\"solrcloud\".equals(info.get(\"mode\"))) {\n        String zkHost = (String)info.get(\"zkHost\");\n        status.put(\"cloud\", getCloudStatus(httpClient, solrUrl, zkHost));\n      }\n      \n      return status;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["209c0259a9b7087b2111411ec790d6557ef86307","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"209c0259a9b7087b2111411ec790d6557ef86307":["e25c332f157326faecb36f76173033c1284776a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e25c332f157326faecb36f76173033c1284776a5":["709714c6ee47950678dd2d2ef4e0473886909226"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["209c0259a9b7087b2111411ec790d6557ef86307"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["209c0259a9b7087b2111411ec790d6557ef86307","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"709714c6ee47950678dd2d2ef4e0473886909226":["e25c332f157326faecb36f76173033c1284776a5"],"209c0259a9b7087b2111411ec790d6557ef86307":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"e25c332f157326faecb36f76173033c1284776a5":["209c0259a9b7087b2111411ec790d6557ef86307"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}