{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","commits":[{"id":"7aa2c1715ef9a80383edea1048655da291ed9b8f","date":1495196478,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    cluster.stopJettySolrRunner(index);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d815fede7a7f5184fb54d235b3ecb95cadcf554c","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testContinueTriggersOnOverseerRestart().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testContinueTriggersOnOverseerRestart() throws Exception  {\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    NamedList<Object> response = adminResponse.getResponse();\n    String leader = (String) response.get(\"leader\");\n    JettySolrRunner overseerNode = null;\n    int index = -1;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner.getNodeName().equals(leader)) {\n        overseerNode = runner;\n        index = i;\n        break;\n      }\n    }\n    assertNotNull(overseerNode);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerCTOOR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the overseer, somebody else will take over as the overseer\n    JettySolrRunner j = cluster.stopJettySolrRunner(index);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(10000);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["e0d9c88546c1a130d50b56981790d87a308daffd"],"e2f4717538692c396242d8b00ae0001626caebdd":["7aa2c1715ef9a80383edea1048655da291ed9b8f","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["560c18d71dad43d675158783c3840f8c80d6d39c","d9ccfe45460d496c5e5e1b70396521dac842d966"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e2f4717538692c396242d8b00ae0001626caebdd","464244264804e3f981bf1fb4b732516d8d62dbc2"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e2f4717538692c396242d8b00ae0001626caebdd"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"e2f4717538692c396242d8b00ae0001626caebdd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7aa2c1715ef9a80383edea1048655da291ed9b8f","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"e0d9c88546c1a130d50b56981790d87a308daffd":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"89948af0461fead48f44ba8fb7866f107ce83f22":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}