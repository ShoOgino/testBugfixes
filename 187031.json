{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<String>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de40d002b4bf6ee10652e661f89cdb0a8aac7df2","date":1465289501,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBiggerSmallerFiles() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    Set<String> l = new HashSet<>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    assertEquals(l, new HashSet<>(fList));\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"a\", createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    assertEquals(l, new HashSet<>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"024e13388acbf5562fcbb77a129620982a5e2d79":["191128ac5b85671b1671e2c857437694283b6ebf"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4abec28b874149a7223e32cc7a01704c27790de","de40d002b4bf6ee10652e661f89cdb0a8aac7df2"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f4abec28b874149a7223e32cc7a01704c27790de","191128ac5b85671b1671e2c857437694283b6ebf"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"de40d002b4bf6ee10652e661f89cdb0a8aac7df2":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"191128ac5b85671b1671e2c857437694283b6ebf":["024e13388acbf5562fcbb77a129620982a5e2d79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","de40d002b4bf6ee10652e661f89cdb0a8aac7df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"de40d002b4bf6ee10652e661f89cdb0a8aac7df2":["191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}