{"path":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityProviderOne.get(field).decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":null,"sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":null,"sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":null,"sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = MultiNorms.norms(ir, field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      DefaultSimilarity sim = (DefaultSimilarity) similarityProviderOne.get(field);\n      for (int j = 0; j < b.length; j++) {\n        float norm = sim.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b0d06946f61921459f43309f86ed621ebe67eebe"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"b0d06946f61921459f43309f86ed621ebe67eebe":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0f3cee3d20b0c786e6fca20539454262e29edcab","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["b0d06946f61921459f43309f86ed621ebe67eebe"],"1291e4568eb7d9463d751627596ef14baf4c1603":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0f3cee3d20b0c786e6fca20539454262e29edcab","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b0d06946f61921459f43309f86ed621ebe67eebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"b0d06946f61921459f43309f86ed621ebe67eebe":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","160d004a0e8f5361a446f9d01456aee1c1af20dc","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}