{"path":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","commits":[{"id":"db06e0cd3d23936f96db2498594992ba9f28bf49","date":1366696565,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c0daac4c3c66a1671bf51ba33de4df7e384b5cf","date":1367041025,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = TestHarness.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = TestHarness.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = TestHarness.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testCatchAllCopyField().mjava","sourceNew":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = TestHarness.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","sourceOld":"  public void testCatchAllCopyField() throws Exception {\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema-copyfield-test.xml\");\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    \n    assertNull(\"'*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"*\"));\n    \n    boolean foundCatchAllCopyField = false;\n    for (IndexSchema.DynamicCopy dcf : schema.getDynamicCopyFields()) {\n      foundCatchAllCopyField = dcf.getRegex().equals(\"*\") && dcf.getDestFieldName().equals(\"catchall_t\");\n      if (foundCatchAllCopyField) {\n        break;\n      }\n    }\n    assertTrue(\"<copyField source=\\\"*\\\" dest=\\\"catchall_t\\\"/> is missing from the schema\", foundCatchAllCopyField);\n\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"show\", \"schema\", \"indent\", \"on\");\n    String xml = h.query(req);\n    String result = h.validateXPath(xml, field(\"bday\") + \"/arr[@name='copyDests']/str[.='catchall_t']\");\n    assertNull(xml, result);\n\n    // Put back the configuration expected by the rest of the tests in this suite\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3c0daac4c3c66a1671bf51ba33de4df7e384b5cf","7116474e2e390259937401cf928323e0cbc75e60"],"db06e0cd3d23936f96db2498594992ba9f28bf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["3c0daac4c3c66a1671bf51ba33de4df7e384b5cf"],"3c0daac4c3c66a1671bf51ba33de4df7e384b5cf":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7116474e2e390259937401cf928323e0cbc75e60"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"db06e0cd3d23936f96db2498594992ba9f28bf49":["3c0daac4c3c66a1671bf51ba33de4df7e384b5cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"3c0daac4c3c66a1671bf51ba33de4df7e384b5cf":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}