{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrServer().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient( url );\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrServer createNewSolrServer()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      s.setDefaultMaxConnectionsPerHost(100);\n      s.setMaxTotalConnections(100);\n      s.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      s.setParser(new BinaryResponseParser());\n      s.setRequestWriter(new BinaryRequestWriter());\n\n      return s;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient( url );\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient( url );\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient( url );\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient( url );\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest#createNewSolrClient().mjava","sourceNew":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrClient createNewSolrClient()\n  {\n    try {\n      // setup the server...\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n\n      // where the magic happens\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n\n      return client;\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"859081acf00749f5dd462772c571d611d4a4d2db":["bafca15d8e408346a67f4282ad1143b88023893b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43d1e498704edd2bba13548a189eed4dfccff11b"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"bafca15d8e408346a67f4282ad1143b88023893b":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}