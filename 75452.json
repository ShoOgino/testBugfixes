{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"87fab14adebb5b490363c9bc05f747938bd15e6a","date":1424877964,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists = (s != null && s.advance(doc) == doc);\n\n    final ComplexExplanation result = new ComplexExplanation();\n    if (exists) {\n      result.setDescription(getQuery().toString() + \", product of:\");\n      result.setValue(queryWeight);\n      result.setMatch(Boolean.TRUE);\n      result.addDetail(new Explanation(getQuery().getBoost(), \"boost\"));\n      result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n    } else {\n      result.setDescription(getQuery().toString() + \" doesn't match id \" + doc);\n      result.setValue(0);\n      result.setMatch(Boolean.FALSE);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists = (s != null && s.advance(doc) == doc);\n\n    final ComplexExplanation result = new ComplexExplanation();\n    if (exists) {\n      result.setDescription(getQuery().toString() + \", product of:\");\n      result.setValue(queryWeight);\n      result.setMatch(Boolean.TRUE);\n      result.addDetail(new Explanation(getQuery().getBoost(), \"boost\"));\n      result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n    } else {\n      result.setDescription(getQuery().toString() + \" doesn't match id \" + doc);\n      result.setValue(0);\n      result.setMatch(Boolean.FALSE);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists = (s != null && s.advance(doc) == doc);\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists = (s != null && s.advance(doc) == doc);\n\n    final ComplexExplanation result = new ComplexExplanation();\n    if (exists) {\n      result.setDescription(getQuery().toString() + \", product of:\");\n      result.setValue(queryWeight);\n      result.setMatch(Boolean.TRUE);\n      result.addDetail(new Explanation(getQuery().getBoost(), \"boost\"));\n      result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n    } else {\n      result.setDescription(getQuery().toString() + \" doesn't match id \" + doc);\n      result.setValue(0);\n      result.setMatch(Boolean.FALSE);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists = (s != null && s.advance(doc) == doc);\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context, context.reader().getLiveDocs());\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(boost, \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(getQuery().getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.twoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.iterator().advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(boost, \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(boost, \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.twoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.iterator().advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          score, getQuery().toString() + (score == 1f ? \"\" : \"^\" + score));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.twoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.iterator().advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(boost, \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.twoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.iterator().advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          score, getQuery().toString() + (score == 1f ? \"\" : \"^\" + score));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    final Scorer s = scorer(context);\n    final boolean exists;\n    if (s == null) {\n      exists = false;\n    } else {\n      final TwoPhaseIterator twoPhase = s.twoPhaseIterator();\n      if (twoPhase == null) {\n        exists = s.iterator().advance(doc) == doc;\n      } else {\n        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();\n      }\n    }\n\n    if (exists) {\n      return Explanation.match(\n          queryWeight, getQuery().toString() + \", product of:\",\n          Explanation.match(boost, \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n    } else {\n      return Explanation.noMatch(getQuery().toString() + \" doesn't match id \" + doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87fab14adebb5b490363c9bc05f747938bd15e6a"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["87fab14adebb5b490363c9bc05f747938bd15e6a"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fab14adebb5b490363c9bc05f747938bd15e6a"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}