{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (query != null) {\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        rewritten = new ConstantScoreQuery(rewritten);\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (query != null) {\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        rewritten = new ConstantScoreQuery(rewritten);\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81abdee99ea2cd37c59c455411c9948dba325dc5","date":1382778752,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (query != null) {\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        rewritten = new ConstantScoreQuery(rewritten);\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    } else {\n      assert filter != null;\n      // Fix outdated usage pattern from Lucene 2.x/early-3.x:\n      // because ConstantScoreQuery only accepted filters,\n      // QueryWrapperFilter was used to wrap queries.\n      if (filter instanceof QueryWrapperFilter) {\n        final QueryWrapperFilter qwf = (QueryWrapperFilter) filter;\n        final Query rewritten = new ConstantScoreQuery(qwf.getQuery().rewrite(reader));\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (query != null) {\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        rewritten = new ConstantScoreQuery(rewritten);\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933780884e79144ac5dbe8785ec03c5f4ed3f218","date":1423843143,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query sub = query;\n    if (sub instanceof QueryWrapperFilter) {\n      sub = ((QueryWrapperFilter) sub).getQuery();\n    }\n    Query rewritten = sub.rewrite(reader);\n    if (rewritten != query) {\n      rewritten = new ConstantScoreQuery(rewritten);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    }\n    return this;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (query != null) {\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        rewritten = new ConstantScoreQuery(rewritten);\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    } else {\n      assert filter != null;\n      // Fix outdated usage pattern from Lucene 2.x/early-3.x:\n      // because ConstantScoreQuery only accepted filters,\n      // QueryWrapperFilter was used to wrap queries.\n      if (filter instanceof QueryWrapperFilter) {\n        final QueryWrapperFilter qwf = (QueryWrapperFilter) filter;\n        final Query rewritten = new ConstantScoreQuery(qwf.getQuery().rewrite(reader));\n        rewritten.setBoost(this.getBoost());\n        return rewritten;\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n\n    if (rewritten.getClass() == getClass()) {\n      if (getBoost() != rewritten.getBoost()) {\n        rewritten = rewritten.clone();\n        rewritten.setBoost(getBoost());\n      }\n      return rewritten;\n    }\n\n    if (rewritten != query) {\n      rewritten = new ConstantScoreQuery(rewritten);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    }\n\n    return this;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query sub = query;\n    if (sub instanceof QueryWrapperFilter) {\n      sub = ((QueryWrapperFilter) sub).getQuery();\n    }\n    Query rewritten = sub.rewrite(reader);\n    if (rewritten != query) {\n      rewritten = new ConstantScoreQuery(rewritten);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    }\n    return this;\n  }\n\n","bugFix":["933780884e79144ac5dbe8785ec03c5f4ed3f218"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n\n    if (rewritten != query) {\n      return new ConstantScoreQuery(rewritten);\n    }\n\n    if (rewritten.getClass() == ConstantScoreQuery.class) {\n      return rewritten;\n    }\n\n    if (rewritten.getClass() == BoostQuery.class) {\n      return new ConstantScoreQuery(((BoostQuery) rewritten).getQuery());\n    }\n\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n\n    if (rewritten.getClass() == getClass()) {\n      if (getBoost() != rewritten.getBoost()) {\n        rewritten = rewritten.clone();\n        rewritten.setBoost(getBoost());\n      }\n      return rewritten;\n    }\n\n    if (rewritten != query) {\n      rewritten = new ConstantScoreQuery(rewritten);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    }\n\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81abdee99ea2cd37c59c455411c9948dba325dc5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["933780884e79144ac5dbe8785ec03c5f4ed3f218"],"933780884e79144ac5dbe8785ec03c5f4ed3f218":["81abdee99ea2cd37c59c455411c9948dba325dc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"81abdee99ea2cd37c59c455411c9948dba325dc5":["933780884e79144ac5dbe8785ec03c5f4ed3f218"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["81abdee99ea2cd37c59c455411c9948dba325dc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"933780884e79144ac5dbe8785ec03c5f4ed3f218":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}