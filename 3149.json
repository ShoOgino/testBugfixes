{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7460755aa94143153400f49c8ac2746f5d092e1a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["7460755aa94143153400f49c8ac2746f5d092e1a"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["7460755aa94143153400f49c8ac2746f5d092e1a","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7460755aa94143153400f49c8ac2746f5d092e1a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}