{"path":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","commits":[{"id":"72cd13950cb77f98f9b5fe46dd0906a1d6902238","date":1343110129,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef111259dadaaecaa5dc7299fbc1df18dd534358","date":1343187209,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new InitializationException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":2,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new InitializationException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    featurePath = args.get(\"featurePath\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new IllegalArgumentException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new InitializationException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new IllegalArgumentException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new IllegalArgumentException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33ed545e4deff5f64f5f512c52a115a2d6d76f9","date":1359983920,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    configurationParameters = new HashMap<String, Object>();\n    for (String k : args.keySet()) {\n      if (k.equals(\"tokenType\")) {\n        tokenType = args.get(\"tokenType\");\n      } else if (k.equals(\"descriptorPath\")) {\n        descriptorPath = args.get(\"descriptorPath\");\n      } else {\n        configurationParameters.put(k, args.get(k));\n      }\n    }\n    if (descriptorPath == null || tokenType == null ) {\n      throw new IllegalArgumentException(\"descriptorPath and tokenType are mandatory\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new IllegalArgumentException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    configurationParameters = new HashMap<String, Object>();\n    for (String k : args.keySet()) {\n      if (k.equals(\"tokenType\")) {\n        tokenType = args.get(\"tokenType\");\n      } else if (k.equals(\"descriptorPath\")) {\n        descriptorPath = args.get(\"descriptorPath\");\n      } else {\n        configurationParameters.put(k, args.get(k));\n      }\n    }\n    if (descriptorPath == null || tokenType == null ) {\n      throw new IllegalArgumentException(\"descriptorPath and tokenType are mandatory\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    descriptorPath = args.get(\"descriptorPath\");\n    tokenType = args.get(\"tokenType\");\n    if (descriptorPath == null || tokenType == null) {\n      throw new IllegalArgumentException(\"Both descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#UIMAAnnotationsTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new UIMAAnnotationsTokenizerFactory */\n  public UIMAAnnotationsTokenizerFactory(Map<String, String> args) {\n    super(args);\n    for (String k : args.keySet()) {\n      if (k.equals(\"tokenType\")) {\n        tokenType = args.get(\"tokenType\");\n      } else if (k.equals(\"descriptorPath\")) {\n        descriptorPath = args.get(\"descriptorPath\");\n      } else {\n        configurationParameters.put(k, args.get(k));\n      }\n    }\n    if (descriptorPath == null || tokenType == null ) {\n      throw new IllegalArgumentException(\"descriptorPath and tokenType are mandatory\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    configurationParameters = new HashMap<String, Object>();\n    for (String k : args.keySet()) {\n      if (k.equals(\"tokenType\")) {\n        tokenType = args.get(\"tokenType\");\n      } else if (k.equals(\"descriptorPath\")) {\n        descriptorPath = args.get(\"descriptorPath\");\n      } else {\n        configurationParameters.put(k, args.get(k));\n      }\n    }\n    if (descriptorPath == null || tokenType == null ) {\n      throw new IllegalArgumentException(\"descriptorPath and tokenType are mandatory\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33ed545e4deff5f64f5f512c52a115a2d6d76f9":["f6f80818731469e00f54165ec94aae2db868ea05"],"ef111259dadaaecaa5dc7299fbc1df18dd534358":["72cd13950cb77f98f9b5fe46dd0906a1d6902238"],"72cd13950cb77f98f9b5fe46dd0906a1d6902238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["f6f80818731469e00f54165ec94aae2db868ea05","d33ed545e4deff5f64f5f512c52a115a2d6d76f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef111259dadaaecaa5dc7299fbc1df18dd534358"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"d33ed545e4deff5f64f5f512c52a115a2d6d76f9":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"ef111259dadaaecaa5dc7299fbc1df18dd534358":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"72cd13950cb77f98f9b5fe46dd0906a1d6902238":["ef111259dadaaecaa5dc7299fbc1df18dd534358"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["72cd13950cb77f98f9b5fe46dd0906a1d6902238","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9","aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}