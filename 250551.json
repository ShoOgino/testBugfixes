{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = ((MultiFieldAttribute) getQueryConfigHandler()\n            .getAttribute(MultiFieldAttribute.class)).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = ((MultiFieldAttribute) getQueryConfigHandler()\n            .getAttribute(MultiFieldAttribute.class)).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = getQueryConfigHandler().getAttribute(\n            MultiFieldAttribute.class).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = ((MultiFieldAttribute) getQueryConfigHandler()\n            .getAttribute(MultiFieldAttribute.class)).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = getQueryConfigHandler().getAttribute(\n            MultiFieldAttribute.class).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = getQueryConfigHandler().getAttribute(\n            MultiFieldAttribute.class).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = getQueryConfigHandler().getAttribute(\n            MultiFieldAttribute.class).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n\n        if (!getQueryConfigHandler().hasAttribute(MultiFieldAttribute.class)) {\n          throw new IllegalArgumentException(\n              \"MultiFieldAttribute should be set on the QueryConfigHandler\");\n        }\n\n        CharSequence[] fields = getQueryConfigHandler().getAttribute(\n            MultiFieldAttribute.class).getFields();\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}