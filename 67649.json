{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    final CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(\"Now\", termAtt.toString());\n    assertTrue(stream.incrementToken());\n    assertEquals(\"The\", termAtt.toString());\n    assertFalse(stream.incrementToken());\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    final CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(\"Now\", termAtt.toString());\n    assertTrue(stream.incrementToken());\n    assertEquals(\"The\", termAtt.toString());\n    assertFalse(stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    final CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(\"Now\", termAtt.toString());\n    assertTrue(stream.incrementToken());\n    assertEquals(\"The\", termAtt.toString());\n    assertFalse(stream.incrementToken());\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","a775c547c3519b47efd41c09cb47100ddb9604c7","74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    final CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(\"Now\", termAtt.toString());\n    assertTrue(stream.incrementToken());\n    assertEquals(\"The\", termAtt.toString());\n    assertFalse(stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    final CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(\"Now\", termAtt.toString());\n    assertTrue(stream.incrementToken());\n    assertEquals(\"The\", termAtt.toString());\n    assertFalse(stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopFilt().mjava","sourceNew":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","sourceOld":"  public void testStopFilt() throws IOException {\n    StringReader reader = new StringReader(\"Now is The Time\");\n    String[] stopWords = new String[] { \"is\", \"the\", \"Time\" };\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    TokenStream stream = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    assertTokenStreamContents(stream, new String[] { \"Now\", \"The\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}