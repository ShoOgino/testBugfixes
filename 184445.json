{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","commits":[{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath1,\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      String[] expressions = getAllNodes(new File(solrHomeDirectory, \"solr.xml\"));\n      assertXmlFile(persistXml, expressions);\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @config='solrconfig-minimal.xml']\"\n              , \"/solr/cores/core[@name='props1' and @schema='schema-tiny.xml']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig-minimal.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema-tiny.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n    // / insure that after you create a core and persist solr.xml the created core has\n    // all expected and no extraneous values, both attribs and <property> tags.\n    // How to create this core with sysprops?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96a802acd838449b6936d34e464baeeb82f9ef54","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96a802acd838449b6936d34e464baeeb82f9ef54","date":1371519049,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath1,\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n    // / insure that after you create a core and persist solr.xml the created core has\n    // all expected and no extraneous values, both attribs and <property> tags.\n    // How to create this core with sysprops?\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath1,\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      String[] expressions = getAllNodes(new File(solrHomeDirectory, \"solr.xml\"));\n      assertXmlFile(persistXml, expressions);\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @config='solrconfig-minimal.xml']\"\n              , \"/solr/cores/core[@name='props1' and @schema='schema-tiny.xml']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig-minimal.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema-tiny.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n    // / insure that after you create a core and persist solr.xml the created core has\n    // all expected and no extraneous values, both attribs and <property> tags.\n    // How to create this core with sysprops?\n  }\n\n","bugFix":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2eea68c999cd25f09e15e71eb2fd57b17f5eca59","date":1371837918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1/']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath1,\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n    // / insure that after you create a core and persist solr.xml the created core has\n    // all expected and no extraneous values, both attribs and <property> tags.\n    // How to create this core with sysprops?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2a443f1eeeee35a11bae58eed4c6f335f5c78e1","date":1371853050,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1/']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n      String instPath1 = new File(solrHomeDirectory, \"props1\").getAbsolutePath();\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      final File persistXml = new File(solrHomeDirectory, \"persist_create_core.solr.xml\");\n      cc.persistFile(persistXml);\n      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, \"solr.xml\")));\n\n      // And the params for the new core should be in the persisted file.\n      assertXmlFile\n          (persistXml\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testCreatePersistCore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCreatePersistCore() throws Exception {\n    // Template for creating a core.\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\", \"props1\", \"props2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      // create a new core (using CoreAdminHandler) w/ properties\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"props1\",\n              CoreAdminParams.TRANSIENT, \"true\",\n              CoreAdminParams.LOAD_ON_STARTUP, \"true\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix1\", \"valuep1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2\", \"valueP2\",\n              \"wt\", \"json\", // need to insure that extra parameters are _not_ preserved (actually happened).\n              \"qt\", \"admin/cores\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String instPath2 = new File(solrHomeDirectory, \"props2\").getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath2,\n              CoreAdminParams.NAME, \"props2\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_1\", \"valuep2_1\",\n              CoreAdminParams.PROPERTY_PREFIX + \"prefix2_2\", \"valueP2_2\",\n              CoreAdminParams.CONFIG, \"solrconfig.xml\",\n              CoreAdminParams.DATA_DIR, \"./dataDirTest\",\n              CoreAdminParams.SCHEMA, \"schema.xml\"),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      // Everything that was in the original XML file should be in the persisted one.\n      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));\n\n      // And the params for the new core should be in the persisted file.\n      TestHarness.validateXPath\n          (\n              locator.xml,\n              \"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']\"\n              , \"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']\"\n              , \"/solr/cores/core[@name='props1' and @transient='true']\"\n              , \"/solr/cores/core[@name='props1' and @loadOnStartup='true']\"\n              , \"/solr/cores/core[@name='props1' and @instanceDir='props1\" + File.separator + \"']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']\"\n              , \"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']\"\n              , \"/solr/cores/core[@name='props2' and @config='solrconfig.xml']\"\n              , \"/solr/cores/core[@name='props2' and @schema='schema.xml']\"\n              , \"/solr/cores/core[@name='props2' and not(@loadOnStartup)]\"\n              , \"/solr/cores/core[@name='props2' and not(@transient)]\"\n              , \"/solr/cores/core[@name='props2' and @instanceDir='\" + instPath2 + \"']\"\n              , \"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']\"\n          );\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a2a443f1eeeee35a11bae58eed4c6f335f5c78e1"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["96a802acd838449b6936d34e464baeeb82f9ef54"],"96a802acd838449b6936d34e464baeeb82f9ef54":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a2a443f1eeeee35a11bae58eed4c6f335f5c78e1":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["96a802acd838449b6936d34e464baeeb82f9ef54"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","37a0f60745e53927c4c876cfe5b5a58170f0646c","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["a2a443f1eeeee35a11bae58eed4c6f335f5c78e1"],"96a802acd838449b6936d34e464baeeb82f9ef54":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"],"a2a443f1eeeee35a11bae58eed4c6f335f5c78e1":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}