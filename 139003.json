{"path":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0aae73ca2eeb899108e9fe36611ddf5a83ec790","date":1378482998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(new File(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(\"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4256bc1b3c94786287ccdfc751230374521843cf","1513361122ebc5ddd6075f633cd77d2345611767","9c348b53523fee77a032d6c031aa5bae3e7f4545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2208f43a9be2ac423812bb93060ad3f37910b24","date":1395263322,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(new File(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(Locale.ROOT, \"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(new File(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(\"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(Paths.get(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(Locale.ROOT, \"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(new File(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(Locale.ROOT, \"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(Paths.get(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(Locale.ROOT, \"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String field = null;\n    int numTerms = DEFAULT_NUMTERMS;\n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    Directory dir = FSDirectory.open(Paths.get(args[0]));\n    \n    Comparator<TermStats> comparator = new DocFreqComparator();\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        comparator = new TotalTermFreqComparator();\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);\n\n    for (int i = 0; i < terms.length; i++) {\n      System.out.printf(Locale.ROOT, \"%s:%s \\t totalTF = %,d \\t docFreq = %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["b2208f43a9be2ac423812bb93060ad3f37910b24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["b2208f43a9be2ac423812bb93060ad3f37910b24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}