{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","commits":[{"id":"6ab99a2487a34179af579c58aee0f6954a54173b","date":1370025444,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","pathOld":"/dev/null","sourceNew":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new udpate handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","sourceNew":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new update handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","sourceOld":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new udpate handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","sourceNew":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new update handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","sourceOld":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new udpate handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testReload().mjava","sourceNew":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new update handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","sourceOld":"  // we need to make sure that the log is informed of a core reload\n  @Test\n  public void testReload() throws Exception {\n    long version = addAndGetVersion(sdoc(\"id\",\"reload1\") , null);\n\n    h.reload();\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    assertU(commit());\n\n    // if we try the optimistic concurrency again, the tlog lookup maps should be clear\n    // and we should go to the index to check the version.  This indirectly tests that\n    // the update log was informed of the reload.  See SOLR-4858\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // a deleteByQuery currently forces open a new realtime reader via the update log.\n    // This also tests that the update log was informed of the new udpate handler.\n\n    deleteByQueryAndGetVersion(\"foo_t:hownowbrowncow\", null);\n\n    version = addAndGetVersion(sdoc(\"id\",\"reload1\", \"_version_\", Long.toString(version)), null);\n\n    // if the update log was not informed of the new update handler, then the old core will\n    // incorrectly be used for some of the operations above and opened searchers\n    // will never be closed.  This used to cause the test framework to fail because of unclosed directory checks.\n    // SolrCore.openNewSearcher was modified to throw an error if the core is closed, resulting in\n    // a faster fail.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ab99a2487a34179af579c58aee0f6954a54173b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6ab99a2487a34179af579c58aee0f6954a54173b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6ab99a2487a34179af579c58aee0f6954a54173b","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["6ab99a2487a34179af579c58aee0f6954a54173b"]},"commit2Childs":{"6ab99a2487a34179af579c58aee0f6954a54173b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ab99a2487a34179af579c58aee0f6954a54173b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}