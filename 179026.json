{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","commits":[{"id":"4215168c7c026cd898f2d98bb6aa5b0df9856696","date":1092688246,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the flow that gets\n            // created by logical expression: apply adjectival(); if that fails,\n            // apply verb() etc\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","sourceNew":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the flow that gets\n            // created by logical expression: apply adjectival(); if that fails,\n            // apply verb() etc\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","sourceOld":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the flow that gets\n            // created by logical expression: apply adjectival(); if that fails,\n            // apply verb() etc\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}