{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] ordinals, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : ordinals[beginIdx - 1];\n    int end = (endIdx == ordinals.length - 1) ? list.size() : ordinals[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(ordinals[i] - middle) - Math.abs(ordinals[middleIdxb] - middle);\n      if (ordinals[i] == ordinals[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && ordinals[middleIdxb] == ordinals[i]);\n        break;\n      }\n    }\n\n    int middlePlace = ordinals[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, ordinals, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, ordinals, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] ordinals, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : ordinals[beginIdx - 1];\n    int end = (endIdx == ordinals.length - 1) ? list.size() : ordinals[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(ordinals[i] - middle) - Math.abs(ordinals[middleIdxb] - middle);\n      if (ordinals[i] == ordinals[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && ordinals[middleIdxb] == ordinals[i]);\n        break;\n      }\n    }\n\n    int middlePlace = ordinals[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, ordinals, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, ordinals, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] ordinals, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : ordinals[beginIdx - 1];\n    int end = (endIdx == ordinals.length - 1) ? list.size() : ordinals[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(ordinals[i] - middle) - Math.abs(ordinals[middleIdxb] - middle);\n      if (ordinals[i] == ordinals[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && ordinals[middleIdxb] == ordinals[i]);\n        break;\n      }\n    }\n\n    int middlePlace = ordinals[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, ordinals, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, ordinals, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}