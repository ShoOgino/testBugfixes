{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","commits":[{"id":"a0e288a70f2f9b7ebd3942d8608636fe6f825894","date":1412362601,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Arrays.asList(files), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Arrays.asList(files), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Arrays.asList(files), IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Arrays.asList(files), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75d243fa001c0783996918dbbe60b55cbaeeff46","date":1422502815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(Arrays.asList(files));\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Arrays.asList(files), IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    createSequenceFile(dir, files[0], (byte) 0, 15, si.getId(), \"suffix\");\n    createSequenceFile(dir, files[1], (byte) 0, 114, si.getId(), \"suffix\");\n    \n    si.setFiles(Arrays.asList(files));\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(Arrays.asList(files));\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testTwoFiles().mjava","sourceNew":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    createSequenceFile(dir, files[0], (byte) 0, 15, si.getId(), \"suffix\");\n    createSequenceFile(dir, files[1], (byte) 0, 114, si.getId(), \"suffix\");\n    \n    si.setFiles(Arrays.asList(files));\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * This test creates compound file based on two files.\n   */\n  public void testTwoFiles() throws IOException {\n    String files[] = { \"_123.d1\", \"_123.d2\" };\n    Directory dir = newDirectory();\n    createSequenceFile(dir, files[0], (byte) 0, 15);\n    createSequenceFile(dir, files[1], (byte) 0, 114);\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(Arrays.asList(files));\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n\n    for (String file : files) {\n      IndexInput expected = dir.openInput(file, newIOContext(random()));\n      IndexInput actual = cfs.openInput(file, newIOContext(random()));\n      assertSameStreams(file, expected, actual);\n      assertSameSeekBehavior(file, expected, actual);\n      expected.close();\n      actual.close();\n    }\n\n    cfs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e288a70f2f9b7ebd3942d8608636fe6f825894"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["9bb9a29a5e71a90295f175df8919802993142c9a"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e288a70f2f9b7ebd3942d8608636fe6f825894":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["75d243fa001c0783996918dbbe60b55cbaeeff46","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","a0e288a70f2f9b7ebd3942d8608636fe6f825894"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e288a70f2f9b7ebd3942d8608636fe6f825894":["9bb9a29a5e71a90295f175df8919802993142c9a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}