{"path":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","commits":[{"id":"e1915a2721a80afb07f9d36cd3108d22a1dfbf7a","date":1484102913,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","sourceNew":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      // we don't need any fields populated, we just need to know if the doc is in the tlog...\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId, null,\n                                                                               Collections.<String>emptySet(), false);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","sourceOld":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SkipExistingDocumentsProcessorFactory.SkipExistingDocumentsUpdateProcessor#doesDocumentExist(BytesRef).mjava","sourceNew":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      // we don't need any fields populated, we just need to know if the doc is in the tlog...\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId, null,\n                                                                               Collections.<String>emptySet(), false);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","sourceOld":"    boolean doesDocumentExist(BytesRef indexedDocId) throws IOException {\n      assert null != indexedDocId;\n\n      SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId);\n      if (oldDoc == RealTimeGetComponent.DELETED) {\n        return false;\n      }\n      if (oldDoc != null) {\n        return true;\n      }\n\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        return searcher.lookupId(indexedDocId) >= 0L;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document from index\", e);\n      } finally {\n        if (newestSearcher != null) {\n          newestSearcher.decref();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["e1915a2721a80afb07f9d36cd3108d22a1dfbf7a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1915a2721a80afb07f9d36cd3108d22a1dfbf7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1915a2721a80afb07f9d36cd3108d22a1dfbf7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e1915a2721a80afb07f9d36cd3108d22a1dfbf7a","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"e1915a2721a80afb07f9d36cd3108d22a1dfbf7a":["415bbbe7da8065dd3c477bdc3c703c6425622998","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}