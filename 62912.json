{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["7530de27b87b961b51f01bd1299b7004d46e8823","52c7e49be259508735752fba88085255014a6ecf"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1d028314cced5858683a1bb4741423d0f934257b","7530de27b87b961b51f01bd1299b7004d46e8823"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["7530de27b87b961b51f01bd1299b7004d46e8823","3394716f52b34ab259ad5247e7595d9f9db6e935"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1d028314cced5858683a1bb4741423d0f934257b"],"52c7e49be259508735752fba88085255014a6ecf":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","22a2e66dfda83847e80095b8693c660742ab3e9c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3394716f52b34ab259ad5247e7595d9f9db6e935","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}