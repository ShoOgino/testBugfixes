{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","pathOld":"/dev/null","sourceNew":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica {}\", badReplica.replica.getName());\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","sourceNew":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica={} from collection={}\", badReplica.replica.getName(), collection);\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica {}\", badReplica.replica.getName());\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica={} from collection={}\", badReplica.replica.getName(), collection);\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica={} from collection={}\", badReplica.replica.getName(), collection);\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#processBadReplicas(String,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private void processBadReplicas(final String collection, final Collection<DownReplica> badReplicas) {\n    for (DownReplica badReplica : badReplicas) {\n      log.debug(\"process down replica={} from collection={}\", badReplica.replica.getName(), collection);\n      String baseUrl = badReplica.replica.getStr(ZkStateReader.BASE_URL_PROP);\n      Long wentBadAtNS = baseUrlForBadNodes.getIfPresent(baseUrl);\n      if (wentBadAtNS == null) {\n        log.warn(\"Replica {} may need to failover.\",\n            badReplica.replica.getName());\n        baseUrlForBadNodes.put(baseUrl, System.nanoTime());\n        \n      } else {\n        \n        long elasped = System.nanoTime() - wentBadAtNS;\n        if (elasped < TimeUnit.NANOSECONDS.convert(waitAfterExpiration, TimeUnit.MILLISECONDS)) {\n          // protect against ZK 'flapping', startup and shutdown\n          log.debug(\"Looks troublesome...continue. Elapsed={}\", elasped + \"ns\");\n        } else {\n          log.debug(\"We need to add a replica. Elapsed={}\", elasped + \"ns\");\n          \n          if (addReplica(collection, badReplica)) {\n            baseUrlForBadNodes.invalidate(baseUrl);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"560c18d71dad43d675158783c3840f8c80d6d39c":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}