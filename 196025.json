{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testTokenType().mjava","commits":[{"id":"0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f","date":1485881767,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testTokenType().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenType() throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    // test that subwords and catenated subwords have\n    // the correct offsets.\n    Token token = new Token(\"foo-bar\", 5, 12);\n    token.setType(\"mytype\");\n    WordDelimiterGraphFilter wdf = new WordDelimiterGraphFilter(new CannedTokenStream(token), DEFAULT_WORD_DELIM_TABLE, flags, null);\n\n    assertTokenStreamContents(wdf, \n                              new String[] {\"foobar\", \"foo\", \"bar\"},\n                              new String[] {\"mytype\", \"mytype\", \"mytype\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testTokenType().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenType() throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    // test that subwords and catenated subwords have\n    // the correct offsets.\n    Token token = new Token(\"foo-bar\", 5, 12);\n    token.setType(\"mytype\");\n    WordDelimiterGraphFilter wdf = new WordDelimiterGraphFilter(new CannedTokenStream(token), DEFAULT_WORD_DELIM_TABLE, flags, null);\n\n    assertTokenStreamContents(wdf, \n                              new String[] {\"foobar\", \"foo\", \"bar\"},\n                              new String[] {\"mytype\", \"mytype\", \"mytype\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47e241984c8185946746fd8e18cff4200659091e","date":1543916862,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testTokenType().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testTokenType().mjava","sourceNew":"  public void testTokenType() throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    // test that subwords and catenated subwords have\n    // the correct offsets.\n    Token token = new Token(\"foo-bar\", 5, 12);\n    token.setType(\"mytype\");\n    WordDelimiterGraphFilter wdf = new WordDelimiterGraphFilter(new CannedTokenStream(token), flags, null);\n\n    assertTokenStreamContents(wdf, \n                              new String[] {\"foobar\", \"foo\", \"bar\"},\n                              new String[] {\"mytype\", \"mytype\", \"mytype\"});\n  }\n\n","sourceOld":"  public void testTokenType() throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    // test that subwords and catenated subwords have\n    // the correct offsets.\n    Token token = new Token(\"foo-bar\", 5, 12);\n    token.setType(\"mytype\");\n    WordDelimiterGraphFilter wdf = new WordDelimiterGraphFilter(new CannedTokenStream(token), DEFAULT_WORD_DELIM_TABLE, flags, null);\n\n    assertTokenStreamContents(wdf, \n                              new String[] {\"foobar\", \"foo\", \"bar\"},\n                              new String[] {\"mytype\", \"mytype\", \"mytype\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f"],"47e241984c8185946746fd8e18cff4200659091e":["0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47e241984c8185946746fd8e18cff4200659091e"]},"commit2Childs":{"0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","47e241984c8185946746fd8e18cff4200659091e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d7d7f85ff84edefe4ae2e2cf895d6760fc0bf4f","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"47e241984c8185946746fd8e18cff4200659091e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}