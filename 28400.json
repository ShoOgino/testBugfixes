{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(stripQuotes(sortItem.getSortKey().toString()))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","sourceNew":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(stripSingleQuotes(stripQuotes(sortItem.getSortKey().toString())))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(stripQuotes(sortItem.getSortKey().toString()))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","sourceNew":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(getSortField(sortItem))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(stripSingleQuotes(stripQuotes(sortItem.getSortKey().toString())))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#sortsEqual(Bucket[],String,List[SortItem]).mjava","sourceNew":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems, Map<String, String> reverseColumnAliases) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(getSortField(sortItem, reverseColumnAliases))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean sortsEqual(Bucket[] buckets, String direction, List<SortItem> sortItems) {\n    if(buckets.length != sortItems.size()) {\n      return false;\n    }\n\n    for(int i=0; i< buckets.length; i++) {\n      Bucket bucket = buckets[i];\n      SortItem sortItem = sortItems.get(i);\n      if(!bucket.toString().equals(getSortField(sortItem))) {\n        return false;\n      }\n\n\n      if(!sortItem.getOrdering().toString().toLowerCase(Locale.getDefault()).contains(direction.toLowerCase(Locale.getDefault()))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["36479872320bb00635cb97ca6757614c88562e1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}