{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#equals(byte[],int,byte[],int,int).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#equals(byte[],int,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  // Since Arrays.equals doesn't implement offsets for equals\n  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(byte[], byte[])\n   */\n  public static boolean equals(byte[] left, int offsetLeft, byte[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#equals(byte[],int,byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#equals(byte[],int,byte[],int,int).mjava","sourceNew":"  // Since Arrays.equals doesn't implement offsets for equals\n  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(byte[], byte[])\n   */\n  public static boolean equals(byte[] left, int offsetLeft, byte[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Since Arrays.equals doesn't implement offsets for equals\n  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(byte[], byte[])\n   */\n  public static boolean equals(byte[] left, int offsetLeft, byte[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}