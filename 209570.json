{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        LightAutomaton a = builder.toLightAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenateLight(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        LightAutomaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        LightAutomaton a = builder.toLightAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenateLight(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        LightAutomaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":null,"sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":null,"sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":null,"sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":null,"sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance &&\n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i, prefix);\n        //System.out.println(\"compute automaton n=\" + i);\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5c84485629d80d203608e8975a1139de9933cc38","89424def13674ea17829b41c5883c54ecc31a132"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["5c84485629d80d203608e8975a1139de9933cc38"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c84485629d80d203608e8975a1139de9933cc38","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["5c84485629d80d203608e8975a1139de9933cc38","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"5c84485629d80d203608e8975a1139de9933cc38":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}