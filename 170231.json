{"path":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testCompareTypesRandomRangeQueries().mjava","commits":[{"id":"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","date":1501089160,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testCompareTypesRandomRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompareTypesRandomRangeQueries() throws Exception {\n    int cardinality = 10000;\n    Map<NumberType,String[]> types = new HashMap<>(); //single and multivalued field types\n    Map<NumberType,String[]> typesMv = new HashMap<>(); // multivalued field types only\n    types.put(NumberType.INTEGER, new String[]{\"ti\", \"ti_dv\", \"ti_ni_dv\", \"i_p\", \"i_ni_p\", \"i_ndv_p\", \"tis\", \"tis_dv\", \"tis_ni_dv\", \"is_p\", \"is_ni_p\", \"is_ndv_p\"});\n    types.put(NumberType.LONG, new String[]{\"tl\", \"tl_dv\", \"tl_ni_dv\", \"l_p\", \"l_ni_p\", \"l_ndv_p\", \"tls\", \"tls_dv\", \"tls_ni_dv\", \"ls_p\", \"ls_ni_p\", \"ls_ndv_p\"});\n    types.put(NumberType.FLOAT, new String[]{\"tf\", \"tf_dv\", \"tf_ni_dv\", \"f_p\", \"f_ni_p\", \"f_ndv_p\", \"tfs\", \"tfs_dv\", \"tfs_ni_dv\", \"fs_p\", \"fs_ni_p\", \"fs_ndv_p\"});\n    types.put(NumberType.DOUBLE, new String[]{\"td\", \"td_dv\", \"td_ni_dv\", \"d_p\", \"d_ni_p\", \"d_ndv_p\", \"tds\", \"tds_dv\", \"tds_ni_dv\", \"ds_p\", \"ds_ni_p\", \"ds_ndv_p\"});\n    types.put(NumberType.DATE, new String[]{\"tdt\", \"tdt_dv\", \"tdt_ni_dv\", \"dt_p\", \"dt_ni_p\", \"dt_ndv_p\", \"tdts\", \"tdts_dv\", \"tdts_ni_dv\", \"dts_p\", \"dts_ni_p\", \"dts_ndv_p\"});\n    typesMv.put(NumberType.INTEGER, new String[]{\"tis\", \"tis_dv\", \"tis_ni_dv\", \"is_p\", \"is_ni_p\", \"is_ndv_p\"});\n    typesMv.put(NumberType.LONG, new String[]{\"tls\", \"tls_dv\", \"tls_ni_dv\", \"ls_p\", \"ls_ni_p\", \"ls_ndv_p\"});\n    typesMv.put(NumberType.FLOAT, new String[]{\"tfs\", \"tfs_dv\", \"tfs_ni_dv\", \"fs_p\", \"fs_ni_p\", \"fs_ndv_p\"});\n    typesMv.put(NumberType.DOUBLE, new String[]{\"tds\", \"tds_dv\", \"tds_ni_dv\", \"ds_p\", \"ds_ni_p\", \"ds_ndv_p\"});\n    typesMv.put(NumberType.DATE, new String[]{\"tdts\", \"tdts_dv\", \"tdts_ni_dv\", \"dts_p\", \"dts_ni_p\", \"dts_ndv_p\"});\n\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      SolrInputDocument document = new SolrInputDocument();\n      document.setField(\"id\", i);\n      for (Map.Entry<NumberType,String[]> entry:types.entrySet()) {\n        NumberType type = entry.getKey();\n        String val = null;\n        List<String> vals = null;\n        switch (type) {\n          case DATE:\n            val = randomDate(cardinality);\n            vals = getRandomDates(random().nextInt(10), cardinality);\n            break;\n          case DOUBLE:\n            val = String.valueOf(randomDouble(cardinality));\n            vals = toStringList(getRandomDoubles(random().nextInt(10), cardinality));\n            break;\n          case FLOAT:\n            val = String.valueOf(randomFloat(cardinality));\n            vals = toStringList(getRandomFloats(random().nextInt(10), cardinality));\n            break;\n          case INTEGER:\n            val = String.valueOf(randomInt(cardinality));\n            vals = toStringList(getRandomInts(random().nextInt(10), cardinality));\n            break;\n          case LONG:\n            val = String.valueOf(randomLong(cardinality));\n            vals = toStringList(getRandomLongs(random().nextInt(10), cardinality));\n            break;\n          default:\n            throw new AssertionError();\n\n        }\n        // SingleValue\n        for (String fieldSuffix:entry.getValue()) {\n          document.setField(\"field_sv_\" + fieldSuffix, val);\n        }\n        //  MultiValue\n        for (String fieldSuffix:typesMv.get(type)) {\n          for (String value:vals) {\n            document.addField(\"field_mv_\" + fieldSuffix, value);\n          }\n        }\n      }\n\n      assertU(adoc(document));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    String[][] possibleTypes = new String[types.size()][];\n    types.values().toArray(possibleTypes);\n    String[][] possibleTypesMv = new String[typesMv.size()][];\n    typesMv.values().toArray(possibleTypesMv);\n    for (int i = 0; i < atLeast(1000); i++) {\n      doTestQuery(cardinality, false, pickRandom(possibleTypes));\n      doTestQuery(cardinality, true, pickRandom(possibleTypesMv));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testCompareTypesRandomRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompareTypesRandomRangeQueries() throws Exception {\n    int cardinality = 10000;\n    Map<NumberType,String[]> types = new HashMap<>(); //single and multivalued field types\n    Map<NumberType,String[]> typesMv = new HashMap<>(); // multivalued field types only\n    types.put(NumberType.INTEGER, new String[]{\"ti\", \"ti_dv\", \"ti_ni_dv\", \"i_p\", \"i_ni_p\", \"i_ndv_p\", \"tis\", \"tis_dv\", \"tis_ni_dv\", \"is_p\", \"is_ni_p\", \"is_ndv_p\"});\n    types.put(NumberType.LONG, new String[]{\"tl\", \"tl_dv\", \"tl_ni_dv\", \"l_p\", \"l_ni_p\", \"l_ndv_p\", \"tls\", \"tls_dv\", \"tls_ni_dv\", \"ls_p\", \"ls_ni_p\", \"ls_ndv_p\"});\n    types.put(NumberType.FLOAT, new String[]{\"tf\", \"tf_dv\", \"tf_ni_dv\", \"f_p\", \"f_ni_p\", \"f_ndv_p\", \"tfs\", \"tfs_dv\", \"tfs_ni_dv\", \"fs_p\", \"fs_ni_p\", \"fs_ndv_p\"});\n    types.put(NumberType.DOUBLE, new String[]{\"td\", \"td_dv\", \"td_ni_dv\", \"d_p\", \"d_ni_p\", \"d_ndv_p\", \"tds\", \"tds_dv\", \"tds_ni_dv\", \"ds_p\", \"ds_ni_p\", \"ds_ndv_p\"});\n    types.put(NumberType.DATE, new String[]{\"tdt\", \"tdt_dv\", \"tdt_ni_dv\", \"dt_p\", \"dt_ni_p\", \"dt_ndv_p\", \"tdts\", \"tdts_dv\", \"tdts_ni_dv\", \"dts_p\", \"dts_ni_p\", \"dts_ndv_p\"});\n    typesMv.put(NumberType.INTEGER, new String[]{\"tis\", \"tis_dv\", \"tis_ni_dv\", \"is_p\", \"is_ni_p\", \"is_ndv_p\"});\n    typesMv.put(NumberType.LONG, new String[]{\"tls\", \"tls_dv\", \"tls_ni_dv\", \"ls_p\", \"ls_ni_p\", \"ls_ndv_p\"});\n    typesMv.put(NumberType.FLOAT, new String[]{\"tfs\", \"tfs_dv\", \"tfs_ni_dv\", \"fs_p\", \"fs_ni_p\", \"fs_ndv_p\"});\n    typesMv.put(NumberType.DOUBLE, new String[]{\"tds\", \"tds_dv\", \"tds_ni_dv\", \"ds_p\", \"ds_ni_p\", \"ds_ndv_p\"});\n    typesMv.put(NumberType.DATE, new String[]{\"tdts\", \"tdts_dv\", \"tdts_ni_dv\", \"dts_p\", \"dts_ni_p\", \"dts_ndv_p\"});\n\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      SolrInputDocument document = new SolrInputDocument();\n      document.setField(\"id\", i);\n      for (Map.Entry<NumberType,String[]> entry:types.entrySet()) {\n        NumberType type = entry.getKey();\n        String val = null;\n        List<String> vals = null;\n        switch (type) {\n          case DATE:\n            val = randomDate(cardinality);\n            vals = getRandomDates(random().nextInt(10), cardinality);\n            break;\n          case DOUBLE:\n            val = String.valueOf(randomDouble(cardinality));\n            vals = toStringList(getRandomDoubles(random().nextInt(10), cardinality));\n            break;\n          case FLOAT:\n            val = String.valueOf(randomFloat(cardinality));\n            vals = toStringList(getRandomFloats(random().nextInt(10), cardinality));\n            break;\n          case INTEGER:\n            val = String.valueOf(randomInt(cardinality));\n            vals = toStringList(getRandomInts(random().nextInt(10), cardinality));\n            break;\n          case LONG:\n            val = String.valueOf(randomLong(cardinality));\n            vals = toStringList(getRandomLongs(random().nextInt(10), cardinality));\n            break;\n          default:\n            throw new AssertionError();\n\n        }\n        // SingleValue\n        for (String fieldSuffix:entry.getValue()) {\n          document.setField(\"field_sv_\" + fieldSuffix, val);\n        }\n        //  MultiValue\n        for (String fieldSuffix:typesMv.get(type)) {\n          for (String value:vals) {\n            document.addField(\"field_mv_\" + fieldSuffix, value);\n          }\n        }\n      }\n\n      assertU(adoc(document));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    String[][] possibleTypes = new String[types.size()][];\n    types.values().toArray(possibleTypes);\n    String[][] possibleTypesMv = new String[typesMv.size()][];\n    typesMv.values().toArray(possibleTypesMv);\n    for (int i = 0; i < atLeast(1000); i++) {\n      doTestQuery(cardinality, false, pickRandom(possibleTypes));\n      doTestQuery(cardinality, true, pickRandom(possibleTypesMv));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}