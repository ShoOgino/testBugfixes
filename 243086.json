{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","commits":[{"id":"bf1c3e657b66c65904354d158dd1cebb302dc8f9","date":1153873200,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws StorageException, InterruptedException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry e = createServerBaseEntry();\n        ServerBaseEntry e1 = createServerBaseEntry();\n        try {\n            storage.updateEntry(e);\n            fail(\"entry does not exist\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n        storage.storeEntry(e);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(e1);\n        ServerBaseEntry e2 = createServerBaseEntry();\n        e2.setId(e.getId());\n        e2.setTitle(new PlainTextConstruct(\"new\"));\n        e2.setUpdated(DateTime.now());\n        storage.updateEntry(e2);\n        ObjectContainer container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry result = (BaseEntry) resultSet.next();\n        assertEquals(\"new\", result.getTitle().getPlainText());\n        assertEquals(\"2\", result.getVersionId());\n        \n        \n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        storage = this.controller.getStorage();\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(0).getId());\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n\n        storage = this.controller.getStorage();\n        storage.storeEntry(e);\n\n        e2.setVersion(5);\n        try {\n            storage.updateEntry(e2);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor,reached));\n\n\n        Thread t1 = getUpdThread(controller, concuEntry, false);\n\n        Thread t2 = getUpdThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here\n         * wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here\n         * wake up the waiting thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n        container.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws StorageException, InterruptedException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        \n\n        try {\n\n            storage.updateEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        ServerBaseEntry e1 = createServerBaseEntry();\n        try {\n            storage.updateEntry(e);\n            fail(\"entry does not exist\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n        storage.storeEntry(e);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(e1);\n        ServerBaseEntry e2 = createServerBaseEntry();\n        e2.setId(e.getId());\n        e2.setTitle(new PlainTextConstruct(\"new\"));\n        e2.setUpdated(DateTime.now());\n        storage.updateEntry(e2);\n        ObjectContainer container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry result = (BaseEntry) resultSet.next();\n        assertEquals(\"new\", result.getTitle().getPlainText());\n        assertEquals(\"2\", result.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        storage = this.controller.getStorage();\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(0).getId());\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n\n        storage = this.controller.getStorage();\n        storage.storeEntry(e);\n\n        e2.setVersion(5);\n        try {\n            storage.updateEntry(e2);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getUpdThread(controller, concuEntry, false);\n\n        Thread t2 = getUpdThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n        container.close();\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws StorageException, InterruptedException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry e = createServerBaseEntry();\n        ServerBaseEntry e1 = createServerBaseEntry();\n        try {\n            storage.updateEntry(e);\n            fail(\"entry does not exist\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n        storage.storeEntry(e);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(e1);\n        ServerBaseEntry e2 = createServerBaseEntry();\n        e2.setId(e.getId());\n        e2.setTitle(new PlainTextConstruct(\"new\"));\n        e2.setUpdated(DateTime.now());\n        storage.updateEntry(e2);\n        ObjectContainer container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry result = (BaseEntry) resultSet.next();\n        assertEquals(\"new\", result.getTitle().getPlainText());\n        assertEquals(\"2\", result.getVersionId());\n        \n        \n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        storage = this.controller.getStorage();\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(0).getId());\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n\n        storage = this.controller.getStorage();\n        storage.storeEntry(e);\n\n        e2.setVersion(5);\n        try {\n            storage.updateEntry(e2);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor,reached));\n\n\n        Thread t1 = getUpdThread(controller, concuEntry, false);\n\n        Thread t2 = getUpdThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here\n         * wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here\n         * wake up the waiting thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n        container.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws StorageException, InterruptedException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        \n\n        try {\n\n            storage.updateEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        ServerBaseEntry e1 = createServerBaseEntry();\n        try {\n            storage.updateEntry(e);\n            fail(\"entry does not exist\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n        storage.storeEntry(e);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(e1);\n        ServerBaseEntry e2 = createServerBaseEntry();\n        e2.setId(e.getId());\n        e2.setTitle(new PlainTextConstruct(\"new\"));\n        e2.setUpdated(DateTime.now());\n        storage.updateEntry(e2);\n        ObjectContainer container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry result = (BaseEntry) resultSet.next();\n        assertEquals(\"new\", result.getTitle().getPlainText());\n        assertEquals(\"2\", result.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        storage = this.controller.getStorage();\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(0).getId());\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n\n        storage = this.controller.getStorage();\n        storage.storeEntry(e);\n\n        e2.setVersion(5);\n        try {\n            storage.updateEntry(e2);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getUpdThread(controller, concuEntry, false);\n\n        Thread t2 = getUpdThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n        container.close();\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws StorageException, InterruptedException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        \n\n        try {\n\n            storage.updateEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        try {\n\n            storage.updateEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        ServerBaseEntry e1 = createServerBaseEntry();\n        try {\n            storage.updateEntry(e);\n            fail(\"entry does not exist\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n        storage.storeEntry(e);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(e1);\n        ServerBaseEntry e2 = createServerBaseEntry();\n        e2.setId(e.getId());\n        e2.setTitle(new PlainTextConstruct(\"new\"));\n        e2.setUpdated(DateTime.now());\n        storage.updateEntry(e2);\n        ObjectContainer container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry result = (BaseEntry) resultSet.next();\n        assertEquals(\"new\", result.getTitle().getPlainText());\n        assertEquals(\"2\", result.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        storage = this.controller.getStorage();\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(0).getId());\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n\n        storage = this.controller.getStorage();\n        storage.storeEntry(e);\n\n        e2.setVersion(5);\n        try {\n            storage.updateEntry(e2);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getUpdThread(controller, concuEntry, false);\n\n        Thread t2 = getUpdThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n        container.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf1c3e657b66c65904354d158dd1cebb302dc8f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["bf1c3e657b66c65904354d158dd1cebb302dc8f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"bf1c3e657b66c65904354d158dd1cebb302dc8f9":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf1c3e657b66c65904354d158dd1cebb302dc8f9"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}