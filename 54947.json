{"path":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  // Replaces old searcher with new one\n  private void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"463af7bb358e7ce24966afdb38783b0f49668ff5","date":1317077562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","sourceNew":"  // Replaces old searcher with new one\n  private synchronized void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":"  // Replaces old searcher with new one\n  private void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abba29aa88f170f3d51899c885b760337dd1c47c","date":1317196921,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","sourceNew":"  // Replaces old searcher with new one - needs to be synced to make close() work\n  private synchronized void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":"  // Replaces old searcher with new one\n  private synchronized void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","sourceNew":"  protected synchronized void swapSearcher(IndexSearcher newSearcher) throws IOException {\n    ensureOpen();\n    final IndexSearcher oldSearcher = currentSearcher;\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":"  // Replaces old searcher with new one - needs to be synced to make close() work\n  private synchronized void swapSearcher(IndexSearcher newSearcher)\n    throws IOException {\n    IndexSearcher oldSearcher = currentSearcher;\n    if (oldSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","sourceNew":"  private synchronized void swapSearcher(IndexSearcher newSearcher) throws IOException {\n    ensureOpen();\n    final IndexSearcher oldSearcher = currentSearcher;\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":"  protected synchronized void swapSearcher(IndexSearcher newSearcher) throws IOException {\n    ensureOpen();\n    final IndexSearcher oldSearcher = currentSearcher;\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#swapSearcher(IndexSearcher).mjava","sourceNew":"  private synchronized void swapSearcher(IndexSearcher newSearcher) throws IOException {\n    ensureOpen();\n    final IndexSearcher oldSearcher = currentSearcher;\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","sourceOld":"  private synchronized void swapSearcher(IndexSearcher newSearcher) throws IOException {\n    ensureOpen();\n    final IndexSearcher oldSearcher = currentSearcher;\n    currentSearcher = newSearcher;\n    release(oldSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"463af7bb358e7ce24966afdb38783b0f49668ff5":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43369d257d14f61a881aa609962ef95e8a334d3a":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["abba29aa88f170f3d51899c885b760337dd1c47c"],"abba29aa88f170f3d51899c885b760337dd1c47c":["463af7bb358e7ce24966afdb38783b0f49668ff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"463af7bb358e7ce24966afdb38783b0f49668ff5":["abba29aa88f170f3d51899c885b760337dd1c47c"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["463af7bb358e7ce24966afdb38783b0f49668ff5"],"43369d257d14f61a881aa609962ef95e8a334d3a":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"606baff722a317c76a92b111d183b54b6e6e5741":["43369d257d14f61a881aa609962ef95e8a334d3a"],"abba29aa88f170f3d51899c885b760337dd1c47c":["606baff722a317c76a92b111d183b54b6e6e5741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}