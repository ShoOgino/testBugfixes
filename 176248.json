{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","commits":[{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private static SegmentReader get(boolean readOnly,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader(readOnly, si);\n    boolean success = false;\n    try {\n      instance.core = new SegmentCoreReaders(instance, si.dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private static SegmentReader get(boolean readOnly,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader(readOnly, si);\n    boolean success = false;\n    try {\n      instance.core = new SegmentCoreReaders(instance, si.dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      instance.openNorms(instance.core.cfsDir, context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private static SegmentReader get(boolean readOnly,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader(readOnly, si);\n    boolean success = false;\n    try {\n      instance.core = new SegmentCoreReaders(instance, si.dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      instance.openNorms(instance.core.cfsDir, context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    boolean success = false;\n    try {\n      core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private static SegmentReader get(boolean readOnly,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader(readOnly, si);\n    boolean success = false;\n    try {\n      instance.core = new SegmentCoreReaders(instance, si.dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":["4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}