{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String baseUrl, final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n            String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"    private String getShardId(final String baseUrl, final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n            String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","sourceNew":"    private String getShardId(String collection, String coreNodeName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String baseUrl, final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n            String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","sourceNew":"    private String getShardId(String collection, String coreNodeName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String baseUrl, final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n            String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","sourceNew":"    private String getShardId(String collection, String coreNodeName) {\n      DocCollection dc = zkStateReader.getClusterState().getCollectionOrNull(collection);\n      if (dc == null) return null;\n      Map<String,Slice> slices = dc.getSlicesMap();\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(String collection, String coreNodeName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","sourceNew":"    private String getShardId(String collection, String coreNodeName) {\n      DocCollection dc = zkStateReader.getClusterState().getCollectionOrNull(collection);\n      if (dc == null) return null;\n      Map<String,Slice> slices = dc.getSlicesMap();\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(String collection, String coreNodeName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","sourceNew":"    private String getShardId(String collection, String coreNodeName) {\n      DocCollection dc = zkStateReader.getClusterState().getCollectionOrNull(collection);\n      return getShardId(dc, coreNodeName);\n    }\n\n","sourceOld":"    private String getShardId(String collection, String coreNodeName) {\n      DocCollection dc = zkStateReader.getClusterState().getCollectionOrNull(collection);\n      if (dc == null) return null;\n      Map<String,Slice> slices = dc.getSlicesMap();\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            String cnn = replica.getName();\n            if (coreNodeName.equals(cnn)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04","344b0840364d990b29b97467bfcc766ff8325d11","29f5eaf296600e1665151e7929d42a3cbe22e481"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["29f5eaf296600e1665151e7929d42a3cbe22e481","344b0840364d990b29b97467bfcc766ff8325d11"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","29f5eaf296600e1665151e7929d42a3cbe22e481"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","96ea64d994d340044e0d57aeb6a5871539d10ca5","344b0840364d990b29b97467bfcc766ff8325d11"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}