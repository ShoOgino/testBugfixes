{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","commits":[{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","pathOld":"/dev/null","sourceNew":"  // See  SOLR-12013. We should report something back if the configset has mysteriously disappeared.\n  private void testNoConfigset() throws Exception {\n    String configSet = \"delete_config\";\n\n    final String collection = \"deleted_collection\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      copyConfigUp(TEST_PATH().resolve(\"configsets\"), \"cloud-minimal\", configSet, client.getZkHost());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", collection);\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"collection.configName\", configSet);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      waitForCollection(cloudClient.getZkStateReader(), collection, 1);\n      waitForRecoveriesToFinish(collection, false);\n\n      // Now try deleting the configset and doing a clusterstatus.\n      String parent = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSet;\n      deleteThemAll(client.getZkStateReader().getZkClient(), parent);\n      client.getZkStateReader().forciblyRefreshAllClusterStateSlow();\n\n      final CollectionAdminRequest.ClusterStatus req = CollectionAdminRequest.getClusterStatus();\n      NamedList<Object> rsp = client.request(req);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(\"Testing to insure collections are returned\", collections.get(COLLECTION_NAME1));\n      assertNull(\"Should have failed to find: \" + collection + \" because the configset was delted. \", collections.get(collection));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f4495376415b0dd65f3aa2e20924227590b185","date":1585078460,"type":3,"author":"mariemat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","sourceNew":"  // See  SOLR-12013. We should report something back if the configset has mysteriously disappeared.\n  private void testNoConfigset() throws Exception {\n    String configSet = \"delete_config\";\n\n    final String collection = \"deleted_collection\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      copyConfigUp(TEST_PATH().resolve(\"configsets\"), \"cloud-minimal\", configSet, client.getZkHost());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", collection);\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"collection.configName\", configSet);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      waitForCollection(cloudClient.getZkStateReader(), collection, 1);\n      waitForRecoveriesToFinish(collection, false);\n\n      // Now try deleting the configset and doing a clusterstatus.\n      String parent = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSet;\n      deleteThemAll(client.getZkStateReader().getZkClient(), parent);\n      client.getZkStateReader().forciblyRefreshAllClusterStateSlow();\n\n      final CollectionAdminRequest.ClusterStatus req = CollectionAdminRequest.getClusterStatus();\n      NamedList<Object> rsp = client.request(req);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(\"Testing to insure collections are returned\", collections.get(COLLECTION_NAME1));\n    }\n  }\n\n","sourceOld":"  // See  SOLR-12013. We should report something back if the configset has mysteriously disappeared.\n  private void testNoConfigset() throws Exception {\n    String configSet = \"delete_config\";\n\n    final String collection = \"deleted_collection\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      copyConfigUp(TEST_PATH().resolve(\"configsets\"), \"cloud-minimal\", configSet, client.getZkHost());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", collection);\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"collection.configName\", configSet);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      waitForCollection(cloudClient.getZkStateReader(), collection, 1);\n      waitForRecoveriesToFinish(collection, false);\n\n      // Now try deleting the configset and doing a clusterstatus.\n      String parent = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSet;\n      deleteThemAll(client.getZkStateReader().getZkClient(), parent);\n      client.getZkStateReader().forciblyRefreshAllClusterStateSlow();\n\n      final CollectionAdminRequest.ClusterStatus req = CollectionAdminRequest.getClusterStatus();\n      NamedList<Object> rsp = client.request(req);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(\"Testing to insure collections are returned\", collections.get(COLLECTION_NAME1));\n      assertNull(\"Should have failed to find: \" + collection + \" because the configset was delted. \", collections.get(collection));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testNoConfigset().mjava","sourceNew":"  // See  SOLR-12013. We should report something back if the configset has mysteriously disappeared.\n  private void testNoConfigset() throws Exception {\n    String configSet = \"delete_config\";\n\n    final String collection = \"deleted_collection\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      copyConfigUp(TEST_PATH().resolve(\"configsets\"), \"cloud-minimal\", configSet, client.getZkHost());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", collection);\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"collection.configName\", configSet);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      waitForCollection(cloudClient.getZkStateReader(), collection, 1);\n      waitForRecoveriesToFinish(collection, false);\n\n      // Now try deleting the configset and doing a clusterstatus.\n      String parent = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSet;\n      deleteThemAll(client.getZkStateReader().getZkClient(), parent);\n      client.getZkStateReader().forciblyRefreshAllClusterStateSlow();\n\n      final CollectionAdminRequest.ClusterStatus req = CollectionAdminRequest.getClusterStatus();\n      NamedList<Object> rsp = client.request(req);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(\"Testing to insure collections are returned\", collections.get(COLLECTION_NAME1));\n    }\n  }\n\n","sourceOld":"  // See  SOLR-12013. We should report something back if the configset has mysteriously disappeared.\n  private void testNoConfigset() throws Exception {\n    String configSet = \"delete_config\";\n\n    final String collection = \"deleted_collection\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      copyConfigUp(TEST_PATH().resolve(\"configsets\"), \"cloud-minimal\", configSet, client.getZkHost());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", collection);\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"collection.configName\", configSet);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      waitForCollection(cloudClient.getZkStateReader(), collection, 1);\n      waitForRecoveriesToFinish(collection, false);\n\n      // Now try deleting the configset and doing a clusterstatus.\n      String parent = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSet;\n      deleteThemAll(client.getZkStateReader().getZkClient(), parent);\n      client.getZkStateReader().forciblyRefreshAllClusterStateSlow();\n\n      final CollectionAdminRequest.ClusterStatus req = CollectionAdminRequest.getClusterStatus();\n      NamedList<Object> rsp = client.request(req);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(\"Testing to insure collections are returned\", collections.get(COLLECTION_NAME1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a6f4495376415b0dd65f3aa2e20924227590b185"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6f4495376415b0dd65f3aa2e20924227590b185":["4949836c6e83246ddba8997472e3333f40986c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4949836c6e83246ddba8997472e3333f40986c8c"],"4949836c6e83246ddba8997472e3333f40986c8c":["a6f4495376415b0dd65f3aa2e20924227590b185"],"a6f4495376415b0dd65f3aa2e20924227590b185":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}