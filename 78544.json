{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionsDuringCommit().mjava","sourceNew":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionsDuringCommit().mjava","sourceNew":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13da30f639d32ecea364df402e59e74730f3d089","date":1301013279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1214\n  public void testExceptionsDuringCommit() throws Throwable {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInCommit failure = new FailOnlyInCommit();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    dir.failOn(failure);\n    try {\n      w.close();\n      fail();\n    } catch (IOException ioe) {\n      fail(\"expected only RuntimeException\");\n    } catch (RuntimeException re) {\n      // Expected\n    }\n    assertTrue(failure.fail1 && failure.fail2);\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      // FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n          Field.Index.ANALYZED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"_1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"_1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"_1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"_1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"_1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"_1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(dir.fileExists(\"_1.fnx\"));\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertFalse(dir.fileExists(\"_1.fnx\"));\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["319624eb66a10b717d3e66af448543e7dc5c479d"],"efb7a19703a037c29e30440260d393500febc1f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"13da30f639d32ecea364df402e59e74730f3d089":["1224a4027481acce15495b03bce9b48b93b42722"],"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","13da30f639d32ecea364df402e59e74730f3d089"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["13da30f639d32ecea364df402e59e74730f3d089"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85a883878c0af761245ab048babc63d099f835f3","13da30f639d32ecea364df402e59e74730f3d089"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["13da30f639d32ecea364df402e59e74730f3d089","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"319624eb66a10b717d3e66af448543e7dc5c479d":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["efb7a19703a037c29e30440260d393500febc1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"85a883878c0af761245ab048babc63d099f835f3":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3cc749c053615f5871f3b95715fe292f34e70a53":["319624eb66a10b717d3e66af448543e7dc5c479d"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"13da30f639d32ecea364df402e59e74730f3d089":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1224a4027481acce15495b03bce9b48b93b42722"],"319624eb66a10b717d3e66af448543e7dc5c479d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["13da30f639d32ecea364df402e59e74730f3d089"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}