{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc2469a10cffdebd38d207761a32c90c12316b52","date":1337861944,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53","76923f6a33f2c4bec7f584e3f251261afe7ea276","31f025ae60076ae95274433f3fe8e6ace2857a87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf819846fb54a635eb297e36e7c6196d67f8273","date":1349447995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af57d1da0dceaad2640da652698505d6a621ce5","date":1358285398,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByteFake(fi.getDocValuesType());\n        final byte nrm = docValuesByteFake(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4c8573e7baf60b3f39be994bd2f2c36385d03b","date":1358869567,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByteFake(fi.getDocValuesType());\n        final byte nrm = docValuesByteFake(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByteFake(fi.getDocValuesType());\n        final byte nrm = docValuesByteFake(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, CODEC_NAME, FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1af57d1da0dceaad2640da652698505d6a621ce5":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cc2469a10cffdebd38d207761a32c90c12316b52"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1bf819846fb54a635eb297e36e7c6196d67f8273","4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["1af57d1da0dceaad2640da652698505d6a621ce5"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"cc2469a10cffdebd38d207761a32c90c12316b52":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"1af57d1da0dceaad2640da652698505d6a621ce5":["4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["cc2469a10cffdebd38d207761a32c90c12316b52"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["1af57d1da0dceaad2640da652698505d6a621ce5","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cc2469a10cffdebd38d207761a32c90c12316b52":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}