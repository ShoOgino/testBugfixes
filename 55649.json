{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION), IOContext.READONCE);\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION), IOContext.READONCE);\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION), IOContext.READONCE);\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInput,Directory,String).mjava","sourceNew":null,"sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  public static final Map<String,FileEntry> readEntries(IndexInput stream, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final int firstInt = stream.readVInt();\n    if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n      IndexInput input = null;\n      try {\n        input = dir.openInput(IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name), \"\",\n            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION), IOContext.READONCE);\n        final int readInt = input.readInt(); // unused right now\n        assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n        final int numEntries = input.readVInt();\n        final Map<String, FileEntry> mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n            numEntries);\n        for (int i = 0; i < numEntries; i++) {\n          final FileEntry fileEntry = new FileEntry();\n          mapping.put(input.readString(), fileEntry);\n          fileEntry.offset = input.readLong();\n          fileEntry.length = input.readLong();\n        }\n        return mapping;\n      } finally {\n        IOUtils.closeSafely(true, input);\n      }\n    }\n    \n    // TODO remove once 3.x is not supported anymore\n    return readLegacyEntries(stream, firstInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67aadace85f701c87a4e0721eedcda25d8415a70"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}