{"path":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","commits":[{"id":"752049b8e30557f067592844bff40caaea288062","date":1490707105,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/RuleSorter.Session#applyRules().mjava","sourceNew":"    /**Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    /**Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    /**Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"752049b8e30557f067592844bff40caaea288062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["752049b8e30557f067592844bff40caaea288062"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["b59075a857a3d25d834f6f408491b40845b8ced0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"752049b8e30557f067592844bff40caaea288062":["b59075a857a3d25d834f6f408491b40845b8ced0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["752049b8e30557f067592844bff40caaea288062","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}