{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","commits":[{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new BytesRefIterator() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new BytesRefIterator() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new BytesRefIterator() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new BytesRefIterator() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new BytesRefIterator() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, a.length, b, 0, a.length);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(a.length, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#newMultiDimIntSetQuery(String,int,int...).mjava","sourceNew":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return Arrays.compareUnsigned(a, 0, a.length, b, 0, a.length);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: in the future, if there is demand for real usage, we can \"graduate\" this test-only query factory as IntPoint.newMultiSetQuery or\n  // something (and same for other XXXPoint classes):\n  private static Query newMultiDimIntSetQuery(String field, final int numDims, int... valuesIn) throws IOException {\n    if (valuesIn.length % numDims != 0) {\n      throw new IllegalArgumentException(\"incongruent number of values: valuesIn.length=\" + valuesIn.length + \" but numDims=\" + numDims);\n    }\n\n    // Pack all values:\n    byte[][] packedValues = new byte[valuesIn.length / numDims][];\n    for(int i=0;i<packedValues.length;i++) {\n      byte[] packedValue = new byte[numDims * Integer.BYTES];\n      packedValues[i] = packedValue;\n      for(int dim=0;dim<numDims;dim++) {\n        IntPoint.encodeDimension(valuesIn[i*numDims+dim], packedValue, dim*Integer.BYTES);\n      }\n    }\n\n    // Sort:\n    Arrays.sort(packedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, a.length, b, 0, a.length);\n                  }\n                });\n\n    final BytesRef value = new BytesRef();\n    value.length = numDims * Integer.BYTES;\n\n    return new PointInSetQuery(field,\n                               numDims,\n                               Integer.BYTES,\n                               new PointInSetQuery.Stream() {\n                                 int upto;\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto >= packedValues.length) {\n                                     return null;\n                                   }\n                                   value.bytes = packedValues[upto];\n                                   upto++;\n                                   return value;\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == numDims * Integer.BYTES;\n        StringBuilder sb = new StringBuilder();\n        for(int dim=0;dim<numDims;dim++) {\n          if (dim > 0) {\n            sb.append(',');\n          }\n          sb.append(Integer.toString(IntPoint.decodeDimension(value, dim*Integer.BYTES)));\n        }\n\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9ccce763ea3c7e51eff749e584c061d8744b72d"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","b9ccce763ea3c7e51eff749e584c061d8744b72d"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}