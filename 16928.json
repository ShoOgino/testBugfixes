{"path":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(LeafReader).mjava","sourceNew":"  private static void assertSorted(LeafReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","sourceOld":"  private static void assertSorted(LeafReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3f89986d299512248eedcbdc3530fbbbb5235e3","date":1435447038,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader).mjava","sourceNew":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","sourceOld":"  private static void assertSorted(LeafReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3f89986d299512248eedcbdc3530fbbbb5235e3"]},"commit2Childs":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a3f89986d299512248eedcbdc3530fbbbb5235e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}