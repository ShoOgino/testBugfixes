{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRangeQueryEndpointTO().mjava","commits":[{"id":"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3","date":1494775882,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRangeQueryEndpointTO().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryEndpointTO() throws Exception {\n    Analyzer a = new MockAnalyzer(random());\n    assertQueryEquals(\"[to TO to]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[to TO TO]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO to]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO TO]\", a, \"[to TO to]\");\n\n    assertQueryEquals(\"[\\\"TO\\\" TO \\\"TO\\\"]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[\\\"TO\\\" TO TO]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO \\\"TO\\\"]\", a, \"[to TO to]\");\n\n    assertQueryEquals(\"[to TO xx]\", a, \"[to TO xx]\");\n    assertQueryEquals(\"[\\\"TO\\\" TO xx]\", a, \"[to TO xx]\");\n    assertQueryEquals(\"[TO TO xx]\", a, \"[to TO xx]\");\n\n    assertQueryEquals(\"[xx TO to]\", a, \"[xx TO to]\");\n    assertQueryEquals(\"[xx TO \\\"TO\\\"]\", a, \"[xx TO to]\");\n    assertQueryEquals(\"[xx TO TO]\", a, \"[xx TO to]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRangeQueryEndpointTO().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryEndpointTO() throws Exception {\n    Analyzer a = new MockAnalyzer(random());\n    assertQueryEquals(\"[to TO to]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[to TO TO]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO to]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO TO]\", a, \"[to TO to]\");\n\n    assertQueryEquals(\"[\\\"TO\\\" TO \\\"TO\\\"]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[\\\"TO\\\" TO TO]\", a, \"[to TO to]\");\n    assertQueryEquals(\"[TO TO \\\"TO\\\"]\", a, \"[to TO to]\");\n\n    assertQueryEquals(\"[to TO xx]\", a, \"[to TO xx]\");\n    assertQueryEquals(\"[\\\"TO\\\" TO xx]\", a, \"[to TO xx]\");\n    assertQueryEquals(\"[TO TO xx]\", a, \"[to TO xx]\");\n\n    assertQueryEquals(\"[xx TO to]\", a, \"[xx TO to]\");\n    assertQueryEquals(\"[xx TO \\\"TO\\\"]\", a, \"[xx TO to]\");\n    assertQueryEquals(\"[xx TO TO]\", a, \"[xx TO to]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}