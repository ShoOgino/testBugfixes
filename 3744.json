{"path":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","commits":[{"id":"401b0b7bbdbac0027e5b44890c4131d808ec2c9d","date":1260774382,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"/dev/null","sourceNew":"    public NamedList buildResponse() {\n      NamedList response = new SimpleOrderedMap();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList fieldterms = new SimpleOrderedMap();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList response = new SimpleOrderedMap();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList fieldterms = new SimpleOrderedMap();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList response = new SimpleOrderedMap();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList fieldterms = new SimpleOrderedMap();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}