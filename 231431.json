{"path":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","commits":[{"id":"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","date":1423420267,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = System.nanoTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = System.nanoTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = System.nanoTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = System.nanoTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = System.nanoTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n\n    at.minimumWaitBetweenActions();\n\n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n\n    if (random().nextBoolean()) Thread.sleep(100);\n\n    at.minimumWaitBetweenActions();\n\n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n    start = timeSource.getTime();\n\n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n\n    Thread.sleep(random().nextInt(1000));\n\n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n\n    at.minimumWaitBetweenActions();\n\n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n\n    if (random().nextBoolean()) Thread.sleep(100);\n\n    at.minimumWaitBetweenActions();\n\n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n    start = timeSource.getTime();\n\n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n\n    Thread.sleep(random().nextInt(1000));\n\n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n    \n    at.minimumWaitBetweenActions();\n    \n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n    \n    if (random().nextBoolean()) Thread.sleep(100);\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n    \n    start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n    \n    Thread.sleep(random().nextInt(1000));\n    \n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTimeNs();\n\n    at.minimumWaitBetweenActions();\n\n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTimeNs() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n\n    if (random().nextBoolean()) Thread.sleep(100);\n\n    at.minimumWaitBetweenActions();\n\n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTimeNs() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n    start = timeSource.getTimeNs();\n\n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n\n    Thread.sleep(random().nextInt(1000));\n\n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTimeNs() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000);\n    long start = timeSource.getTime();\n\n    at.minimumWaitBetweenActions();\n\n    // should be no wait\n    assertTrue(TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS) < 1000);\n    at.markAttemptingAction();\n\n    if (random().nextBoolean()) Thread.sleep(100);\n\n    at.minimumWaitBetweenActions();\n\n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n    start = timeSource.getTime();\n\n    at.markAttemptingAction();\n    at.minimumWaitBetweenActions();\n\n    Thread.sleep(random().nextInt(1000));\n\n    elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n\n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["560c18d71dad43d675158783c3840f8c80d6d39c","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}