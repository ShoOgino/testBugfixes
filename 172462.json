{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","commits":[{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n     this(indexAnalyzer.getVersion(), dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n     this(indexAnalyzer.getVersion(), dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273","date":1420568044,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n    this(dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild, DEFAULT_ALL_TERMS_REQUIRED, DEFAULT_HIGHLIGHT);\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["19e497fe4da591a79332da97681b8017d9c61165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"19e497fe4da591a79332da97681b8017d9c61165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19e497fe4da591a79332da97681b8017d9c61165"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"19e497fe4da591a79332da97681b8017d9c61165":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}