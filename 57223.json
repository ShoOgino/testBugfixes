{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(Transition,int).mjava","commits":[{"id":"d6e1f11b7318d917420b640db7b796381c39c7c8","date":1578907651,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(Transition,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for the next transition that matches the provided label, assuming determinism.\n   * <p>\n   * This method is similar to {@link #step(int, int)} but is used more efficiently\n   * when iterating over multiple transitions from the same source state. It keeps\n   * the latest reached transition index in {@code transition.transitionUpto} so\n   * the next call to this method can continue from there instead of restarting\n   * from the first transition.\n   *\n   * @param transition The transition to start the lookup from (inclusive, using its\n   *                   {@link Transition#source} and {@link Transition#transitionUpto}).\n   *                   It is updated with the matched transition;\n   *                   or with {@link Transition#dest} = -1 if no match.\n   * @param label      The codepoint to look up.\n   * @return The destination state; or -1 if no matching outgoing transition.\n   */\n  public int next(Transition transition, int label) {\n    return next(transition.source, transition.transitionUpto, label, transition);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(Transition,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for the next transition that matches the provided label, assuming determinism.\n   * <p>\n   * This method is similar to {@link #step(int, int)} but is used more efficiently\n   * when iterating over multiple transitions from the same source state. It keeps\n   * the latest reached transition index in {@code transition.transitionUpto} so\n   * the next call to this method can continue from there instead of restarting\n   * from the first transition.\n   *\n   * @param transition The transition to start the lookup from (inclusive, using its\n   *                   {@link Transition#source} and {@link Transition#transitionUpto}).\n   *                   It is updated with the matched transition;\n   *                   or with {@link Transition#dest} = -1 if no match.\n   * @param label      The codepoint to look up.\n   * @return The destination state; or -1 if no matching outgoing transition.\n   */\n  public int next(Transition transition, int label) {\n    return next(transition.source, transition.transitionUpto, label, transition);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6e1f11b7318d917420b640db7b796381c39c7c8"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6e1f11b7318d917420b640db7b796381c39c7c8"]},"commit2Childs":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e1f11b7318d917420b640db7b796381c39c7c8","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}