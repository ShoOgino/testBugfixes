{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) throws IOException {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) throws IOException {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) throws IOException {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":["f25edd3dc1b39b51d0fe10053586711547ccce1d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) throws IOException {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider.PerDirPayloadProcessor#getReaderProcessor(AtomicReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public ReaderPayloadProcessor getReaderProcessor(AtomicReader reader) {\n      if (reader instanceof SegmentReader) {\n        return processors.get(((SegmentReader) reader).directory());\n      } else {\n        throw new UnsupportedOperationException(\"This shouldnot happen in this test: Reader is no SegmentReader\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc124b3b129ef11a255212f3af482b771c5b3a6c"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","bc124b3b129ef11a255212f3af482b771c5b3a6c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}