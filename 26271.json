{"path":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    } \n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    } \n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    } \n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    } \n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    } \n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}