{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","commits":[{"id":"16fa358573e3c2508728b3c7c438a8c19a3f0ae4","date":1482846144,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","pathOld":"/dev/null","sourceNew":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Creating new http client, config:\" + config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","pathOld":"/dev/null","sourceNew":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Creating new http client, config:\" + config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","sourceNew":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Creating new http client, config:\" + config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","sourceOld":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Creating new http client, config:\" + config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#createClient(SolrParams,PoolingHttpClientConnectionManager,boolean,HttpRequestExecutor).mjava","sourceNew":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Creating new http client, config: {}\", config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","sourceOld":"  public static CloseableHttpClient createClient(final SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager, HttpRequestExecutor httpRequestExecutor)  {\n    final ModifiableSolrParams config = new ModifiableSolrParams(params);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Creating new http client, config:\" + config);\n    }\n\n    cm.setMaxTotal(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000));\n    cm.setDefaultMaxPerRoute(params.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000));\n    cm.setValidateAfterInactivity(Integer.getInteger(VALIDATE_AFTER_INACTIVITY, VALIDATE_AFTER_INACTIVITY_DEFAULT));\n\n\n    HttpClientBuilder newHttpClientBuilder = HttpClientBuilder.create();\n\n    if (sharedConnectionManager) {\n      newHttpClientBuilder.setConnectionManagerShared(true);\n    } else {\n      newHttpClientBuilder.setConnectionManagerShared(false);\n    }\n\n    ConnectionKeepAliveStrategy keepAliveStrat = new ConnectionKeepAliveStrategy() {\n      @Override\n      public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n        // we only close connections based on idle time, not ttl expiration\n        return -1;\n      }\n    };\n\n    if (httpClientBuilder.getAuthSchemeRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultAuthSchemeRegistry(httpClientBuilder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry());\n    }\n    if (httpClientBuilder.getCookieSpecRegistryProvider() != null) {\n      newHttpClientBuilder.setDefaultCookieSpecRegistry(httpClientBuilder.getCookieSpecRegistryProvider().getCookieSpecRegistry());\n    }\n    if (httpClientBuilder.getCredentialsProviderProvider() != null) {\n      newHttpClientBuilder.setDefaultCredentialsProvider(httpClientBuilder.getCredentialsProviderProvider().getCredentialsProvider());\n    }\n\n    newHttpClientBuilder.addInterceptorLast(new DynamicInterceptor());\n\n    newHttpClientBuilder = newHttpClientBuilder.setKeepAliveStrategy(keepAliveStrat)\n        .evictIdleConnections((long) Integer.getInteger(EVICT_IDLE_CONNECTIONS, EVICT_IDLE_CONNECTIONS_DEFAULT), TimeUnit.MILLISECONDS);\n\n    if (httpRequestExecutor != null)  {\n      newHttpClientBuilder.setRequestExecutor(httpRequestExecutor);\n    }\n\n    HttpClientBuilder builder = setupBuilder(newHttpClientBuilder, params);\n\n    HttpClient httpClient = builder.setConnectionManager(cm).build();\n\n    assert ObjectReleaseTracker.track(httpClient);\n    return (CloseableHttpClient) httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}