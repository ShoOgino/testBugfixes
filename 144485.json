{"path":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  private static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3558b4e832e5cf103b3de1f29fa823d34215c6fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4e43054891cc560e3263228457adcf713377815","date":1180809106,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  private static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c456afad2c053cc57744c8339d929b11fc1dd5f","date":1242570808,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3558b4e832e5cf103b3de1f29fa823d34215c6fc","date":1245943733,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    int percentUsed = (int)(((double)(used)/(double)runtime.maxMemory())*100);\n\n    \n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add( \"free\",  FileUtils.byteCountToDisplaySize( runtime.freeMemory()  ) );\n    mem.add( \"total\", FileUtils.byteCountToDisplaySize( runtime.totalMemory() ) );\n    mem.add( \"max\",   FileUtils.byteCountToDisplaySize( runtime.maxMemory()   ) );\n    mem.add( \"used\",  FileUtils.byteCountToDisplaySize( used ) + \" (%\"+percentUsed+\")\");\n    jvm.add( \"memory\", mem );\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":["2070bf73ffa1039a505000f99ea245884ff19e11"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c456afad2c053cc57744c8339d929b11fc1dd5f":["d4e43054891cc560e3263228457adcf713377815"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4e43054891cc560e3263228457adcf713377815":["2070bf73ffa1039a505000f99ea245884ff19e11"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3558b4e832e5cf103b3de1f29fa823d34215c6fc":["5c456afad2c053cc57744c8339d929b11fc1dd5f"],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3558b4e832e5cf103b3de1f29fa823d34215c6fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5c456afad2c053cc57744c8339d929b11fc1dd5f":["3558b4e832e5cf103b3de1f29fa823d34215c6fc"],"d4e43054891cc560e3263228457adcf713377815":["5c456afad2c053cc57744c8339d929b11fc1dd5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["d4e43054891cc560e3263228457adcf713377815"],"3558b4e832e5cf103b3de1f29fa823d34215c6fc":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}