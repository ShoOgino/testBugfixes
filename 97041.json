{"path":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory,Collection[String]).mjava","commits":[{"id":"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4","date":1269599681,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Copy given files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   * <p><b>NOTE:</b> implementations can check if destination directory is of the same type as 'this' and perform optimized copy</p>\n   *\n   * @param to        destination directory\n   * @param filenames file names to be copied\n   */\n  public void copyTo(Directory to, Collection<String> filenames) throws IOException {\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (String filename : filenames) {\n      IndexOutput os = null;\n      IndexInput is = null;\n      IOException priorException = null;\n      try {\n        // create file in dest directory\n        os = to.createOutput(filename);\n        // read current file\n        is = openInput(filename);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int) (len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } catch (IOException ioe) {\n        priorException = ioe;\n      } finally {\n        IOUtils.closeSafely(priorException, os, is);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copyTo(Directory,Collection[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Copy given files of this directory to destination directory. All conflicting files at destination are overwritten</p>\n   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException. </p>\n   * <p><b>NOTE:</b> implementations can check if destination directory is of the same type as 'this' and perform optimized copy</p>\n   *\n   * @param to        destination directory\n   * @param filenames file names to be copied\n   */\n  public void copyTo(Directory to, Collection<String> filenames) throws IOException {\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (String filename : filenames) {\n      IndexOutput os = null;\n      IndexInput is = null;\n      IOException priorException = null;\n      try {\n        // create file in dest directory\n        os = to.createOutput(filename);\n        // read current file\n        is = openInput(filename);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int) (len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } catch (IOException ioe) {\n        priorException = ioe;\n      } finally {\n        IOUtils.closeSafely(priorException, os, is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"]},"commit2Childs":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}