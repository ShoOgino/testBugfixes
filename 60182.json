{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41BinaryDocValues#get(int,BytesRef).mjava","commits":[{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41BinaryDocValues#get(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void get(int docId, BytesRef result) {\n    try {\n      final long offset;\n      final int length;\n      if (index == null) {\n        offset = size * ((long) docId);\n        length = size;\n      } else {\n        offset = index.get(docId);\n        data.seek(baseOffset + offset);\n        // Safe to do 1+docID because we write sentinel at the end:\n        final long nextOffset = index.get(1 + docId);\n        length = (int) (nextOffset - offset);\n      }\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\n          \"failed to get value for docID: \" + docId, ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41BinaryDocValues#get(int,BytesRef).mjava","sourceNew":null,"sourceOld":"  public void get(int docId, BytesRef result) {\n    try {\n      final long offset;\n      final int length;\n      if (index == null) {\n        offset = size * ((long) docId);\n        length = size;\n      } else {\n        offset = index.get(docId);\n        data.seek(baseOffset + offset);\n        // Safe to do 1+docID because we write sentinel at the end:\n        final long nextOffset = index.get(1 + docId);\n        length = (int) (nextOffset - offset);\n      }\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\n          \"failed to get value for docID: \" + docId, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["746e3645169db50c8f53252b30d6bc9ac21dea7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}