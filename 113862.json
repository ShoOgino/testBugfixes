{"path":"src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","commits":[{"id":"920a0686ed72437773f441d7d5088d3aff98f6cb","date":1250805909,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"/dev/null","sourceNew":"  public String parseArg() throws ParseException {\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws ParseException {\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"920a0686ed72437773f441d7d5088d3aff98f6cb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}