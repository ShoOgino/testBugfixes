{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd481e052acd20adf5f30c4b525f33109b8ace13","date":1317074611,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"max(10,3,8,7,5,4)\", Math.max(Math.max(Math.max(Math.max(Math.max(10,3),8),7),5),4));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"min(10,3,8,7,5,4)\", Math.min(Math.min(Math.min(Math.min(Math.min(10,3),8),7),5),4));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"dd481e052acd20adf5f30c4b525f33109b8ace13":["c26f00b574427b55127e869b935845554afde1fa"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["dd481e052acd20adf5f30c4b525f33109b8ace13","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["dd481e052acd20adf5f30c4b525f33109b8ace13"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0141f86b1794b911ab8e3eac773bf583e5cf784"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd481e052acd20adf5f30c4b525f33109b8ace13":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["dd481e052acd20adf5f30c4b525f33109b8ace13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f0141f86b1794b911ab8e3eac773bf583e5cf784","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}