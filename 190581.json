{"path":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","commits":[{"id":"20065f48f840771dec27aa4ef3931a927025cbfb","date":1269013387,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98a8a68e6714cb8742c790308b9f5180d63417d4","date":1272554039,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9","date":1282860326,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"772ec76ce74eb6151f7fc632838bcd9b11e3fe10","date":1287159930,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      log.error(\"REQUEST FAILED: \" + req.getParamString());\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ecf675d0329553a95cfb31b4254120aa5bf2f39","date":1287248879,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      log.error(\"REQUEST FAILED: \" + req.getParamString());\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"772ec76ce74eb6151f7fc632838bcd9b11e3fe10":["8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9"],"20065f48f840771dec27aa4ef3931a927025cbfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b09c7419b92e982a901698cb401ce22ac35e4b04"],"d20d5e40789b1c42f4f926e3174b271256c43657":["7ecf675d0329553a95cfb31b4254120aa5bf2f39"],"8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["98a8a68e6714cb8742c790308b9f5180d63417d4","7ecf675d0329553a95cfb31b4254120aa5bf2f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["7ecf675d0329553a95cfb31b4254120aa5bf2f39"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["20065f48f840771dec27aa4ef3931a927025cbfb"],"7ecf675d0329553a95cfb31b4254120aa5bf2f39":["772ec76ce74eb6151f7fc632838bcd9b11e3fe10"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9","7ecf675d0329553a95cfb31b4254120aa5bf2f39"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"772ec76ce74eb6151f7fc632838bcd9b11e3fe10":["7ecf675d0329553a95cfb31b4254120aa5bf2f39"],"20065f48f840771dec27aa4ef3931a927025cbfb":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9":["772ec76ce74eb6151f7fc632838bcd9b11e3fe10","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20065f48f840771dec27aa4ef3931a927025cbfb"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["8ee64fe110d7ad3ba967e05a18218d79eeb2bfd9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7ecf675d0329553a95cfb31b4254120aa5bf2f39":["d20d5e40789b1c42f4f926e3174b271256c43657","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b09c7419b92e982a901698cb401ce22ac35e4b04","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}