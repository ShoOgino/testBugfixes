{"path":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","commits":[{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,BitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return rnd;\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  BitSet addClause(BooleanQuery bq, BitSet result) {\n    final BitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new DocIdBitSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = (BitSet)rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,BitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return rnd;\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  BitSet addClause(BooleanQuery bq, BitSet result) {\n    final BitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new DocIdBitSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = (BitSet)rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new FixedBitDocIdSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return rnd;\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new BitDocIdSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new FixedBitDocIdSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new BitDocIdSet(rnd);\n      }\n      @Override\n      public String toString(String field) {\n        return \"randomBitSetFilter\";\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new BitDocIdSet(rnd);\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new BitSetFilter(rnd));\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (LeafReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n        return new BitDocIdSet(rnd);\n      }\n      @Override\n      public String toString(String field) {\n        return \"randomBitSetFilter\";\n      }\n    });\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","52ce7e961a8217faac8128e3c8fe67819eefdde9","6620df8541b174097b1133a4fc370adb2e570524","1326054a8d3aa66382d49decc7f330955c9c6f71","a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery.Builder,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#addClause(BooleanQuery,FixedBitSet).mjava","sourceNew":"  FixedBitSet addClause(BooleanQuery.Builder bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new BitSetFilter(rnd));\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","sourceOld":"  FixedBitSet addClause(BooleanQuery bq, FixedBitSet result) {\n    final FixedBitSet rnd = sets[random().nextInt(sets.length)];\n    Query q = new ConstantScoreQuery(new BitSetFilter(rnd));\n    bq.add(q, BooleanClause.Occur.MUST);\n    if (validate) {\n      if (result==null) result = rnd.clone();\n      else result.and(rnd);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8249072f13ea4354ab7635c2d7a59cc682806dab":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","80c55596a764e2d397e982828e75fcac5ce430a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}