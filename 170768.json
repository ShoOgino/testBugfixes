{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}