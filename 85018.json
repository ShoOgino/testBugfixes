{"path":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/UserDictionaryTest#testLookup().mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/UserDictionaryTest#testLookup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLookup() throws IOException {\n    UserDictionary dictionary = TestKoreanTokenizer.readDict();\n    String s = \"세종\";\n    char[] sArray = s.toCharArray();\n    List<Integer> wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    s = \"세종시\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(2, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    Dictionary.Morpheme[] decompound = dictionary.getMorphemes(wordIds.get(1), sArray, 0, s.length());\n    assertTrue(decompound.length == 2);\n    assertEquals(decompound[0].posTag, POS.Tag.NNG);\n    assertEquals(decompound[0].surfaceForm, \"세종\");\n    assertEquals(decompound[1].posTag, POS.Tag.NNG);\n    assertEquals(decompound[1].surfaceForm, \"시\");\n\n    s = \"c++\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/UserDictionaryTest#testLookup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLookup() throws IOException {\n    UserDictionary dictionary = TestKoreanTokenizer.readDict();\n    String s = \"세종\";\n    char[] sArray = s.toCharArray();\n    List<Integer> wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    s = \"세종시\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(2, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    Dictionary.Morpheme[] decompound = dictionary.getMorphemes(wordIds.get(1), sArray, 0, s.length());\n    assertTrue(decompound.length == 2);\n    assertEquals(decompound[0].posTag, POS.Tag.NNG);\n    assertEquals(decompound[0].surfaceForm, \"세종\");\n    assertEquals(decompound[1].posTag, POS.Tag.NNG);\n    assertEquals(decompound[1].surfaceForm, \"시\");\n\n    s = \"c++\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9f7831922bb899baba6064894c8ebb795cdee2","date":1566842943,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/UserDictionaryTest#testLookup().mjava","pathOld":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/UserDictionaryTest#testLookup().mjava","sourceNew":"  @Test\n  public void testLookup() throws IOException {\n    UserDictionary dictionary = TestKoreanTokenizer.readDict();\n    String s = \"세종\";\n    char[] sArray = s.toCharArray();\n    List<Integer> wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    s = \"세종시\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(2, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    Dictionary.Morpheme[] decompound = dictionary.getMorphemes(wordIds.get(1), sArray, 0, s.length());\n    assertNotNull(decompound);\n    assertEquals(2, decompound.length);\n    assertEquals(decompound[0].posTag, POS.Tag.NNG);\n    assertEquals(decompound[0].surfaceForm, \"세종\");\n    assertEquals(decompound[1].posTag, POS.Tag.NNG);\n    assertEquals(decompound[1].surfaceForm, \"시\");\n\n    s = \"c++\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n  }\n\n","sourceOld":"  @Test\n  public void testLookup() throws IOException {\n    UserDictionary dictionary = TestKoreanTokenizer.readDict();\n    String s = \"세종\";\n    char[] sArray = s.toCharArray();\n    List<Integer> wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    s = \"세종시\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(2, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n\n    Dictionary.Morpheme[] decompound = dictionary.getMorphemes(wordIds.get(1), sArray, 0, s.length());\n    assertTrue(decompound.length == 2);\n    assertEquals(decompound[0].posTag, POS.Tag.NNG);\n    assertEquals(decompound[0].surfaceForm, \"세종\");\n    assertEquals(decompound[1].posTag, POS.Tag.NNG);\n    assertEquals(decompound[1].surfaceForm, \"시\");\n\n    s = \"c++\";\n    sArray = s.toCharArray();\n    wordIds = dictionary.lookup(sArray, 0, s.length());\n    assertEquals(1, wordIds.size());\n    assertNull(dictionary.getMorphemes(wordIds.get(0), sArray, 0, s.length()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c6453827f947004a68ad9db7418781e9df2f660":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}