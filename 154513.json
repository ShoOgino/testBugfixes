{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","commits":[{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.numDocs();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["379c1e8147f491f226438f941a2ebb48900791c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f8eef1c31c85a347feac1f2df4c177fe9f03a","date":1243971479,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.numDocs();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d6be147c89de7996054b96873a638b6adc5cea1","date":1244667566,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(i);\n        distances.put(i+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n      i = bits.nextSetBit(i+1);\n      \n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","bugFix":null,"bugIntro":["379c1e8147f491f226438f941a2ebb48900791c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379c1e8147f491f226438f941a2ebb48900791c8","date":1244994435,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n\n    TermDocs td = reader.termDocs(null);\n    while(td.next()) {\n      int doc = td.doc();\n      \n      String sx = latIndex[doc];\n      String sy = lngIndex[doc];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(doc);\n        distances.put(doc+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(i);\n        distances.put(i+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n      i = bits.nextSetBit(i+1);\n      \n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","bugFix":["2d6be147c89de7996054b96873a638b6adc5cea1","0584ee2be458044f19041ac184df00c69c632b4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fe82b6af0f490fe9a473a5315847479e78f73f","date":1247758686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n\n    TermDocs td = reader.termDocs(null);\n    while(td.next()) {\n      int doc = td.doc();\n      \n      double x = latIndex[doc];\n      double y = lngIndex[doc];\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(doc);\n        distances.put(doc+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n\n    TermDocs td = reader.termDocs(null);\n    while(td.next()) {\n      int doc = td.doc();\n      \n      String sx = latIndex[doc];\n      String sy = lngIndex[doc];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(doc);\n        distances.put(doc+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.maxDoc();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    long start = System.currentTimeMillis();\n    double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n\n    TermDocs td = reader.termDocs(null);\n    while(td.next()) {\n      int doc = td.doc();\n      \n      double x = latIndex[doc];\n      double y = lngIndex[doc];\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n   // why was i storing all distances again?\n      if (d < distance){\n        bits.set(doc);\n        distances.put(doc+ nextOffset, d); // include nextOffset for multi segment reader  \n      }\n    }\n    int size = bits.cardinality();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    long end = System.currentTimeMillis();\n    log.fine(\"Bits 1: Time taken : \"+ (end - start) + \n            \", results : \"+ distances.size() + \n            \", cached : \"+ cdistance.size() +\n            \", incoming size: \"+ size+\n            \", nextOffset: \"+ nextOffset);\n    \n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d6be147c89de7996054b96873a638b6adc5cea1":["fa0f8eef1c31c85a347feac1f2df4c177fe9f03a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"379c1e8147f491f226438f941a2ebb48900791c8":["2d6be147c89de7996054b96873a638b6adc5cea1"],"fa0f8eef1c31c85a347feac1f2df4c177fe9f03a":["0584ee2be458044f19041ac184df00c69c632b4d"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["379c1e8147f491f226438f941a2ebb48900791c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2d6be147c89de7996054b96873a638b6adc5cea1":["379c1e8147f491f226438f941a2ebb48900791c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0584ee2be458044f19041ac184df00c69c632b4d"],"379c1e8147f491f226438f941a2ebb48900791c8":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"fa0f8eef1c31c85a347feac1f2df4c177fe9f03a":["2d6be147c89de7996054b96873a638b6adc5cea1"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["fa0f8eef1c31c85a347feac1f2df4c177fe9f03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}