{"path":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.get(term, 0, length) != null);\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.put(saved, Boolean.TRUE);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.get(term, 0, length) != null);\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.put(saved, Boolean.TRUE);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.get(term, 0, length) != null);\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.put(saved, Boolean.TRUE);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.contains(term, 0, length));\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.add(saved);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.get(term, 0, length) != null);\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.put(saved, Boolean.TRUE);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.buffer();\n      final int length = termAttribute.length();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.contains(term, 0, length));\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.add(saved);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.termBuffer();\n      final int length = termAttribute.termLength();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.contains(term, 0, length));\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.add(saved);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42fd6cf39f8ec69cf682e3f653bdbdeed8504e85","date":1272966943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.buffer();\n      final int length = termAttribute.length();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.contains(term, 0, length));\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.add(saved);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      final char term[] = termAttribute.buffer();\n      final int length = termAttribute.length();\n      final int posIncrement = posIncAttribute.getPositionIncrement();\n      \n      if (posIncrement > 0) {\n        previous.clear();\n      }\n      \n      boolean duplicate = (posIncrement == 0 && previous.contains(term, 0, length));\n      \n      // clone the term, and add to the set of seen terms.\n      char saved[] = new char[length];\n      System.arraycopy(term, 0, saved, 0, length);\n      previous.add(saved);\n      \n      if (!duplicate) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"42fd6cf39f8ec69cf682e3f653bdbdeed8504e85":["d085fb336a7208eea2214e5ffcc803960819b60b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42fd6cf39f8ec69cf682e3f653bdbdeed8504e85"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["d085fb336a7208eea2214e5ffcc803960819b60b"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"42fd6cf39f8ec69cf682e3f653bdbdeed8504e85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d085fb336a7208eea2214e5ffcc803960819b60b":["42fd6cf39f8ec69cf682e3f653bdbdeed8504e85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}