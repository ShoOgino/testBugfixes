{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86bebfb26e60bc1320d15779cb22b9e9dd53d163","date":1345932716,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86bebfb26e60bc1320d15779cb22b9e9dd53d163":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86bebfb26e60bc1320d15779cb22b9e9dd53d163"],"770342641f7b505eaa8dccdc666158bff2419109":["86bebfb26e60bc1320d15779cb22b9e9dd53d163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"86bebfb26e60bc1320d15779cb22b9e9dd53d163":["05a14b2611ead08655a2b2bdc61632eb31316e57","770342641f7b505eaa8dccdc666158bff2419109"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["86bebfb26e60bc1320d15779cb22b9e9dd53d163","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}