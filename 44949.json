{"path":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","commits":[{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = TestCharTermAttributeImpl.assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = TestCharTermAttributeImpl.assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"/dev/null","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}