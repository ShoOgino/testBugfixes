{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","commits":[{"id":"d7d9cc55f861840a92a2bda7a9985ec2e2485902","date":1399828429,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String,DocValuesType).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField,\n                                                                      DocValuesType dvType) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String,DocValuesType).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField,\n                                                                      DocValuesType dvType) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String,DocValuesType).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField,\n                                                                      DocValuesType dvType) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":["d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(FirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> DistinctValuesCollector<T> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                                                             String groupField,\n                                                                                                                             String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (DistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (DistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(FirstPassGroupingCollector[T],String,String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable]_createDistinctCountCollector(AbstractFirstPassGroupingCollector[T],String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> DistinctValuesCollector<T> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                                                             String groupField,\n                                                                                                                             String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (DistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (DistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable> AbstractDistinctValuesCollector<AbstractDistinctValuesCollector.GroupCount<T>> createDistinctCountCollector(AbstractFirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                      String groupField,\n                                                                      String countField) throws IOException {\n    Random random = random();\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      return (AbstractDistinctValuesCollector) new FunctionDistinctValuesCollector(new HashMap<>(), new BytesRefFieldSource(groupField), new BytesRefFieldSource(countField), (Collection) searchGroups);\n    } else {\n      return (AbstractDistinctValuesCollector) new TermDistinctValuesCollector(groupField, countField, (Collection) searchGroups);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["f7558b5077dd4abd457be151475f13b541f4f13e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20e94e61fe5291647346b70437617e6b6c370408"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["20e94e61fe5291647346b70437617e6b6c370408","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f7558b5077dd4abd457be151475f13b541f4f13e","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8","d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}