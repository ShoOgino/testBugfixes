{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n      for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n        if (statsField.getSchemaField() != null && statsField.getSchemaField().getType().isPointField() && !statsField.getSchemaField().hasDocValues()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"Can't calculate stats on a PointField without docValues\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n      for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n        if (statsField.getSchemaField() != null && statsField.getSchemaField().getType().isPointField() && !statsField.getSchemaField().hasDocValues()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"Can't calculate stats on a PointField without docValues\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS, false)) {\n      rb.setNeedDocSet(true);\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n      for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n        if (statsField.getSchemaField() != null && statsField.getSchemaField().getType().isPointField() && !statsField.getSchemaField().hasDocValues()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Can't calculate stats on a PointField without docValues\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(StatsParams.STATS,false)) {\n      rb.setNeedDocSet( true );\n      rb.doStats = true;\n      rb._statsInfo = new StatsInfo(rb);\n      for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n        if (statsField.getSchemaField() != null && statsField.getSchemaField().getType().isPointField() && !statsField.getSchemaField().hasDocValues()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"Can't calculate stats on a PointField without docValues\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"610c97b96420e614c67797fd43822ebc1d4b7ee2":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46dc9ac8b3e748407baaef82453138ff3974480c":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["46dc9ac8b3e748407baaef82453138ff3974480c"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["610c97b96420e614c67797fd43822ebc1d4b7ee2","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"610c97b96420e614c67797fd43822ebc1d4b7ee2":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"46dc9ac8b3e748407baaef82453138ff3974480c":["ba33781da68babcaa5828121b443d3eb5c9d8480","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}