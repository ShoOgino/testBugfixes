{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","commits":[{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader, int)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader, int)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader, int)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader, int)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public static boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException {\n    assert buffer.buffer.length >= 2;\n    if (numChars < 2 || numChars > buffer.buffer.length) {\n      throw new IllegalArgumentException(\"numChars must be >= 2 and <= the buffer size\");\n    }\n    final char[] charBuffer = buffer.buffer;\n    buffer.offset = 0;\n    final int offset;\n\n    // Install the previously saved ending high surrogate:\n    if (buffer.lastTrailingHighSurrogate != 0) {\n      charBuffer[0] = buffer.lastTrailingHighSurrogate;\n      buffer.lastTrailingHighSurrogate = 0;\n      offset = 1;\n    } else {\n      offset = 0;\n    }\n\n    final int read = readFully(reader, charBuffer, offset, numChars - offset);\n\n    buffer.length = offset + read;\n    final boolean result = buffer.length == numChars;\n    if (buffer.length < numChars) {\n      // We failed to fill the buffer. Even if the last char is a high\n      // surrogate, there is nothing we can do\n      return result;\n    }\n\n    if (Character.isHighSurrogate(charBuffer[buffer.length - 1])) {\n      buffer.lastTrailingHighSurrogate = charBuffer[--buffer.length];\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public static boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException {\n    assert buffer.buffer.length >= 2;\n    if (numChars < 2 || numChars > buffer.buffer.length) {\n      throw new IllegalArgumentException(\"numChars must be >= 2 and <= the buffer size\");\n    }\n    final char[] charBuffer = buffer.buffer;\n    buffer.offset = 0;\n    final int offset;\n\n    // Install the previously saved ending high surrogate:\n    if (buffer.lastTrailingHighSurrogate != 0) {\n      charBuffer[0] = buffer.lastTrailingHighSurrogate;\n      buffer.lastTrailingHighSurrogate = 0;\n      offset = 1;\n    } else {\n      offset = 0;\n    }\n\n    final int read = readFully(reader, charBuffer, offset, numChars - offset);\n\n    buffer.length = offset + read;\n    final boolean result = buffer.length == numChars;\n    if (buffer.length < numChars) {\n      // We failed to fill the buffer. Even if the last char is a high\n      // surrogate, there is nothing we can do\n      return result;\n    }\n\n    if (Character.isHighSurrogate(charBuffer[buffer.length - 1])) {\n      buffer.lastTrailingHighSurrogate = charBuffer[--buffer.length];\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public static boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException {\n    assert buffer.buffer.length >= 2;\n    if (numChars < 2 || numChars > buffer.buffer.length) {\n      throw new IllegalArgumentException(\"numChars must be >= 2 and <= the buffer size\");\n    }\n    final char[] charBuffer = buffer.buffer;\n    buffer.offset = 0;\n    final int offset;\n\n    // Install the previously saved ending high surrogate:\n    if (buffer.lastTrailingHighSurrogate != 0) {\n      charBuffer[0] = buffer.lastTrailingHighSurrogate;\n      buffer.lastTrailingHighSurrogate = 0;\n      offset = 1;\n    } else {\n      offset = 0;\n    }\n\n    final int read = readFully(reader, charBuffer, offset, numChars - offset);\n\n    buffer.length = offset + read;\n    final boolean result = buffer.length == numChars;\n    if (buffer.length < numChars) {\n      // We failed to fill the buffer. Even if the last char is a high\n      // surrogate, there is nothing we can do\n      return result;\n    }\n\n    if (Character.isHighSurrogate(charBuffer[buffer.length - 1])) {\n      buffer.lastTrailingHighSurrogate = charBuffer[--buffer.length];\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public static boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException {\n    assert buffer.buffer.length >= 2;\n    if (numChars < 2 || numChars > buffer.buffer.length) {\n      throw new IllegalArgumentException(\"numChars must be >= 2 and <= the buffer size\");\n    }\n    final char[] charBuffer = buffer.buffer;\n    buffer.offset = 0;\n    final int offset;\n\n    // Install the previously saved ending high surrogate:\n    if (buffer.lastTrailingHighSurrogate != 0) {\n      charBuffer[0] = buffer.lastTrailingHighSurrogate;\n      buffer.lastTrailingHighSurrogate = 0;\n      offset = 1;\n    } else {\n      offset = 0;\n    }\n\n    final int read = readFully(reader, charBuffer, offset, numChars - offset);\n\n    buffer.length = offset + read;\n    final boolean result = buffer.length == numChars;\n    if (buffer.length < numChars) {\n      // We failed to fill the buffer. Even if the last char is a high\n      // surrogate, there is nothing we can do\n      return result;\n    }\n\n    if (Character.isHighSurrogate(charBuffer[buffer.length - 1])) {\n      buffer.lastTrailingHighSurrogate = charBuffer[--buffer.length];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read <code>numChars</code>\n   * characters into the {@link CharacterBuffer}, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to <code>numChars</code>.\n   * In case code points can span across 2 java characters, this method may\n   * only fill <code>numChars - 1</code> characters in order not to split in\n   * the middle of a surrogate pair, even if there are remaining characters in\n   * the {@link Reader}.\n   * <p>\n   * This method guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * <p>\n   * A return value of <code>false</code> means that this method call exhausted\n   * the reader, but there may be some bytes which have been read, which can be\n   * verified by checking whether <code>buffer.getLength() &gt; 0</code>.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @param numChars\n   *          the number of chars to read\n   * @return <code>false</code> if and only if reader.read returned -1 while trying to fill the buffer\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader, int numChars) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["379db3ad24c4f0214f30a122265a6d6be003a99d","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}