{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","sourceNew":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          return makeNormalizedFeaturesAndScore();\n        }\n\n","sourceOld":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight.ModelScorer.SparseModelScorer#score().mjava","sourceNew":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          return makeNormalizedFeaturesAndScore();\n        }\n\n","sourceOld":"        @Override\n        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          // If target doc we wanted to advance to matches the actual doc\n          // the underlying features advanced to, perform the feature\n          // calculations,\n          // otherwise just continue with the model's scoring process with empty\n          // features.\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ef8d46ad3265812d247126beb45b283763afee"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}