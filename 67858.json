{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56be5c9792e4a329cf6468240a4f8ff532f426c","date":1382600931,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb13dd414f655a70c821300dea007cb565533e03","date":1397838390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":["fb13dd414f655a70c821300dea007cb565533e03"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if ((lenientFieldInfoCheck && fieldNumber < 0) || (!lenientFieldInfoCheck && infos.fieldInfo(fieldNumber) == null)) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene45DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb13dd414f655a70c821300dea007cb565533e03":["e56be5c9792e4a329cf6468240a4f8ff532f426c"],"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["fb13dd414f655a70c821300dea007cb565533e03"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["fb13dd414f655a70c821300dea007cb565533e03","0567bdc5c86c94ced64201187cfcef2417d76dda"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11a746437bc5c0a0b3df0337ed249c387c812871"],"b7605579001505896d48b07160075a5c8b8e128e":["fb13dd414f655a70c821300dea007cb565533e03","0567bdc5c86c94ced64201187cfcef2417d76dda"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0567bdc5c86c94ced64201187cfcef2417d76dda","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"fb13dd414f655a70c821300dea007cb565533e03":["0567bdc5c86c94ced64201187cfcef2417d76dda","a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["4cc45c615dbb82bf79d5f9550286098367874fbf","a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e56be5c9792e4a329cf6468240a4f8ff532f426c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["fb13dd414f655a70c821300dea007cb565533e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}