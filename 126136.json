{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","commits":[{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map,boolean,boolean).mjava","sourceNew":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(String name, Map map, boolean excludeOuter, boolean isFirstVal) throws IOException {\n    int sz = map.size();\n\n    if (!excludeOuter) {\n      startTag(\"lst\", name, sz<=0);\n      incLevel();\n    }\n\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n\n    if (!excludeOuter) {\n      decLevel();\n      if (sz > 0) {\n        if (doIndent) indent();\n        writer.write(\"</lst>\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c26f00b574427b55127e869b935845554afde1fa":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}