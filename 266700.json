{"path":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#doProcess(Record,InputStream).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#doProcess(Record,InputStream).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean doProcess(Record record, InputStream inputStream) {\n      Parser parser = detectParser(record);\n      if (parser == null) {\n        return false;\n      }\n      \n      ParseContext parseContext = new ParseContext();\n      \n      // necessary for gzipped files or tar files, etc! copied from TikaCLI\n      parseContext.set(Parser.class, parser);\n      \n      Metadata metadata = new Metadata();\n      for (Entry<String, Object> entry : record.getFields().entries()) {\n        metadata.add(entry.getKey(), entry.getValue().toString());\n      }\n\n      SolrContentHandler handler = solrContentHandlerFactory.createSolrContentHandler(metadata, solrParams, schema);\n      \n      try {\n        inputStream = TikaInputStream.get(inputStream);\n\n        ContentHandler parsingHandler = handler;\n        StringWriter debugWriter = null;\n        if (LOG.isTraceEnabled()) {\n          debugWriter = new StringWriter();\n          ContentHandler serializer = new XMLSerializer(debugWriter, new OutputFormat(\"XML\", \"UTF-8\", true));\n          parsingHandler = new TeeContentHandler(parsingHandler, serializer);\n        }\n\n        // String xpathExpr = \"/xhtml:html/xhtml:body/xhtml:div/descendant:node()\";\n        if (xpathExpr != null) {\n          Matcher matcher = PARSER.parse(xpathExpr);\n          parsingHandler = new MatchingContentHandler(parsingHandler, matcher);\n        }\n\n        try {\n          parser.parse(inputStream, parsingHandler, metadata, parseContext);\n        } catch (IOException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (SAXException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (TikaException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        }\n        \n        LOG.trace(\"debug XML doc: {}\", debugWriter);\n      } finally {\n        if (inputStream != null) {\n          Closeables.closeQuietly(inputStream);\n        }\n      }\n      \n      SolrInputDocument doc = handler.newDocument();\n      LOG.debug(\"solr doc: {}\", doc);      \n      Record outputRecord = toRecord(doc);\n      return getChild().process(outputRecord);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#doProcess(Record,InputStream).mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#doProcess(Record,InputStream).mjava","sourceNew":"    @Override\n    protected boolean doProcess(Record record, InputStream inputStream) {\n      Parser parser = detectParser(record);\n      if (parser == null) {\n        return false;\n      }\n      \n      ParseContext parseContext = new ParseContext();\n      \n      // necessary for gzipped files or tar files, etc! copied from TikaCLI\n      parseContext.set(Parser.class, parser);\n      \n      Metadata metadata = new Metadata();\n      for (Entry<String, Object> entry : record.getFields().entries()) {\n        metadata.add(entry.getKey(), entry.getValue().toString());\n      }\n\n      SolrContentHandler handler = solrContentHandlerFactory.createSolrContentHandler(metadata, solrParams, schema);\n      \n      try {\n        inputStream = TikaInputStream.get(inputStream);\n\n        ContentHandler parsingHandler = handler;\n        StringWriter debugWriter = null;\n        if (LOG.isTraceEnabled()) {\n          debugWriter = new StringWriter();\n          ContentHandler serializer = new XMLSerializer(debugWriter, new OutputFormat(\"XML\", \"UTF-8\", true));\n          parsingHandler = new TeeContentHandler(parsingHandler, serializer);\n        }\n\n        // String xpathExpr = \"/xhtml:html/xhtml:body/xhtml:div/descendant:node()\";\n        if (xpathExpr != null) {\n          Matcher matcher = PARSER.parse(xpathExpr);\n          parsingHandler = new MatchingContentHandler(parsingHandler, matcher);\n        }\n\n        try {\n          parser.parse(inputStream, parsingHandler, metadata, parseContext);\n        } catch (IOException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (SAXException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (TikaException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        }\n        \n        LOG.trace(\"debug XML doc: {}\", debugWriter);\n      } finally {\n        if (inputStream != null) {\n          Closeables.closeQuietly(inputStream);\n        }\n      }\n      \n      SolrInputDocument doc = handler.newDocument();\n      LOG.debug(\"solr doc: {}\", doc);      \n      Record outputRecord = toRecord(doc);\n      return getChild().process(outputRecord);\n    }\n\n","sourceOld":"    @Override\n    protected boolean doProcess(Record record, InputStream inputStream) {\n      Parser parser = detectParser(record);\n      if (parser == null) {\n        return false;\n      }\n      \n      ParseContext parseContext = new ParseContext();\n      \n      // necessary for gzipped files or tar files, etc! copied from TikaCLI\n      parseContext.set(Parser.class, parser);\n      \n      Metadata metadata = new Metadata();\n      for (Entry<String, Object> entry : record.getFields().entries()) {\n        metadata.add(entry.getKey(), entry.getValue().toString());\n      }\n\n      SolrContentHandler handler = solrContentHandlerFactory.createSolrContentHandler(metadata, solrParams, schema);\n      \n      try {\n        inputStream = TikaInputStream.get(inputStream);\n\n        ContentHandler parsingHandler = handler;\n        StringWriter debugWriter = null;\n        if (LOG.isTraceEnabled()) {\n          debugWriter = new StringWriter();\n          ContentHandler serializer = new XMLSerializer(debugWriter, new OutputFormat(\"XML\", \"UTF-8\", true));\n          parsingHandler = new TeeContentHandler(parsingHandler, serializer);\n        }\n\n        // String xpathExpr = \"/xhtml:html/xhtml:body/xhtml:div/descendant:node()\";\n        if (xpathExpr != null) {\n          Matcher matcher = PARSER.parse(xpathExpr);\n          parsingHandler = new MatchingContentHandler(parsingHandler, matcher);\n        }\n\n        try {\n          parser.parse(inputStream, parsingHandler, metadata, parseContext);\n        } catch (IOException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (SAXException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        } catch (TikaException e) {\n          throw new MorphlineRuntimeException(\"Cannot parse\", e);\n        }\n        \n        LOG.trace(\"debug XML doc: {}\", debugWriter);\n      } finally {\n        if (inputStream != null) {\n          Closeables.closeQuietly(inputStream);\n        }\n      }\n      \n      SolrInputDocument doc = handler.newDocument();\n      LOG.debug(\"solr doc: {}\", doc);      \n      Record outputRecord = toRecord(doc);\n      return getChild().process(outputRecord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}