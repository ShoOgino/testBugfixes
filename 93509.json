{"path":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor.RandomNestedDocModel#recursiveCheckChildQueryOfAllParents(List[String]).mjava","commits":[{"id":"0b5e0da3b576580fb2128e87467fa5f579ca2c33","date":1599081383,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor.RandomNestedDocModel#recursiveCheckChildQueryOfAllParents(List[String]).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * recursively check path permutations using <code>*:*</code> inner query, asserting that the \n     * only docs matched have paths that include the specified path as a (strict) prefix\n     *\n     * (using <code>*:*</code> as our inner query keeps the validation simple and also helps stress out \n     * risk of matching incorrect docs if the 'of' param is wrong)\n     *\n     * @return total number of queries checked (assuming no assertion failures)\n     */\n    public int recursiveCheckChildQueryOfAllParents(List<String> parent_path) {\n      final String p = joinPath(parent_path);\n      final int expectedMatches = numDocsDescendentFromPath.getOrDefault(p, 0);\n      assertQ(req(childQueryMaker(p, \"*:*\"),\n                  \"rows\", \"9999\",\n                  \"_trace_path_tested\", p,\n                  \"fl\", \"test_path_s\",\n                  \"indent\", \"true\")\n              , \"//result/@numFound=\"+expectedMatches\n              , \"count(//doc)=\"+expectedMatches\n              , \"count(//doc/str[@name='test_path_s'][starts-with(., '\"+p+\"')])=\"+expectedMatches\n              );\n      int numChecked = 1;\n\n      // no point in recursing on the current path if we already have no results found...\n      if (0 < expectedMatches) {\n        for (String next : PATH_ELEMENTS) {\n          final List<String> next_path = new ArrayList<>(parent_path);\n          next_path.add(next);\n          numChecked += recursiveCheckChildQueryOfAllParents(next_path);\n        }\n      }\n      return numChecked;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}