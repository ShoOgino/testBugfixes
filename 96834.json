{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","commits":[{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","pathOld":"/dev/null","sourceNew":"  // currently only used by assert? clean up and make real check?\n  // either its a segment suffix (_X_Y) or its a parseable generation\n  // TODO: this is very confusing how ReadersAndUpdates passes generations via\n  // this mechanism, maybe add 'generation' explicitly to ctor create the 'actual suffix' here?\n  private boolean assertSegmentSuffix(String segmentSuffix) {\n    assert segmentSuffix != null;\n    if (!segmentSuffix.isEmpty()) {\n      int numParts = segmentSuffix.split(\"_\").length;\n      if (numParts == 2) {\n        return true;\n      } else if (numParts == 1) {\n        Long.parseLong(segmentSuffix, Character.MAX_RADIX);\n        return true;\n      }\n      return false; // invalid\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","sourceNew":"  // currently only used by assert? clean up and make real check?\n  // either it's a segment suffix (_X_Y) or it's a parseable generation\n  // TODO: this is very confusing how ReadersAndUpdates passes generations via\n  // this mechanism, maybe add 'generation' explicitly to ctor create the 'actual suffix' here?\n  private boolean assertSegmentSuffix(String segmentSuffix) {\n    assert segmentSuffix != null;\n    if (!segmentSuffix.isEmpty()) {\n      int numParts = segmentSuffix.split(\"_\").length;\n      if (numParts == 2) {\n        return true;\n      } else if (numParts == 1) {\n        Long.parseLong(segmentSuffix, Character.MAX_RADIX);\n        return true;\n      }\n      return false; // invalid\n    }\n    return true;\n  }\n\n","sourceOld":"  // currently only used by assert? clean up and make real check?\n  // either its a segment suffix (_X_Y) or its a parseable generation\n  // TODO: this is very confusing how ReadersAndUpdates passes generations via\n  // this mechanism, maybe add 'generation' explicitly to ctor create the 'actual suffix' here?\n  private boolean assertSegmentSuffix(String segmentSuffix) {\n    assert segmentSuffix != null;\n    if (!segmentSuffix.isEmpty()) {\n      int numParts = segmentSuffix.split(\"_\").length;\n      if (numParts == 2) {\n        return true;\n      } else if (numParts == 1) {\n        Long.parseLong(segmentSuffix, Character.MAX_RADIX);\n        return true;\n      }\n      return false; // invalid\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentWriteState#assertSegmentSuffix(String).mjava","sourceNew":"  // currently only used by assert? clean up and make real check?\n  // either it's a segment suffix (_X_Y) or it's a parsable generation\n  // TODO: this is very confusing how ReadersAndUpdates passes generations via\n  // this mechanism, maybe add 'generation' explicitly to ctor create the 'actual suffix' here?\n  private boolean assertSegmentSuffix(String segmentSuffix) {\n    assert segmentSuffix != null;\n    if (!segmentSuffix.isEmpty()) {\n      int numParts = segmentSuffix.split(\"_\").length;\n      if (numParts == 2) {\n        return true;\n      } else if (numParts == 1) {\n        Long.parseLong(segmentSuffix, Character.MAX_RADIX);\n        return true;\n      }\n      return false; // invalid\n    }\n    return true;\n  }\n\n","sourceOld":"  // currently only used by assert? clean up and make real check?\n  // either it's a segment suffix (_X_Y) or it's a parseable generation\n  // TODO: this is very confusing how ReadersAndUpdates passes generations via\n  // this mechanism, maybe add 'generation' explicitly to ctor create the 'actual suffix' here?\n  private boolean assertSegmentSuffix(String segmentSuffix) {\n    assert segmentSuffix != null;\n    if (!segmentSuffix.isEmpty()) {\n      int numParts = segmentSuffix.split(\"_\").length;\n      if (numParts == 2) {\n        return true;\n      } else if (numParts == 1) {\n        Long.parseLong(segmentSuffix, Character.MAX_RADIX);\n        return true;\n      }\n      return false; // invalid\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["2af44fa9bd43d5df330d6438c1af390323f7d567"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}