{"path":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","commits":[{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"572306117bc719f253d957bbaaa58ee0f8e482f8","date":1452262992,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","sourceNew":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      assertTrue(confusionMatrix.getAccuracy() >= 0d);\n      assertTrue(confusionMatrix.getAccuracy() <= 1d);\n      assertTrue(confusionMatrix.getPrecision() >= 0d);\n      assertTrue(confusionMatrix.getPrecision() <= 1d);\n      assertTrue(confusionMatrix.getRecall() >= 0d);\n      assertTrue(confusionMatrix.getRecall() <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2","date":1459428331,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","sourceNew":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      assertTrue(confusionMatrix.getAccuracy() >= 0d);\n      assertTrue(confusionMatrix.getAccuracy() <= 1d);\n      assertTrue(confusionMatrix.getPrecision() >= 0d);\n      assertTrue(confusionMatrix.getPrecision() <= 1d);\n      assertTrue(confusionMatrix.getRecall() >= 0d);\n      assertTrue(confusionMatrix.getRecall() <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299","date":1460106403,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","sourceNew":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n      double f1Measure = confusionMatrix.getF1Measure();\n      assertTrue(f1Measure >= 0d);\n      assertTrue(f1Measure <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/ConfusionMatrixGeneratorTest#testGetConfusionMatrix().mjava","sourceNew":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n      double f1Measure = confusionMatrix.getF1Measure();\n      assertTrue(f1Measure >= 0d);\n      assertTrue(f1Measure <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetConfusionMatrix() throws Exception {\n    LeafReader reader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      reader = getSampleIndex(analyzer);\n      Classifier<BytesRef> classifier = new Classifier<BytesRef>() {\n        @Override\n        public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n          return new ClassificationResult<>(new BytesRef(), 1 / (1 + Math.exp(-random().nextInt())));\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {\n          return null;\n        }\n\n        @Override\n        public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {\n          return null;\n        }\n      };\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(reader, classifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      assertNotNull(confusionMatrix.getLinearizedMatrix());\n      assertEquals(7, confusionMatrix.getNumberOfEvaluatedDocs());\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0d );\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2","eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299"],"572306117bc719f253d957bbaaa58ee0f8e482f8":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2":["eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"572306117bc719f253d957bbaaa58ee0f8e482f8":["cbc45ebd0910e885a4f2680ecb1875d36ca3d0e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}