{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","sourceNew":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = (Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = (Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = (Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = (Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","sourceNew":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = ((Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER));\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = ((Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG));\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = ((Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT));\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = (Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = (Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","sourceNew":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = ((Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER));\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = ((Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG));\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = ((Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT));\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = (Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = (Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","sourceNew":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = ((Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER));\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = ((Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG));\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = ((Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT));\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = (Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = (Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#maxTest().mjava","sourceNew":"  @Test\n  public void maxTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"int\", new ETP(\"max(int_i)\", 6));\n    expressions.put(\"longs\", new ETP(\"max(long_lm)\", 11L));\n    expressions.put(\"float\", new ETP(\"max(float_f)\", 5.0F));\n    expressions.put(\"doubles\", new ETP(\"max(double_dm)\", 14.0));\n    expressions.put(\"dates\", new ETP(\"max(date_dt)\", \"1802-12-31T23:59:59Z\"));\n    expressions.put(\"strings\", new ETP(\"max(string_sm)\", \"str3_second\"));\n\n    testExpressions(expressions);\n  }\n\n","sourceOld":"  @Test\n  public void maxTest() throws Exception { \n    //Int\n    Integer intResult = ((Integer)getStatResult(\"mar\", \"int_id\", VAL_TYPE.INTEGER));\n    Integer intTest = (Integer)calculateStat(intTestStart, \"max\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = ((Long)getStatResult(\"mar\", \"long_ld\", VAL_TYPE.LONG));\n    Long longTest = (Long)calculateStat(longTestStart, \"max\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Float floatResult = ((Float)getStatResult(\"mar\", \"float_fd\", VAL_TYPE.FLOAT));\n    Float floatTest = (Float)calculateStat(floatTestStart, \"max\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mar\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"max\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    String dateResult = (String)getStatResult(\"mar\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"max\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    String stringResult = (String)getStatResult(\"mar\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"max\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}