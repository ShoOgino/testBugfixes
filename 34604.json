{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#checkPathPerm(List[Permission],AuthorizationContext).mjava","commits":[{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(context, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["8076096f334b0665d0a69a63ee98ac09baad402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8076096f334b0665d0a69a63ee98ac09baad402b"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}