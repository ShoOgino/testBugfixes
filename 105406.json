{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().tokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().tokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b161cbe24f78fd1b3801394b7becaaa6d4843c83","date":1340889615,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().tokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().tokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b161cbe24f78fd1b3801394b7becaaa6d4843c83":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b161cbe24f78fd1b3801394b7becaaa6d4843c83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b161cbe24f78fd1b3801394b7becaaa6d4843c83"]},"commit2Childs":{"b161cbe24f78fd1b3801394b7becaaa6d4843c83":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b161cbe24f78fd1b3801394b7becaaa6d4843c83","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}