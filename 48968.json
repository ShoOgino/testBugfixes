{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b82182bcb9110d24f7de32032113dbf31606c2","date":1510306998,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a b c\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorable scorer;\n         @Override\n        public void setScorer(Scorable scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorable scorer;\n         @Override\n        public void setScorer(Scorable scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorable scorer;\n         @Override\n         public void setScorer(Scorable scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorable scorer;\n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newTextField(\"field\", \"a c\", Field.Store.YES));\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"field\", \"a c b\", Field.Store.YES));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq.build(), new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery(a.field(), a.bytes(), c.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new SimpleCollector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public ScoreMode scoreMode() {\n           return ScoreMode.COMPLETE;\n         }\n       });\n\n    pq = new PhraseQuery(2, a.field(), a.bytes(), b.bytes());\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new SimpleCollector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(0.5f, scorer.score(), 0);\n      }\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b9b82182bcb9110d24f7de32032113dbf31606c2","9fc47cb7b4346802411bb432f501ed0673d7119e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae73da626f97850c922c42736f808d0378e165f0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae73da626f97850c922c42736f808d0378e165f0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["e9e1499c5d26c936238506df90a3c02c76707722"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","ae73da626f97850c922c42736f808d0378e165f0"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}