{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#equals(Object).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  //@Override\r\n  public final boolean equals(final Object o) {\r\n    if (o==this) return true;\r\n    if (o==null) return false;\r\n    if (this.getClass().equals(o.getClass())) {\r\n      AbstractTrieRangeFilter q=(AbstractTrieRangeFilter)o;\r\n      return (\r\n        Arrays.equals(fields,q.fields) &&\r\n        (q.min == null ? min == null : q.min.equals(min)) &&\r\n        (q.max == null ? max == null : q.max.equals(max)) &&\r\n        minInclusive==q.minInclusive &&\r\n        maxInclusive==q.maxInclusive &&\r\n        precisionStep==q.precisionStep\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#equals(Object).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#equals(Object).mjava","sourceNew":"  //@Override\r\n  public final boolean equals(final Object o) {\r\n    if (o==this) return true;\r\n    if (o==null) return false;\r\n    if (this.getClass().equals(o.getClass())) {\r\n      AbstractTrieRangeFilter q=(AbstractTrieRangeFilter)o;\r\n      return (\r\n        field==q.field &&\r\n        (q.min == null ? min == null : q.min.equals(min)) &&\r\n        (q.max == null ? max == null : q.max.equals(max)) &&\r\n        minInclusive==q.minInclusive &&\r\n        maxInclusive==q.maxInclusive &&\r\n        precisionStep==q.precisionStep\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\n","sourceOld":"  //@Override\r\n  public final boolean equals(final Object o) {\r\n    if (o==this) return true;\r\n    if (o==null) return false;\r\n    if (this.getClass().equals(o.getClass())) {\r\n      AbstractTrieRangeFilter q=(AbstractTrieRangeFilter)o;\r\n      return (\r\n        Arrays.equals(fields,q.fields) &&\r\n        (q.min == null ? min == null : q.min.equals(min)) &&\r\n        (q.max == null ? max == null : q.max.equals(max)) &&\r\n        minInclusive==q.minInclusive &&\r\n        maxInclusive==q.maxInclusive &&\r\n        precisionStep==q.precisionStep\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeQuery#equals(Object).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#equals(Object).mjava","sourceNew":"  //@Override\n  public final boolean equals(final Object o) {\n    if (o==this) return true;\n    if (o==null) return false;\n    if (this.getClass().equals(o.getClass())) {\n      AbstractTrieRangeQuery q=(AbstractTrieRangeQuery)o;\n      return (\n        field==q.field &&\n        (q.min == null ? min == null : q.min.equals(min)) &&\n        (q.max == null ? max == null : q.max.equals(max)) &&\n        minInclusive==q.minInclusive &&\n        maxInclusive==q.maxInclusive &&\n        precisionStep==q.precisionStep\n      );\n    }\n    return false;\n  }\n\n","sourceOld":"  //@Override\r\n  public final boolean equals(final Object o) {\r\n    if (o==this) return true;\r\n    if (o==null) return false;\r\n    if (this.getClass().equals(o.getClass())) {\r\n      AbstractTrieRangeFilter q=(AbstractTrieRangeFilter)o;\r\n      return (\r\n        field==q.field &&\r\n        (q.min == null ? min == null : q.min.equals(min)) &&\r\n        (q.max == null ? max == null : q.max.equals(max)) &&\r\n        minInclusive==q.minInclusive &&\r\n        maxInclusive==q.maxInclusive &&\r\n        precisionStep==q.precisionStep\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}