{"path":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#processPathHierarchyQueryString(String).mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#processPathHierarchyQueryString(String).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: THIS FEATURE IS PRESENTLY EXPERIMENTAL; WAIT TO SEE IT IN THE REF GUIDE.  FINAL SYNTAX IS TBD.\n  protected static String processPathHierarchyQueryString(String queryString) {\n    // if the filter includes a path string, build a lucene query string to match those specific child documents.\n    // e.g. toppings/ingredients/name_s:cocoa -> +_nest_path_:\"toppings/ingredients/\" +(name_s:cocoa)\n    int indexOfFirstColon = queryString.indexOf(':');\n    if (indexOfFirstColon <= 0) {\n      return queryString;// give up\n    }\n    int indexOfLastPathSepChar = queryString.lastIndexOf(PATH_SEP_CHAR, indexOfFirstColon);\n    if (indexOfLastPathSepChar < 0) {\n      return queryString;\n    }\n    String path = queryString.substring(0, indexOfLastPathSepChar + 1);\n    String remaining = queryString.substring(indexOfLastPathSepChar + 1);\n    return\n        \"+\" + NEST_PATH_FIELD_NAME + \":\" + ClientUtils.escapeQueryChars(path)\n        + \" +(\" + remaining + \")\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f","date":1548699906,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#processPathHierarchyQueryString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#processPathHierarchyQueryString(String).mjava","sourceNew":"  // NOTE: THIS FEATURE IS PRESENTLY EXPERIMENTAL; WAIT TO SEE IT IN THE REF GUIDE.  FINAL SYNTAX IS TBD.\n  protected static String processPathHierarchyQueryString(String queryString) {\n    // if the filter includes a path string, build a lucene query string to match those specific child documents.\n    // e.g. /toppings/ingredients/name_s:cocoa -> +_nest_path_:/toppings/ingredients +(name_s:cocoa)\n    // ingredients/name_s:cocoa -> +_nest_path_:*/ingredients +(name_s:cocoa)\n    int indexOfFirstColon = queryString.indexOf(':');\n    if (indexOfFirstColon <= 0) {\n      return queryString;// give up\n    }\n    int indexOfLastPathSepChar = queryString.lastIndexOf(PATH_SEP_CHAR, indexOfFirstColon);\n    if (indexOfLastPathSepChar < 0) {\n      // regular filter, not hierarchy based.\n      return ClientUtils.escapeQueryChars(queryString.substring(0, indexOfFirstColon))\n          + \":\" + ClientUtils.escapeQueryChars(queryString.substring(indexOfFirstColon + 1));\n    }\n    final boolean isAbsolutePath = queryString.charAt(0) == PATH_SEP_CHAR;\n    String path = ClientUtils.escapeQueryChars(queryString.substring(0, indexOfLastPathSepChar));\n    String remaining = queryString.substring(indexOfLastPathSepChar + 1); // last part of path hierarchy\n\n    return\n        \"+\" + NEST_PATH_FIELD_NAME + (isAbsolutePath? \":\": \":*\\\\/\") + path\n        + \" +(\" + remaining + \")\";\n  }\n\n","sourceOld":"  // NOTE: THIS FEATURE IS PRESENTLY EXPERIMENTAL; WAIT TO SEE IT IN THE REF GUIDE.  FINAL SYNTAX IS TBD.\n  protected static String processPathHierarchyQueryString(String queryString) {\n    // if the filter includes a path string, build a lucene query string to match those specific child documents.\n    // e.g. toppings/ingredients/name_s:cocoa -> +_nest_path_:\"toppings/ingredients/\" +(name_s:cocoa)\n    int indexOfFirstColon = queryString.indexOf(':');\n    if (indexOfFirstColon <= 0) {\n      return queryString;// give up\n    }\n    int indexOfLastPathSepChar = queryString.lastIndexOf(PATH_SEP_CHAR, indexOfFirstColon);\n    if (indexOfLastPathSepChar < 0) {\n      return queryString;\n    }\n    String path = queryString.substring(0, indexOfLastPathSepChar + 1);\n    String remaining = queryString.substring(indexOfLastPathSepChar + 1);\n    return\n        \"+\" + NEST_PATH_FIELD_NAME + \":\" + ClientUtils.escapeQueryChars(path)\n        + \" +(\" + remaining + \")\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f"]},"commit2Childs":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}