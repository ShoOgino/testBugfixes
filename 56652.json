{"path":"src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","commits":[{"id":"a11ec658894eed204e77ed47f9ff29c3356d8099","date":1230590887,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a11ec658894eed204e77ed47f9ff29c3356d8099":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a11ec658894eed204e77ed47f9ff29c3356d8099":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}