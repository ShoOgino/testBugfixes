{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","commits":[{"id":"77cc5d33c4ecf450c71edad489df69de68a73a11","date":1323189401,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean readOnly, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), readOnly), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean readOnly, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), readOnly), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean readOnly, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), readOnly), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a15c58cbe3d17e9fb301c7863878f51718e2d60e","date":1334073993,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":["d0ce568448269aad19a317e537eefc0993934c9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ce568448269aad19a317e537eefc0993934c9d","date":1361139215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"bugIntro":["a114c79cee12feb72f81641925268f6e3e4f051e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a114c79cee12feb72f81641925268f6e3e4f051e","date":1364002322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, null, true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, DirContext.DEFAULT, config.lockType), core), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":["d0ce568448269aad19a317e537eefc0993934c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30b6ad849a21206db510322a3f583ca70ae20a2f","date":1399996150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, null, true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a910473f0b0dd5091433ffc6c04ce481567cc3","date":1400005623,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, null, true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, null, true, enableCache, false, directoryFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b906bdda81aff118473358c14c280e6f07feeda","date":1412632498,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name,\n                           boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name,\n                           boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, config, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,String,IndexSchema,SolrIndexConfig,String,boolean,DirectoryFactory).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name,\n      boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // We don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, name, getReader(core, config, directoryFactory, path), true, enableCache, false,\n        directoryFactory);\n    // Release the directory at close.\n    this.releaseDirectory = true;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name,\n                           boolean enableCache, DirectoryFactory directoryFactory) throws IOException {\n    // we don't need to reserve the directory because we get it from the factory\n    this(core, path, schema, name, getReader(core, config, directoryFactory, path), true, enableCache, false, directoryFactory);\n    this.createdDirectory = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["93dd449115a9247533e44bab47e8429e5dccbc6d","6b906bdda81aff118473358c14c280e6f07feeda"],"5a238fc456663f685a9db1ed8d680e348bb45171":["3615ce4a1f785ae1b779244de52c6a7d99227e60","a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a15c58cbe3d17e9fb301c7863878f51718e2d60e","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"6b906bdda81aff118473358c14c280e6f07feeda":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a15c58cbe3d17e9fb301c7863878f51718e2d60e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"08a910473f0b0dd5091433ffc6c04ce481567cc3":["30b6ad849a21206db510322a3f583ca70ae20a2f"],"56572ec06f1407c066d6b7399413178b33176cd8":["a114c79cee12feb72f81641925268f6e3e4f051e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["6b906bdda81aff118473358c14c280e6f07feeda"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","d0ce568448269aad19a317e537eefc0993934c9d"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a114c79cee12feb72f81641925268f6e3e4f051e","08a910473f0b0dd5091433ffc6c04ce481567cc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77cc5d33c4ecf450c71edad489df69de68a73a11"],"a114c79cee12feb72f81641925268f6e3e4f051e":["d0ce568448269aad19a317e537eefc0993934c9d"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["a114c79cee12feb72f81641925268f6e3e4f051e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"d0ce568448269aad19a317e537eefc0993934c9d":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","09c8567c25c02eeeb3e719841606a1269f3538ca","d0ce568448269aad19a317e537eefc0993934c9d"],"6b906bdda81aff118473358c14c280e6f07feeda":["55980207f1977bd1463465de1659b821347e2fa8","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a15c58cbe3d17e9fb301c7863878f51718e2d60e":["5a238fc456663f685a9db1ed8d680e348bb45171","8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"08a910473f0b0dd5091433ffc6c04ce481567cc3":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"77cc5d33c4ecf450c71edad489df69de68a73a11":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["55980207f1977bd1463465de1659b821347e2fa8","6b906bdda81aff118473358c14c280e6f07feeda","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","77cc5d33c4ecf450c71edad489df69de68a73a11","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["5a238fc456663f685a9db1ed8d680e348bb45171","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["08a910473f0b0dd5091433ffc6c04ce481567cc3"],"a114c79cee12feb72f81641925268f6e3e4f051e":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","30b6ad849a21206db510322a3f583ca70ae20a2f"],"d0ce568448269aad19a317e537eefc0993934c9d":["09c8567c25c02eeeb3e719841606a1269f3538ca","a114c79cee12feb72f81641925268f6e3e4f051e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","5a238fc456663f685a9db1ed8d680e348bb45171","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","8917bfede3b4ca30f4305c1e391e9218959cd723","56572ec06f1407c066d6b7399413178b33176cd8","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}