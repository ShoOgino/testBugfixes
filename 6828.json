{"path":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","commits":[{"id":"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c","date":1110211682,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A AND B OR C AND D\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"(A AND B) OR (C AND D)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd99bbca4169b09ee71fda976ded4b764e88f1c8","date":1110231999,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A AND B OR C AND D\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"(A AND B) OR (C AND D)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A B C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"(+A +B) C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"+A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B AND C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A (-B +C)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A AND B OR C AND D\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"(A AND B) OR (C AND D)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e63906b6e0c361e231321c5efc1bca75942fc9bd","date":1110338482,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A AND B OR C AND D\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"(A AND B) OR (C AND D)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A B C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"(+A +B) C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"+A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B AND C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A (-B +C)\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer());\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["e63906b6e0c361e231321c5efc1bca75942fc9bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"e63906b6e0c361e231321c5efc1bca75942fc9bd":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["e63906b6e0c361e231321c5efc1bca75942fc9bd"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"],"e63906b6e0c361e231321c5efc1bca75942fc9bd":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}