{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForceT(String,Automaton,int).mjava","commits":[{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForceT(String,Automaton,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBruteForceT(String input, Automaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getTDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getTDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForceT(String,Automaton,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForceT(String,Automaton,int).mjava","sourceNew":"  private void assertBruteForceT(String input, Automaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getTDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getTDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertBruteForceT(String input, Automaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getTDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getTDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}