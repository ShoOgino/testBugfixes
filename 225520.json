{"path":"solr/core/src/test/org/apache/solr/TestJoin#testJoinAllMethods().mjava","commits":[{"id":"83b987bcc75aaccfc3495fcc98472a4402cae7d1","date":1580487661,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoinAllMethods().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Exercises behavior shared by all join methods.\n   */\n  @Test\n  public void testJoinAllMethods() throws Exception {\n    indexEmployeeDocs();\n    ModifiableSolrParams p = params(\"sort\",\"id asc\");\n\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(p, \"q\", buildJoinRequest(\"noexist_ss_dv\", DEPT_ID_FIELD, \"*:*\", \"fl\",\"id\"))\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, \"noexist_ss_dv\", \"*:*\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone in same dept(s) as Dave\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_FIELD, \"name:dave\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from single-value to multi-value\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from multi-value to single-value\n    assertJQ(req(p, \"q\",buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments =\n        \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"name:dave\"), \"fl\",\"id\"),\n        davesDepartments);\n\n    // variable deref in 'from' query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax}dave\", \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // variable deref in 'from' query (w/ localparams)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax qf=name}dave\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"dave\", \"defType=dismax\"), \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\", \"fq\", \"name:john\")\n        ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoinAllMethods().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestJoin#testJoinAllMethods().mjava","sourceNew":"  /*\n   * Exercises behavior shared by all join methods.\n   */\n  @Test\n  public void testJoinAllMethods() throws Exception {\n    indexEmployeeDocs();\n    ModifiableSolrParams p = params(\"sort\",\"id asc\");\n\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(p, \"q\", buildJoinRequest(\"noexist_ss_dv\", DEPT_ID_FIELD, \"*:*\", \"fl\",\"id\"))\n        ,\"/response=={'numFound':0,'start':0,'numFoundExact':true,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, \"noexist_ss_dv\", \"*:*\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'numFoundExact':true,'docs':[]}\"\n    );\n\n    // self join... return everyone in same dept(s) as Dave\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_FIELD, \"name:dave\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from single-value to multi-value\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from multi-value to single-value\n    assertJQ(req(p, \"q\",buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments =\n        \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"name:dave\"), \"fl\",\"id\"),\n        davesDepartments);\n\n    // variable deref in 'from' query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax}dave\", \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // variable deref in 'from' query (w/ localparams)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax qf=name}dave\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"dave\", \"defType=dismax\"), \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\", \"fq\", \"name:john\")\n        ,\"/response=={'numFound':1,'start':0,'numFoundExact':true,'docs':[{'id':'1'}]}\"\n    );\n  }\n\n","sourceOld":"  /*\n   * Exercises behavior shared by all join methods.\n   */\n  @Test\n  public void testJoinAllMethods() throws Exception {\n    indexEmployeeDocs();\n    ModifiableSolrParams p = params(\"sort\",\"id asc\");\n\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(p, \"q\", buildJoinRequest(\"noexist_ss_dv\", DEPT_ID_FIELD, \"*:*\", \"fl\",\"id\"))\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, \"noexist_ss_dv\", \"*:*\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone in same dept(s) as Dave\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_FIELD, \"name:dave\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from single-value to multi-value\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // from multi-value to single-value\n    assertJQ(req(p, \"q\",buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"title:MTS\"), \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments =\n        \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"name:dave\"), \"fl\",\"id\"),\n        davesDepartments);\n\n    // variable deref in 'from' query\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax}dave\", \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // variable deref in 'from' query (w/ localparams)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"$qq\"), \"qq\",\"{!dismax qf=name}dave\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_FIELD, DEPT_ID_FIELD, \"dave\", \"defType=dismax\"), \"qf\",\"name\",\n        \"fl\",\"id\", \"debugQuery\",\"true\"),\n        davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(p, \"q\", buildJoinRequest(DEPT_ID_FIELD, DEPT_FIELD, \"text:develop\"), \"fl\",\"id\", \"fq\", \"name:john\")\n        ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}