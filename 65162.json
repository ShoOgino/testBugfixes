{"path":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"6a67b839dba6c0047c752067352e6a7847fbe8d3","date":1183443247,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n     \n     // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n     if(emptyArray(fields)) {\n        // use default search field if highlight fieldlist not specified.\n        if (emptyArray(defaultFields)) {\n           fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n        }  \n        else {\n           fields = defaultFields;\n        }\n     }\n     else if (fields.length == 1) {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n     }\n     \n     return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63","date":1200352680,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n     \n     // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n     if(emptyArray(fields)) {\n        // use default search field if highlight fieldlist not specified.\n        if (emptyArray(defaultFields)) {\n           String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n           fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n        }  \n        else {\n           fields = defaultFields;\n        }\n     }\n     else if (fields.length == 1) {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n     }\n     \n     return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n     \n     // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n     if(emptyArray(fields)) {\n        // use default search field if highlight fieldlist not specified.\n        if (emptyArray(defaultFields)) {\n           fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n        }  \n        else {\n           fields = defaultFields;\n        }\n     }\n     else if (fields.length == 1) {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n     }\n     \n     return fields;\n  }\n\n","bugFix":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303b28b90016c2de1b5870759794476dbf4fd6ce","date":1206052767,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"\t/**\n\t * Return a String array of the fields to be highlighted.\n\t * Falls back to the programatic defaults, or the default search field if the list of fields\n\t * is not specified in either the handler configuration or the request.\n\t * @param query The current Query\n\t * @param request The current SolrQueryRequest\n\t * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n\t */\n\tpublic String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n\t\tString fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n\t\t// if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n\t\tif(emptyArray(fields)) {\n\t\t\t// use default search field if highlight fieldlist not specified.\n\t\t\tif (emptyArray(defaultFields)) {\n\t\t\t\tString defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n\t\t\t\tfields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n\t\t\t}  \n\t\t\telse {\n\t\t\t\tfields = defaultFields;\n\t\t\t}\n\t\t}\n\t\telse if (fields.length == 1) {\n\t\t\t// if there's a single request/handler value, it may be a space/comma separated list\n\t\t\tfields = SolrPluginUtils.split(fields[0]);\n\t\t}\n\n\t\treturn fields;\n\t}\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n     \n     // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n     if(emptyArray(fields)) {\n        // use default search field if highlight fieldlist not specified.\n        if (emptyArray(defaultFields)) {\n           String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n           fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n        }  \n        else {\n           fields = defaultFields;\n        }\n     }\n     else if (fields.length == 1) {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n     }\n     \n     return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a04a06bcc429d9583c477a568b5329655e7d26c","date":1220993913,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"\t/**\n\t * Return a String array of the fields to be highlighted.\n\t * Falls back to the programatic defaults, or the default search field if the list of fields\n\t * is not specified in either the handler configuration or the request.\n\t * @param query The current Query\n\t * @param request The current SolrQueryRequest\n\t * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n\t */\n\tpublic String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n\t\tString fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n\t\t// if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n\t\tif(emptyArray(fields)) {\n\t\t\t// use default search field if highlight fieldlist not specified.\n\t\t\tif (emptyArray(defaultFields)) {\n\t\t\t\tString defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n\t\t\t\tfields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfields = defaultFields;\n\t\t\t}\n\t\t}\n\t\telse if (fields.length == 1) {\n\t\t\t// if there's a single request/handler value, it may be a space/comma separated list\n\t\t\tfields = SolrPluginUtils.split(fields[0]);\n\t\t}\n\n\t\treturn fields;\n\t}\n\n","sourceOld":"\t/**\n\t * Return a String array of the fields to be highlighted.\n\t * Falls back to the programatic defaults, or the default search field if the list of fields\n\t * is not specified in either the handler configuration or the request.\n\t * @param query The current Query\n\t * @param request The current SolrQueryRequest\n\t * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n\t */\n\tpublic String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n\t\tString fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n\t\t// if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n\t\tif(emptyArray(fields)) {\n\t\t\t// use default search field if highlight fieldlist not specified.\n\t\t\tif (emptyArray(defaultFields)) {\n\t\t\t\tString defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n\t\t\t\tfields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n\t\t\t}  \n\t\t\telse {\n\t\t\t\tfields = defaultFields;\n\t\t\t}\n\t\t}\n\t\telse if (fields.length == 1) {\n\t\t\t// if there's a single request/handler value, it may be a space/comma separated list\n\t\t\tfields = SolrPluginUtils.split(fields[0]);\n\t\t}\n\n\t\treturn fields;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a11ec658894eed204e77ed47f9ff29c3356d8099","date":1230590887,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"\t/**\n\t * Return a String array of the fields to be highlighted.\n\t * Falls back to the programatic defaults, or the default search field if the list of fields\n\t * is not specified in either the handler configuration or the request.\n\t * @param query The current Query\n\t * @param request The current SolrQueryRequest\n\t * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n\t */\n\tpublic String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n\t\tString fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n\t\t// if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n\t\tif(emptyArray(fields)) {\n\t\t\t// use default search field if highlight fieldlist not specified.\n\t\t\tif (emptyArray(defaultFields)) {\n\t\t\t\tString defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n\t\t\t\tfields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfields = defaultFields;\n\t\t\t}\n\t\t}\n\t\telse if (fields.length == 1) {\n\t\t\t// if there's a single request/handler value, it may be a space/comma separated list\n\t\t\tfields = SolrPluginUtils.split(fields[0]);\n\t\t}\n\n\t\treturn fields;\n\t}\n\n","bugFix":null,"bugIntro":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getSolrQueryParser(null).getField();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"a11ec658894eed204e77ed47f9ff29c3356d8099":["7a04a06bcc429d9583c477a568b5329655e7d26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7a04a06bcc429d9583c477a568b5329655e7d26c":["303b28b90016c2de1b5870759794476dbf4fd6ce"],"6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"ad94625fb8d088209f46650c8097196fec67f00c":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"303b28b90016c2de1b5870759794476dbf4fd6ce":["6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63"]},"commit2Childs":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["ad94625fb8d088209f46650c8097196fec67f00c"],"a11ec658894eed204e77ed47f9ff29c3356d8099":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"7a04a06bcc429d9583c477a568b5329655e7d26c":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63":["303b28b90016c2de1b5870759794476dbf4fd6ce"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["6d657745bffbdfb0e5b0ace9fd5bbd782cc9eb63"],"303b28b90016c2de1b5870759794476dbf4fd6ce":["7a04a06bcc429d9583c477a568b5329655e7d26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}