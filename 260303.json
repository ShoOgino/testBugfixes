{"path":"backwards/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}