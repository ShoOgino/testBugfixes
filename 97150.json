{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new SimpleAnalyzer(\n                TEST_VERSION_CURRENT)));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new SimpleAnalyzer(\n                TEST_VERSION_CURRENT)));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new SimpleAnalyzer(\n                TEST_VERSION_CURRENT)));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(danishIndex, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    MockRAMDirectory danishIndex = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    MockRAMDirectory danishIndex = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    MockRAMDirectory danishIndex = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    MockRAMDirectory danishIndex = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    \n    /* build an index */\n    RAMDirectory danishIndex = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(new Field(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = new IndexSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDanish() throws Exception {\n    \n    /* build an index */\n    Directory danishIndex = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, danishIndex);\n    // Danish collation orders the words below in the given order\n    // (example taken from TestSort.testInternationalSort() ).\n    String[] words = {\"H\\u00D8T\", \"H\\u00C5T\", \"MAND\"};\n    for (int docnum = 0; docnum < words.length; ++docnum) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", words[docnum], Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\", \"body\", Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher search = newSearcher(reader);\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    \n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    int numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00D8T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should be included.\", 1, numHits);\n    \n    numHits = search.search(q, new TermRangeFilter(\"content\", \"H\\u00C5T\",\n        \"MAND\", F, F, collator), 1000).totalHits;\n    assertEquals(\"The index Term should not be included.\", 0, numHits);\n    search.close();\n    reader.close();\n    danishIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}