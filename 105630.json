{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","commits":[{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testVariableIntsLimits().mjava","sourceNew":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.type());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.type());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","sourceNew":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.type());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","sourceNew":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.type());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","sourceNew":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random()));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random()));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce","date":1358288854,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","sourceNew":null,"sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random()));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random()));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testVariableIntsLimits().mjava","sourceNew":null,"sourceOld":"  public void testVariableIntsLimits() throws IOException {\n    long[][] minMax = new long[][] { { Long.MIN_VALUE, Long.MAX_VALUE },\n        { Long.MIN_VALUE + 1, 1 }, { -1, Long.MAX_VALUE },\n        { Long.MIN_VALUE, -1 }, { 1, Long.MAX_VALUE },\n        { -1, Long.MAX_VALUE - 1 }, { Long.MIN_VALUE + 2, 1 }, };\n    Type[] expectedTypes = new Type[] { Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.FIXED_INTS_64,\n        Type.FIXED_INTS_64, Type.VAR_INTS, Type.VAR_INTS,\n        Type.VAR_INTS, };\n    DocValueHolder valueHolder = new DocValueHolder();\n    for (int i = 0; i < minMax.length; i++) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.VAR_INTS, newIOContext(random()));\n      valueHolder.numberValue = minMax[i][0];\n      w.add(0, valueHolder);\n      valueHolder.numberValue = minMax[i][1];\n      w.add(1, valueHolder);\n      w.finish(2);\n      assertEquals(0, trackBytes.get());\n      DocValues r = Ints.getValues(dir, \"test\", 2,  Type.VAR_INTS, newIOContext(random()));\n      Source source = getSource(r);\n      assertEquals(i + \" with min: \" + minMax[i][0] + \" max: \" + minMax[i][1],\n          expectedTypes[i], source.getType());\n      assertEquals(minMax[i][0], source.getInt(0));\n      assertEquals(minMax[i][1], source.getInt(1));\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["e0f5e4b06eda9c2996435d90659faa1a8601d196","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d4d69c535930b5cce125cff868d40f6373dc27d4","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}