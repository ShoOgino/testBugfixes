{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cb14974db200b881aabede3e13b70ea7e874094","date":1311527320,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98a20a1a0f02e19e5121d1b5d95f5af857d609ef","date":1382205865,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(server);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n      \n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n      \n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n      \n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebe8b79da5c80c6f5588d8dbd750a5f3865019a6","date":1528686294,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    NamedList<Object> result = client.request(new StreamingUpdateRequest(\"/update\",\n        getFile(\"solrj/books.csv\"), \"application/csv\")\n        .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true));\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    NamedList<Object> result = client.request(new StreamingUpdateRequest(\"/update\",\n        getFile(\"solrj/books.csv\"), \"application/csv\")\n        .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true));\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    NamedList<Object> result = client.request(new StreamingUpdateRequest(\"/update\",\n        getFile(\"solrj/books.csv\"), \"application/csv\")\n        .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true));\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["5cb14974db200b881aabede3e13b70ea7e874094"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef","ebe8b79da5c80c6f5588d8dbd750a5f3865019a6"],"5cb14974db200b881aabede3e13b70ea7e874094":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebe8b79da5c80c6f5588d8dbd750a5f3865019a6":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ebe8b79da5c80c6f5588d8dbd750a5f3865019a6"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef","ebe8b79da5c80c6f5588d8dbd750a5f3865019a6"]},"commit2Childs":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ebe8b79da5c80c6f5588d8dbd750a5f3865019a6","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5cb14974db200b881aabede3e13b70ea7e874094":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5cb14974db200b881aabede3e13b70ea7e874094"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ebe8b79da5c80c6f5588d8dbd750a5f3865019a6":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}