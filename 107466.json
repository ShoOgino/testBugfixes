{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  @Override\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  @Override\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afbb42e9134b051569d1254e7d3761828b6ce777","date":1374607937,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  @Override\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e11957f037cb0e1ec7cccb5becc3c3a53a7bd450","date":1374668463,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  @Override\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  @Override\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f0c6d69031c318c402abfe2543736076e80a132","date":1404594729,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    zzFinalHighSurrogate = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    zzFinalHighSurrogate = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    zzFinalHighSurrogate = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    zzFinalHighSurrogate = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    zzFinalHighSurrogate = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"afbb42e9134b051569d1254e7d3761828b6ce777":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4f0c6d69031c318c402abfe2543736076e80a132":["e11957f037cb0e1ec7cccb5becc3c3a53a7bd450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"e11957f037cb0e1ec7cccb5becc3c3a53a7bd450":["7530de27b87b961b51f01bd1299b7004d46e8823","afbb42e9134b051569d1254e7d3761828b6ce777"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4f0c6d69031c318c402abfe2543736076e80a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4f0c6d69031c318c402abfe2543736076e80a132","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"afbb42e9134b051569d1254e7d3761828b6ce777":["e11957f037cb0e1ec7cccb5becc3c3a53a7bd450"],"4f0c6d69031c318c402abfe2543736076e80a132":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"e11957f037cb0e1ec7cccb5becc3c3a53a7bd450":["4f0c6d69031c318c402abfe2543736076e80a132"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","afbb42e9134b051569d1254e7d3761828b6ce777","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e11957f037cb0e1ec7cccb5becc3c3a53a7bd450"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}