{"path":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setDisableCoord(bq.isCoordDisabled());\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    newBq.setBoost(bq.getBoost());\n    return newBq;\n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery newBq = (BooleanQuery)q.clone();\n    newBq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    return newBq;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setDisableCoord(bq.isCoordDisabled());\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    return new BoostQuery(newBq, boost);\n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setDisableCoord(bq.isCoordDisabled());\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    newBq.setBoost(bq.getBoost());\n    return newBq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    return new BoostQuery(newBq, boost);\n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setDisableCoord(bq.isCoordDisabled());\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    return new BoostQuery(newBq, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#fixNegativeQuery(Query).mjava","sourceNew":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    return new BoostQuery(newBq, boost);\n  }\n\n","sourceOld":"  /** Fixes a negative query by adding a MatchAllDocs query clause.\n   * The query passed in *must* be a negative query.\n   */\n  public static Query fixNegativeQuery(Query q) {\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n    newBqB.setDisableCoord(bq.isCoordDisabled());\n    newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    for (BooleanClause clause : bq) {\n      newBqB.add(clause);\n    }\n    newBqB.add(new MatchAllDocsQuery(), Occur.MUST);\n    BooleanQuery newBq = newBqB.build();\n    return new BoostQuery(newBq, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["ccc08aa684aee4964baee0644a6ba047bfd70829","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}