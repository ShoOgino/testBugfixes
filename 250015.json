{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b752e241723380b5fdabe8364f28fd5639ebf08c","date":1355481283,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    Query q = buildQuery(maxDoc, contextArray, queryTerms);\n    System.out.println(reader);\n    System.out.println(q);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88428cf23f55c2838f471aaeaa18fa26805315c9","date":1355481774,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    Query q = buildQuery(maxDoc, contextArray, queryTerms);\n    System.out.println(reader);\n    System.out.println(q);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b6341c01680bddb99b9aa4697c800f1b1f3c02","date":1393514086,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final TermQuery tq = new TermQuery(this.terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<AtomicReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new BooleanQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (this.terms.size() == 1) {\n      final Query tq = newTermQuery(this.terms.get(0), null);\n      tq.setBoost(getBoost());\n      return tq;\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermStates[] contextArray = new TermStates[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermStates(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermStates[] contextArray = new TermStates[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermStates(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (this.terms.isEmpty()) {\n      return new MatchNoDocsQuery(\"CommonTermsQuery with no terms\");\n    } else if (this.terms.size() == 1) {\n      return newTermQuery(this.terms.get(0), null);\n    }\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final int maxDoc = reader.maxDoc();\n    final TermContext[] contextArray = new TermContext[terms.size()];\n    final Term[] queryTerms = this.terms.toArray(new Term[0]);\n    collectTermContext(reader, leaves, contextArray, queryTerms);\n    return buildQuery(maxDoc, contextArray, queryTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88428cf23f55c2838f471aaeaa18fa26805315c9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["f4778b794a897685e2f6c62caa1ac04983d1e69f","a6e9f769521480a623f897c0d59089b919fa4239"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["88428cf23f55c2838f471aaeaa18fa26805315c9"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["88428cf23f55c2838f471aaeaa18fa26805315c9","58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"b752e241723380b5fdabe8364f28fd5639ebf08c":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a6e9f769521480a623f897c0d59089b919fa4239":["f4778b794a897685e2f6c62caa1ac04983d1e69f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88428cf23f55c2838f471aaeaa18fa26805315c9":["b752e241723380b5fdabe8364f28fd5639ebf08c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["c9fb5f46e264daf5ba3860defe623a89d202dd87","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["b94236357aaa22b76c10629851fe4e376e0cea82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a6e9f769521480a623f897c0d59089b919fa4239"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["b752e241723380b5fdabe8364f28fd5639ebf08c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"b752e241723380b5fdabe8364f28fd5639ebf08c":["88428cf23f55c2838f471aaeaa18fa26805315c9"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"88428cf23f55c2838f471aaeaa18fa26805315c9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","58b6341c01680bddb99b9aa4697c800f1b1f3c02","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}