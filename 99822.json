{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testCharsNeededForFullPath().mjava","commits":[{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testCharsNeededForFullPath().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsNeededForFullPath().mjava","sourceNew":"  @Test \n  public void testCharsNeededForFullPath() {\n    assertEquals(0, FacetLabel.EMPTY.fullPathLength());\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    FacetLabel cp = new FacetLabel(components);\n    int expectedCharsNeeded = 0;\n    for (String comp : components) {\n      expectedCharsNeeded += comp.length();\n    }\n    expectedCharsNeeded += cp.length - 1; // delimiter chars\n    assertEquals(expectedCharsNeeded, cp.fullPathLength());\n  }\n\n","sourceOld":"  @Test \n  public void testCharsNeededForFullPath() {\n    assertEquals(0, FacetLabel.EMPTY.fullPathLength());\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    FacetLabel cp = new FacetLabel(components);\n    int expectedCharsNeeded = 0;\n    for (String comp : components) {\n      expectedCharsNeeded += comp.length();\n    }\n    expectedCharsNeeded += cp.length - 1; // delimiter chars\n    assertEquals(expectedCharsNeeded, cp.fullPathLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testCharsNeededForFullPath().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharsNeededForFullPath() {\n    assertEquals(0, FacetLabel.EMPTY.fullPathLength());\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    FacetLabel cp = new FacetLabel(components);\n    int expectedCharsNeeded = 0;\n    for (String comp : components) {\n      expectedCharsNeeded += comp.length();\n    }\n    expectedCharsNeeded += cp.length - 1; // delimiter chars\n    assertEquals(expectedCharsNeeded, cp.fullPathLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe9946d3cd818d329255e4c325597ac3480503e":["78522aad83283ca58fae08fd89406b65429d0229"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78522aad83283ca58fae08fd89406b65429d0229","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78522aad83283ca58fae08fd89406b65429d0229":["bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bbe9946d3cd818d329255e4c325597ac3480503e":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","bbe9946d3cd818d329255e4c325597ac3480503e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}