{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","commits":[{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == null) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != null) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != null) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != null && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == null || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == null) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != null) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != null) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != null && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == null || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NO) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NO) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NO) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NO && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NO || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == null) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != null) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != null) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != null && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == null || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45","date":1414773150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NO) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NO) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NO) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NO && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NO || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NO) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NO) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NO) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NO && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NO || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NONE) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NONE) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NONE) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NONE && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NONE || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NO) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NO) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NO) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NO && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NO || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions,\n              int dimensionCount, int dimensionNumBytes) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NONE) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NONE) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.dimensionCount == 0 && dimensionCount != 0) {\n      this.dimensionCount = dimensionCount;\n      this.dimensionNumBytes = dimensionNumBytes;\n    }\n\n    if (this.indexOptions != IndexOptions.NONE) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NONE && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NONE || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == IndexOptions.NONE) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != IndexOptions.NONE) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != IndexOptions.NONE) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != IndexOptions.NONE && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == IndexOptions.NONE || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3184874f7f3aca850248483485b4995343066875"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"3184874f7f3aca850248483485b4995343066875":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}