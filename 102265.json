{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","commits":[{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, LatLonPoint.decodeLatitude((int) cellMinLat), \n                                                 LatLonPoint.decodeLatitude((int) cellMaxLat), \n                                                 LatLonPoint.decodeLongitude((int) cellMinLon), \n                                                 LatLonPoint.decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, LatLonPoint.decodeLatitude((int) cellMinLat), \n                                                 LatLonPoint.decodeLatitude((int) cellMaxLat), \n                                                 LatLonPoint.decodeLongitude((int) cellMinLon), \n                                                 LatLonPoint.decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, decodeLatitude((int) cellMinLat),\n                                                 decodeLatitude((int) cellMaxLat),\n                                                 decodeLongitude((int) cellMinLon),\n                                                 decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, LatLonPoint.decodeLatitude((int) cellMinLat), \n                                                 LatLonPoint.decodeLatitude((int) cellMaxLat), \n                                                 LatLonPoint.decodeLongitude((int) cellMinLon), \n                                                 LatLonPoint.decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, decodeLatitude((int) cellMinLat),\n                                                 decodeLatitude((int) cellMaxLat),\n                                                 decodeLongitude((int) cellMinLon),\n                                                 decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, LatLonPoint.decodeLatitude((int) cellMinLat), \n                                                 LatLonPoint.decodeLatitude((int) cellMaxLat), \n                                                 LatLonPoint.decodeLongitude((int) cellMinLon), \n                                                 LatLonPoint.decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = LatLonTree.relate(tree, decodeLatitude((int) cellMinLat),\n                                                decodeLatitude((int) cellMaxLat),\n                                                decodeLongitude((int) cellMinLon),\n                                                decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, decodeLatitude((int) cellMinLat),\n                                                 decodeLatitude((int) cellMaxLat),\n                                                 decodeLongitude((int) cellMinLon),\n                                                 decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#fill(Polygon[],int,int,int,int).mjava","sourceNew":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = LatLonTree.relate(tree, decodeLatitude((int) cellMinLat),\n                                                decodeLatitude((int) cellMaxLat),\n                                                decodeLongitude((int) cellMinLon),\n                                                decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","sourceOld":"  /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */\n  void fill(Polygon[] polygons, int minLatIndex, int maxLatIndex, int minLonIndex, int maxLonIndex) {\n    // grid cells at the edge of the bounding box are typically smaller than normal, because we spill over.\n    long cellMinLat = minLat + (minLatIndex * latPerCell);\n    long cellMaxLat = Math.min(maxLat, minLat + (maxLatIndex * latPerCell) - 1);\n    long cellMinLon = minLon + (minLonIndex * lonPerCell);\n    long cellMaxLon = Math.min(maxLon, minLon + (maxLonIndex * lonPerCell) - 1);\n\n    assert cellMinLat <= maxLat && cellMinLon <= maxLon;\n    assert cellMaxLat >= cellMinLat;\n    assert cellMaxLon >= cellMinLon;\n\n    Relation relation = Polygon.relate(polygons, decodeLatitude((int) cellMinLat),\n                                                 decodeLatitude((int) cellMaxLat),\n                                                 decodeLongitude((int) cellMinLon),\n                                                 decodeLongitude((int) cellMaxLon));\n    if (relation != Relation.CELL_CROSSES_QUERY) {\n      // we know the answer for this region, fill the cell range\n      for (int i = minLatIndex; i < maxLatIndex; i++) {\n        for (int j = minLonIndex; j < maxLonIndex; j++) {\n          int index = i * GRID_SIZE + j;\n          assert haveAnswer.get(index) == false;\n          haveAnswer.set(index);\n          if (relation == Relation.CELL_INSIDE_QUERY) {\n            answer.set(index);\n          }\n        }\n      }\n    } else if (minLatIndex == maxLatIndex - 1) {\n      // nothing more to do: this is a single grid cell (leaf node) and\n      // is an edge case for the polygon.\n    } else {\n      // grid range crosses our polygon, keep recursing.\n      int midLatIndex = (minLatIndex + maxLatIndex) >>> 1;\n      int midLonIndex = (minLonIndex + maxLonIndex) >>> 1;\n      fill(polygons, minLatIndex, midLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, minLatIndex, midLatIndex, midLonIndex, maxLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, minLonIndex, midLonIndex);\n      fill(polygons, midLatIndex, maxLatIndex, midLonIndex, maxLonIndex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82235a501cff963da53cb98d86009e33e15cf47f"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["09f15823cf5eb6e807005579e875e117d8598f95","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["82235a501cff963da53cb98d86009e33e15cf47f"],"034996547ca41c5004216fdd0178acbf06438da2":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"09f15823cf5eb6e807005579e875e117d8598f95":["82235a501cff963da53cb98d86009e33e15cf47f","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}