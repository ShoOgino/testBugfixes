{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#IntersectEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","commits":[{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#IntersectEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["45f1ab280880dd574523c481077097a2fbb37c1b","45f1ab280880dd574523c481077097a2fbb37c1b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#IntersectEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7266c313bb3b4fbcde3dcc82556182e1fae90080","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}