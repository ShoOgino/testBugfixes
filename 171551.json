{"path":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","commits":[{"id":"e0aed040842b70826cfd518b076d58adcaede282","date":1395018675,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./int[@name='id']='1']\",\n            \"//doc[./int[@name='id']='2']\",\n            \"//doc[./int[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","date":1398363135,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./int[@name='id']='1']\",\n            \"//doc[./int[@name='id']='2']\",\n            \"//doc[./int[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./int[@name='id']='1']\",\n            \"//doc[./int[@name='id']='2']\",\n            \"//doc[./int[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testPhraseHighlighter().mjava","sourceNew":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseHighlighter() {\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, ComplexPhraseQParserPlugin.NAME);\n    args.put(CommonParams.FL, \"id\");\n    args.put(HighlightParams.HIGHLIGHT, Boolean.TRUE.toString());\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.TRUE.toString());\n    args.put(HighlightParams.FIELD_MATCH, Boolean.FALSE.toString());\n\n    args.put(HighlightParams.FRAGSIZE, String.valueOf(0));\n    args.put(HighlightParams.FIELDS, \"name\");\n\n\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n            \"standard\", 0, 200, args);\n\n    assertU(adoc(\"name\", \"john smith smith john\", \"id\", \"1\"));\n    assertU(adoc(\"name\", \"johathon smith smith johathon\", \"id\", \"2\"));\n    assertU(adoc(\"name\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(\"range queries supported\",\n            sumLRF.makeRequest(\"name:[sma TO smz]\"),\n            \"//doc[./str[@name='id']='1']\",\n            \"//doc[./str[@name='id']='2']\",\n            \"//doc[./str[@name='id']='3']\",\n            \"//result[@numFound='3']\"\n    );\n\n\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=true Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']\"\n    );\n\n\n    args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER, Boolean.FALSE.toString());\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"PhraseHighlighter=false Test\",\n            sumLRF.makeRequest(\"name:\\\"(john johathon) smith\\\"\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']\"\n    );\n\n   /*\n    assertQ(\"Highlight Plain Prefix Query Test\",\n            sumLRF.makeRequest(\"name:jo*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith <em>john</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='2']\",\n            \"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith <em>johathon</em>']\",\n            \"//lst[@name='highlighting']/lst[@name='3']\",\n            \"//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']\"\n    );\n   */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e0aed040842b70826cfd518b076d58adcaede282","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0aed040842b70826cfd518b076d58adcaede282":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","28288370235ed02234a64753cdbf0c6ec096304a"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["e0aed040842b70826cfd518b076d58adcaede282"],"28288370235ed02234a64753cdbf0c6ec096304a":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0aed040842b70826cfd518b076d58adcaede282"],"e0aed040842b70826cfd518b076d58adcaede282":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"30c8e5574b55d57947e989443dfde611646530ee":[],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}