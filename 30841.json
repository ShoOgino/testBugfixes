{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Prepare the queries for this test.\r\n   * Extending classes can overide this method for preparing different queries. \r\n   * @return prepared queries.\r\n   * @throws Exception if canot prepare the queries.\r\n   */\r\n  protected Query[] prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.StandardAnalyzer\")).newInstance(); \r\n    \r\n    QueryParser qp = new QueryParser(\"body\",anlzr);\r\n    ArrayList qq = new ArrayList();\r\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\r\n    qq.add(q1);\r\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\r\n    qq.add(q2);\r\n    BooleanQuery bq = new BooleanQuery();\r\n    bq.add(q1,Occur.MUST);\r\n    bq.add(q2,Occur.MUST);\r\n    qq.add(bq);\r\n    qq.add(qp.parse(\"synthetic body\"));\r\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\r\n    qq.add(qp.parse(\"synthetic text\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\r\n    qq.add(qp.parse(\"zoom*\"));\r\n    qq.add(qp.parse(\"synth*\"));\r\n    return (Query []) qq.toArray(new Query[0]);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b931634080ffdd860770bff5ce234c982053ac0","date":1174200666,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\r\n   * Prepare the queries for this test.\r\n   * Extending classes can overide this method for preparing different queries. \r\n   * @return prepared queries.\r\n   * @throws Exception if canot prepare the queries.\r\n   */\r\n  protected Query[] prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    QueryParser qp = new QueryParser(\"body\",anlzr);\r\n    ArrayList qq = new ArrayList();\r\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\r\n    qq.add(q1);\r\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\r\n    qq.add(q2);\r\n    BooleanQuery bq = new BooleanQuery();\r\n    bq.add(q1,Occur.MUST);\r\n    bq.add(q2,Occur.MUST);\r\n    qq.add(bq);\r\n    qq.add(qp.parse(\"synthetic body\"));\r\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\r\n    qq.add(qp.parse(\"synthetic text\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\r\n    qq.add(qp.parse(\"zoom*\"));\r\n    qq.add(qp.parse(\"synth*\"));\r\n    return (Query []) qq.toArray(new Query[0]);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Prepare the queries for this test.\r\n   * Extending classes can overide this method for preparing different queries. \r\n   * @return prepared queries.\r\n   * @throws Exception if canot prepare the queries.\r\n   */\r\n  protected Query[] prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.StandardAnalyzer\")).newInstance(); \r\n    \r\n    QueryParser qp = new QueryParser(\"body\",anlzr);\r\n    ArrayList qq = new ArrayList();\r\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\r\n    qq.add(q1);\r\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\r\n    qq.add(q2);\r\n    BooleanQuery bq = new BooleanQuery();\r\n    bq.add(q1,Occur.MUST);\r\n    bq.add(q2,Occur.MUST);\r\n    qq.add(bq);\r\n    qq.add(qp.parse(\"synthetic body\"));\r\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\r\n    qq.add(qp.parse(\"synthetic text\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\r\n    qq.add(qp.parse(\"zoom*\"));\r\n    qq.add(qp.parse(\"synth*\"));\r\n    return (Query []) qq.toArray(new Query[0]);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(\"body\",anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\r\n   * Prepare the queries for this test.\r\n   * Extending classes can overide this method for preparing different queries. \r\n   * @return prepared queries.\r\n   * @throws Exception if canot prepare the queries.\r\n   */\r\n  protected Query[] prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    QueryParser qp = new QueryParser(\"body\",anlzr);\r\n    ArrayList qq = new ArrayList();\r\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\r\n    qq.add(q1);\r\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\r\n    qq.add(q2);\r\n    BooleanQuery bq = new BooleanQuery();\r\n    bq.add(q1,Occur.MUST);\r\n    bq.add(q2,Occur.MUST);\r\n    qq.add(bq);\r\n    qq.add(qp.parse(\"synthetic body\"));\r\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\r\n    qq.add(qp.parse(\"synthetic text\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\r\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\r\n    qq.add(qp.parse(\"zoom*\"));\r\n    qq.add(qp.parse(\"synth*\"));\r\n    return (Query []) qq.toArray(new Query[0]);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(BasicDocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(BasicDocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(BasicDocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(\"body\",anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(\"docid\",\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(\"body\",\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(BasicDocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(BasicDocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(BasicDocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can overide this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if canot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList qq = new ArrayList();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return (Query []) qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b931634080ffdd860770bff5ce234c982053ac0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["2b931634080ffdd860770bff5ce234c982053ac0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["ba1116b3450a9c1642c89445d131b37344055245"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"2b931634080ffdd860770bff5ce234c982053ac0":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["2b931634080ffdd860770bff5ce234c982053ac0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}