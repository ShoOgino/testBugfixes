{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<>();\n    for (Map.Entry<Integer, int[]> entry : input.entrySet()) {\n      int[] wordIdAndLength = entry.getValue();\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = entry.getKey();\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}