{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#calcCandidateCollection(Instant).mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#calcCandidateCollection(Instant).mjava","pathOld":"/dev/null","sourceNew":"  private CandidateCollection calcCandidateCollection(Instant docTimestamp) {\n    // Lookup targetCollection given route key.  Iterates in reverse chronological order.\n    //    We're O(N) here but N should be small, the loop is fast, and usually looking for 1st.\n    Instant next = null;\n    if (this.parsedCollectionsDesc.isEmpty()) {\n      String firstCol = computeInitialCollectionName();\n      return new CandidateCollection(SYNCHRONOUS, firstCol);\n    } else {\n      Instant mostRecentCol = parsedCollectionsDesc.get(0).getKey();\n\n      // despite most logic hinging on the first element, we must loop so we can complain if the doc\n      // is too old and there's no valid collection.\n      for (int i = 0; i < parsedCollectionsDesc.size(); i++) {\n        Map.Entry<Instant, String> entry = parsedCollectionsDesc.get(i);\n        Instant colStartTime = entry.getKey();\n        if (i == 0) {\n          next = computeNextCollTimestamp(colStartTime);\n        }\n        if (!docTimestamp.isBefore(colStartTime)) {  // (inclusive lower bound)\n          CandidateCollection candidate;\n          if (i == 0) {\n            if (docTimestamp.isBefore(next)) {       // (exclusive upper bound)\n              candidate = new CandidateCollection(NONE, entry.getValue()); //found it\n              // simply goes to head collection no action required\n            } else {\n              // Although we create collections one at a time, this calculation of the ultimate destination is\n              // useful for contextualizing TRA's used as dimensions in DRA's\n              String creationCol = calcNextCollection(colStartTime);\n              Instant colDestTime = colStartTime;\n              Instant possibleDestTime = colDestTime;\n              while (!docTimestamp.isBefore(possibleDestTime) || docTimestamp.equals(possibleDestTime)) {\n                colDestTime = possibleDestTime;\n                possibleDestTime = computeNextCollTimestamp(colDestTime);\n              }\n              String destCol = TimeRoutedAlias.formatCollectionNameFromInstant(getAliasName(),colDestTime);\n              candidate = new CandidateCollection(SYNCHRONOUS, destCol, creationCol); //found it\n            }\n          } else {\n            // older document simply goes to existing collection, nothing created.\n            candidate = new CandidateCollection(NONE, entry.getValue()); //found it\n          }\n\n          if (candidate.getCreationType() == NONE && isNotBlank(getPreemptiveCreateWindow()) && !this.preemptiveCreateOnceAlready) {\n            // are we getting close enough to the (as yet uncreated) next collection to warrant preemptive creation?\n            Instant time2Create = calcPreemptNextColCreateTime(getPreemptiveCreateWindow(), computeNextCollTimestamp(mostRecentCol));\n            if (!docTimestamp.isBefore(time2Create)) {\n              String destinationCollection = candidate.getDestinationCollection(); // dest doesn't change\n              String creationCollection = calcNextCollection(mostRecentCol);\n              return new CandidateCollection(ASYNC_PREEMPTIVE, // add next collection\n                  destinationCollection,\n                  creationCollection);\n            }\n          }\n          return candidate;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}