{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Return true iff we represent the same query as o\r\n   * @param o another object\r\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\r\n   */\r\n  public boolean equals(Object o) {\r\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\r\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\r\n    return this.getBoost() == other.getBoost()\r\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\r\n            && this.disjuncts.equals(other.disjuncts);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\r\n   * @param o another object\r\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\r\n   */\r\n  public boolean equals(Object o) {\r\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\r\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\r\n    return this.getBoost() == other.getBoost()\r\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\r\n            && this.disjuncts.equals(other.disjuncts);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e0d3ac29cb12b76130b702427d6bcd355e68d126"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"2123bddbd65dea198cac380540636ce43a880403":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}