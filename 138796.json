{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesNoCardinality(int[],byte[],byte[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","commits":[{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesNoCardinality(int[],byte[],byte[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  void visitDocValuesNoCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                      IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n\n    if (numIndexDims != 1 && version >= BKDWriter.VERSION_LEAF_STORES_BOUNDS) {\n      byte[] minPackedValue = scratchMinIndexPackedValue;\n      System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n      byte[] maxPackedValue = scratchMaxIndexPackedValue;\n      // Copy common prefixes before reading adjusted box\n      System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n      readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n      // The index gives us range of values for each dimension, but the actual range of values\n      // might be much more narrow than what the index told us, so we double check the relation\n      // here, which is cheap yet might help figure out that the block either entirely matches\n      // or does not match at all. This is especially more likely in the case that there are\n      // multiple dimensions that have correlation, ie. splitting on one dimension also\n      // significantly changes the range of values in another dimension.\n      Relation r = visitor.compare(minPackedValue, maxPackedValue);\n      if (r == Relation.CELL_OUTSIDE_QUERY) {\n        return;\n      }\n      visitor.grow(count);\n\n      if (r == Relation.CELL_INSIDE_QUERY) {\n        for (int i = 0; i < count; ++i) {\n          visitor.visit(docIDs[i]);\n        }\n        return;\n      }\n    } else {\n      visitor.grow(count);\n    }\n\n\n    int compressedDim = readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitUniqueRawDocValues(scratchDataPackedValue, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a14a9a6131884330f34844dabc1ece206ceaea9","date":1561954503,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesNoCardinality(int[],byte[],byte[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesNoCardinality(int[],byte[],byte[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValuesNoCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                      IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor) throws IOException {\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n\n    if (numIndexDims != 1 && version >= BKDWriter.VERSION_LEAF_STORES_BOUNDS) {\n      byte[] minPackedValue = scratchMinIndexPackedValue;\n      System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n      byte[] maxPackedValue = scratchMaxIndexPackedValue;\n      // Copy common prefixes before reading adjusted box\n      System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n      readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n      // The index gives us range of values for each dimension, but the actual range of values\n      // might be much more narrow than what the index told us, so we double check the relation\n      // here, which is cheap yet might help figure out that the block either entirely matches\n      // or does not match at all. This is especially more likely in the case that there are\n      // multiple dimensions that have correlation, ie. splitting on one dimension also\n      // significantly changes the range of values in another dimension.\n      Relation r = visitor.compare(minPackedValue, maxPackedValue);\n      if (r == Relation.CELL_OUTSIDE_QUERY) {\n        return;\n      }\n      visitor.grow(count);\n\n      if (r == Relation.CELL_INSIDE_QUERY) {\n        for (int i = 0; i < count; ++i) {\n          visitor.visit(scratchIterator.docIDs[i]);\n        }\n        return;\n      }\n    } else {\n      visitor.grow(count);\n    }\n\n\n    int compressedDim = readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitUniqueRawDocValues(scratchDataPackedValue, scratchIterator, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  void visitDocValuesNoCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                      IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n\n    if (numIndexDims != 1 && version >= BKDWriter.VERSION_LEAF_STORES_BOUNDS) {\n      byte[] minPackedValue = scratchMinIndexPackedValue;\n      System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n      byte[] maxPackedValue = scratchMaxIndexPackedValue;\n      // Copy common prefixes before reading adjusted box\n      System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n      readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n      // The index gives us range of values for each dimension, but the actual range of values\n      // might be much more narrow than what the index told us, so we double check the relation\n      // here, which is cheap yet might help figure out that the block either entirely matches\n      // or does not match at all. This is especially more likely in the case that there are\n      // multiple dimensions that have correlation, ie. splitting on one dimension also\n      // significantly changes the range of values in another dimension.\n      Relation r = visitor.compare(minPackedValue, maxPackedValue);\n      if (r == Relation.CELL_OUTSIDE_QUERY) {\n        return;\n      }\n      visitor.grow(count);\n\n      if (r == Relation.CELL_INSIDE_QUERY) {\n        for (int i = 0; i < count; ++i) {\n          visitor.visit(docIDs[i]);\n        }\n        return;\n      }\n    } else {\n      visitor.grow(count);\n    }\n\n\n    int compressedDim = readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitUniqueRawDocValues(scratchDataPackedValue, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a14a9a6131884330f34844dabc1ece206ceaea9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}