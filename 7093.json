{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","commits":[{"id":"0c17d12803da6cadc96b3cdf15b0b940eddb28de","date":1323710889,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4ceb6a6c707ada1df8bde804e25c98668e699a18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}