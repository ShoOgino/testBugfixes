{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","commits":[{"id":"449bfd05ae28dcff263bf35fdb5fb75ae72446d3","date":1484383935,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a filter that uses the provided prefix.\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *               name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      this.prefixes = prefixes;\n      if (prefixes.length == 0) {\n        allMatch = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a filter that uses the provided prefix.\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *               name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      this.prefixes = prefixes;\n      if (prefixes.length == 0) {\n        allMatch = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","sourceNew":"    /**\n     * Create a filter that uses the provided prefixes.\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *               name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      if (prefixes.length > 0) {\n        this.prefixes.addAll(Arrays.asList(prefixes));\n      }\n      if (this.prefixes.isEmpty()) {\n        allMatch = true;\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a filter that uses the provided prefix.\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *               name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      this.prefixes = prefixes;\n      if (prefixes.length == 0) {\n        allMatch = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.PrefixFilter#PrefixFilter(String...).mjava","sourceNew":"    /**\n     * Create a filter that uses the provided prefixes.\n     *\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *                 name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      if (prefixes.length > 0) {\n        this.prefixes.addAll(Arrays.asList(prefixes));\n      }\n      if (this.prefixes.isEmpty()) {\n        allMatch = true;\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a filter that uses the provided prefixes.\n     * @param prefixes prefixes to use, must not be null. If empty then any\n     *               name will match, if not empty then match on any prefix will\n     *                 succeed (logical OR).\n     */\n    public PrefixFilter(String... prefixes) {\n      Objects.requireNonNull(prefixes);\n      if (prefixes.length > 0) {\n        this.prefixes.addAll(Arrays.asList(prefixes));\n      }\n      if (this.prefixes.isEmpty()) {\n        allMatch = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3","507e7decdf00981d09a74632ea30299a4ce6ba72"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","507e7decdf00981d09a74632ea30299a4ce6ba72"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}