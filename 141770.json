{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","commits":[{"id":"c9eee76c6a8ac63dd88a66571d553973ea0a1131","date":1480015269,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"/dev/null","sourceNew":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = EasyMock.createMock(LBHttpSolrClient.class);\n    EasyMock.reset(mockLbclient);\n\n    mockLbclient.request(EasyMock.anyObject(LBHttpSolrClient.Req.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      LBHttpSolrClient.Req req = (LBHttpSolrClient.Req) EasyMock.getCurrentArguments()[0];\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    }).anyTimes();\n\n    mockLbclient.getHttpClient();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    EasyMock.replay(mockLbclient);\n    return mockLbclient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"/dev/null","sourceNew":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = EasyMock.createMock(LBHttpSolrClient.class);\n    EasyMock.reset(mockLbclient);\n\n    mockLbclient.request(EasyMock.anyObject(LBHttpSolrClient.Req.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      LBHttpSolrClient.Req req = (LBHttpSolrClient.Req) EasyMock.getCurrentArguments()[0];\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    }).anyTimes();\n\n    mockLbclient.getHttpClient();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    EasyMock.replay(mockLbclient);\n    return mockLbclient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","sourceNew":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBHttpSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","sourceOld":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = EasyMock.createMock(LBHttpSolrClient.class);\n    EasyMock.reset(mockLbclient);\n\n    mockLbclient.request(EasyMock.anyObject(LBHttpSolrClient.Req.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      LBHttpSolrClient.Req req = (LBHttpSolrClient.Req) EasyMock.getCurrentArguments()[0];\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    }).anyTimes();\n\n    mockLbclient.getHttpClient();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    EasyMock.replay(mockLbclient);\n    return mockLbclient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","sourceNew":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","sourceOld":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBHttpSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","sourceOld":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","sourceNew":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#getMockLbHttpSolrClient(Map[String,Function]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private LBHttpSolrClient getMockLbHttpSolrClient(\n          @SuppressWarnings({\"rawtypes\"})Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      @SuppressWarnings({\"rawtypes\"})\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","sourceOld":"  private LBHttpSolrClient getMockLbHttpSolrClient(Map<String, Function> responses) throws Exception {\n    LBHttpSolrClient mockLbclient = mock(LBHttpSolrClient.class);\n\n    when(mockLbclient.request(any(LBSolrClient.Req.class))).then(invocationOnMock -> {\n      LBHttpSolrClient.Req req = invocationOnMock.getArgument(0);\n      Function f = responses.get(\"request\");\n      if (f == null) return null;\n      Object res = f.apply(null);\n      if (res instanceof Exception) throw (Throwable) res;\n      LBHttpSolrClient.Rsp rsp = new LBHttpSolrClient.Rsp();\n      rsp.rsp = (NamedList<Object>) res;\n      rsp.server = req.servers.get(0);\n      return rsp;\n    });\n    return mockLbclient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["9ba1b632c041956c93c41aa1143d16a567014891"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["727bb765ff2542275f6d31f67be18d7104bae148","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}