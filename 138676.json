{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43acd3a99a12a5bec9c72097de0e294c80cb6daa","date":1396327381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n\n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n\n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n\n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n\n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n    \n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n    \n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n    \n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eac7b217fb57548b6fc21f0117e74698afde766","date":1452862547,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenRangeSinkTokenizerTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2, 4);\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(whitespaceMockTokenizer(test));\n    TeeSinkTokenFilter.SinkTokenStream rangeToks = tee.newSinkTokenStream(sinkFilter);\n\n    int count = 0;\n    tee.reset();\n    while(tee.incrementToken()) {\n      count++;\n    }\n\n    int sinkCount = 0;\n    rangeToks.reset();\n    while (rangeToks.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n    assertTrue(\"rangeToks Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eac7b217fb57548b6fc21f0117e74698afde766"],"3eac7b217fb57548b6fc21f0117e74698afde766":["43acd3a99a12a5bec9c72097de0e294c80cb6daa"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["5eb2511ababf862ea11e10761c70ee560cd84510","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["5eb2511ababf862ea11e10761c70ee560cd84510","3eac7b217fb57548b6fc21f0117e74698afde766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3eac7b217fb57548b6fc21f0117e74698afde766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}