{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Return a boolean property.\r\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \r\n   * as array of boleans. It is extracted once, on first call\r\n   * to get() it, and a by-round-value is returned. \r\n   * @param name name of property\r\n   * @param dflt default value\r\n   * @return a int property.\r\n   */\r\n  public boolean get (String name, boolean dflt) {\r\n    // use value by round if already parsed\r\n    boolean vals[] = (boolean[]) valByRound.get(name);\r\n    if (vals != null) {\r\n      return vals[roundNumber % vals.length];\r\n    }\r\n    // done if not by round \r\n    String sval = props.getProperty(name,\"\"+dflt);\r\n    if (sval.indexOf(\":\")<0) {\r\n      return Boolean.valueOf(sval).booleanValue();\r\n    }\r\n    // first time this prop is extracted by round \r\n    int k = sval.indexOf(\":\");\r\n    String colName = sval.substring(0,k);\r\n    sval = sval.substring(k+1);\r\n    colForValByRound.put(name,colName);\r\n    vals = propToBooleanArray(sval);\r\n    valByRound.put(name,vals);\r\n    return vals[roundNumber % vals.length];\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \n   * as array of boleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get (String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\r\n   * Return a boolean property.\r\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \r\n   * as array of boleans. It is extracted once, on first call\r\n   * to get() it, and a by-round-value is returned. \r\n   * @param name name of property\r\n   * @param dflt default value\r\n   * @return a int property.\r\n   */\r\n  public boolean get (String name, boolean dflt) {\r\n    // use value by round if already parsed\r\n    boolean vals[] = (boolean[]) valByRound.get(name);\r\n    if (vals != null) {\r\n      return vals[roundNumber % vals.length];\r\n    }\r\n    // done if not by round \r\n    String sval = props.getProperty(name,\"\"+dflt);\r\n    if (sval.indexOf(\":\")<0) {\r\n      return Boolean.valueOf(sval).booleanValue();\r\n    }\r\n    // first time this prop is extracted by round \r\n    int k = sval.indexOf(\":\");\r\n    String colName = sval.substring(0,k);\r\n    sval = sval.substring(k+1);\r\n    colForValByRound.put(name,colName);\r\n    vals = propToBooleanArray(sval);\r\n    valByRound.put(name,vals);\r\n    return vals[roundNumber % vals.length];\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get (String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \n   * as array of boleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get (String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get (String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted \n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get (String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}