{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testSimpleEquals().mjava","commits":[{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testSimpleEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testSingleFieldEquals().mjava","sourceNew":"  public void testSimpleEquals() {\n    // Two terms with the same hash code\n    assertEquals(\"AaAaBB\".hashCode(), \"BBBBBB\".hashCode());\n    TermInSetQuery left = new TermInSetQuery(\"id\", new BytesRef(\"AaAaAa\"), new BytesRef(\"AaAaBB\"));\n    TermInSetQuery right = new TermInSetQuery(\"id\", new BytesRef(\"AaAaAa\"), new BytesRef(\"BBBBBB\"));\n    assertFalse(left.equals(right));\n  }\n\n","sourceOld":"  public void testSingleFieldEquals() {\n    // Two terms with the same hash code\n    assertEquals(\"AaAaBB\".hashCode(), \"BBBBBB\".hashCode());\n    TermInSetQuery left = termsQuery(true, new Term(\"id\", \"AaAaAa\"), new Term(\"id\", \"AaAaBB\"));\n    TermInSetQuery right = termsQuery(true, new Term(\"id\", \"AaAaAa\"), new Term(\"id\", \"BBBBBB\"));\n    assertFalse(left.equals(right));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testSimpleEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testSingleFieldEquals().mjava","sourceNew":"  public void testSimpleEquals() {\n    // Two terms with the same hash code\n    assertEquals(\"AaAaBB\".hashCode(), \"BBBBBB\".hashCode());\n    TermInSetQuery left = new TermInSetQuery(\"id\", new BytesRef(\"AaAaAa\"), new BytesRef(\"AaAaBB\"));\n    TermInSetQuery right = new TermInSetQuery(\"id\", new BytesRef(\"AaAaAa\"), new BytesRef(\"BBBBBB\"));\n    assertFalse(left.equals(right));\n  }\n\n","sourceOld":"  public void testSingleFieldEquals() {\n    // Two terms with the same hash code\n    assertEquals(\"AaAaBB\".hashCode(), \"BBBBBB\".hashCode());\n    TermInSetQuery left = termsQuery(true, new Term(\"id\", \"AaAaAa\"), new Term(\"id\", \"AaAaBB\"));\n    TermInSetQuery right = termsQuery(true, new Term(\"id\", \"AaAaAa\"), new Term(\"id\", \"BBBBBB\"));\n    assertFalse(left.equals(right));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"830a7b9be2f498e249b346796921c94cdd39d98f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["830a7b9be2f498e249b346796921c94cdd39d98f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"830a7b9be2f498e249b346796921c94cdd39d98f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["830a7b9be2f498e249b346796921c94cdd39d98f","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}