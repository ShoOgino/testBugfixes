{"path":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    public boolean next() throws IOException {\r\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\r\n      if (top == null) {\r\n        term = null;\r\n        return false;\r\n      }\r\n  \r\n      term = top.term;\r\n      docFreq = 0;\r\n  \r\n      while (top != null && term.compareTo(top.term) == 0) {\r\n        queue.pop();\r\n        docFreq += top.termEnum.docFreq();    // increment freq\r\n        if (top.next())\r\n          queue.put(top);          // restore queue\r\n        else\r\n          top.close();          // done with a segment\r\n        top = (SegmentMergeInfo)queue.top();\r\n      }\r\n      return true;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        if (top.next())\n          queue.put(top);          // restore queue\n        else\n          top.close();          // done with a segment\n        top = (SegmentMergeInfo)queue.top();\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\r\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\r\n      if (top == null) {\r\n        term = null;\r\n        return false;\r\n      }\r\n  \r\n      term = top.term;\r\n      docFreq = 0;\r\n  \r\n      while (top != null && term.compareTo(top.term) == 0) {\r\n        queue.pop();\r\n        docFreq += top.termEnum.docFreq();    // increment freq\r\n        if (top.next())\r\n          queue.put(top);          // restore queue\r\n        else\r\n          top.close();          // done with a segment\r\n        top = (SegmentMergeInfo)queue.top();\r\n      }\r\n      return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399","date":1242319223,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        if (top.next())\n          queue.put(top);          // restore queue\n        else\n          top.close();          // done with a segment\n        top = (SegmentMergeInfo)queue.top();\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["520a9bce43d52d77add8f09727f7a698289d6882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}