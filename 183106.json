{"path":"src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","commits":[{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  public Field createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len,\n            getFieldStore(field, null));\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  public Field createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len,\n            getFieldStore(field, null));\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  public Field createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len,\n            getFieldStore(field, null));\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8281d815c10235e2dab9ded85615ebe920dd3c22":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}