{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"/dev/null","sourceNew":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    StreamingUpdateSolrServer suss = new StreamingUpdateSolrServer(\n        ((CommonsHttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"/dev/null","sourceNew":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    StreamingUpdateSolrServer suss = new StreamingUpdateSolrServer(\n        ((CommonsHttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"/dev/null","sourceNew":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    StreamingUpdateSolrServer suss = new StreamingUpdateSolrServer(\n        ((CommonsHttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    StreamingUpdateSolrServer suss = new StreamingUpdateSolrServer(\n        ((CommonsHttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws MalformedURLException, Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    suss.setConnectionTimeout(15000);\n    suss.setSoTimeout(30000);\n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    suss.setConnectionTimeout(15000);\n    suss.setSoTimeout(30000);\n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    \n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    try {\n      suss.setConnectionTimeout(15000);\n      suss.setSoTimeout(30000);\n      for (int i = 100; i < 150; i++) {\n        index_specific(suss, id, i);\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n      \n      checkShardConsistency();\n    } finally {\n      suss.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    suss.setConnectionTimeout(15000);\n    suss.setSoTimeout(30000);\n    for (int i=100; i<150; i++) {\n      index_specific(suss, id, i);      \n    }\n    suss.blockUntilFinished();\n    \n    commit();\n    \n    checkShardConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss().mjava","sourceNew":null,"sourceOld":"  private void testIndexingWithSuss() throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 3, 1);\n    try {\n      suss.setConnectionTimeout(15000);\n      suss.setSoTimeout(30000);\n      for (int i = 100; i < 150; i++) {\n        index_specific(suss, id, i);\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n      \n      checkShardConsistency();\n    } finally {\n      suss.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","a69439d0df009e0bb0038d1e427159f449dd670d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a69439d0df009e0bb0038d1e427159f449dd670d"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2d750082a4223c20902ef11ff6a9831d55738ea4"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","a69439d0df009e0bb0038d1e427159f449dd670d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}