{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","sourceNew":"  private static List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","sourceOld":"  private static List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","sourceNew":null,"sourceOld":"  private static List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}