{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}