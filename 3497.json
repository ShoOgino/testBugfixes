{"path":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Random random = newRandom();\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory ramDir1=new MockRAMDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    MockRAMDirectory ramDir2=new MockRAMDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Random random = newRandom();\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    MockRAMDirectory ramDir1=newDirectory(random);\n    addDoc(random, ramDir1, \"test foo\", true);\n    MockRAMDirectory ramDir2=newDirectory(random);\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory ramDir1=new MockRAMDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    MockRAMDirectory ramDir2=new MockRAMDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory(random);\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory(random);\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    MockRAMDirectory ramDir1=newDirectory(random);\n    addDoc(random, ramDir1, \"test foo\", true);\n    MockRAMDirectory ramDir2=newDirectory(random);\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory(random);\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory(random);\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir=newDirectory();\n    addDoc(random, ramDir, \"test foo\", true);\n    DirectoryReader reader = DirectoryReader.open(ramDir);\n    assertTrue(reader.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir, \"more text\", false);\n    assertFalse(reader.isCurrent());   // has been modified, not current anymore\n    reader.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir=newDirectory();\n    addDoc(random, ramDir, \"test foo\", true);\n    DirectoryReader reader = DirectoryReader.open(ramDir);\n    assertTrue(reader.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir, \"more text\", false);\n    assertFalse(reader.isCurrent());   // has been modified, not current anymore\n    reader.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir1=newDirectory();\n    addDoc(random, ramDir1, \"test foo\", true);\n    Directory ramDir2=newDirectory();\n    addDoc(random, ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(random, ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n    ramDir1.close();\n    ramDir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory ramDir=newDirectory();\n    addDoc(random, ramDir, \"test foo\", true);\n    DirectoryReader reader = DirectoryReader.open(ramDir);\n    assertTrue(reader.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir, \"more text\", false);\n    assertFalse(reader.isCurrent());   // has been modified, not current anymore\n    reader.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory ramDir=newDirectory();\n    addDoc(random, ramDir, \"test foo\", true);\n    DirectoryReader reader = DirectoryReader.open(ramDir);\n    assertTrue(reader.isCurrent());   // just opened, must be current\n    addDoc(random, ramDir, \"more text\", false);\n    assertFalse(reader.isCurrent());   // has been modified, not current anymore\n    reader.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1f653cfcf159baeaafe5d01682a911e95bba4012","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","868186558eb3a854ce7e720a52bb445795d54910"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1f653cfcf159baeaafe5d01682a911e95bba4012","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868186558eb3a854ce7e720a52bb445795d54910":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}