{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","commits":[{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","sourceNew":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48499be433b284c562fb2418fe7b858e1ac3b031","date":1597289664,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap(boolean).mjava","sourceNew":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEachEntry(action);\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap(boolean allowDps) {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        if (allowDps) {\n          NamedList.this.add(key, value);\n          return null;\n        }\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48499be433b284c562fb2418fe7b858e1ac3b031":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48499be433b284c562fb2418fe7b858e1ac3b031"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"48499be433b284c562fb2418fe7b858e1ac3b031":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["48499be433b284c562fb2418fe7b858e1ac3b031"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}