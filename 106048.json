{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","commits":[{"id":"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6","date":1547236077,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(\"2017-10-23\", numShards, alias); // This one should have already existed from the alias creation\n    waitColAndAlias(\"2017-10-24\", numShards, alias); // Create 1\n    waitColAndAlias(\"2017-10-25\", numShards, alias); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","sourceNew":"  @SuppressWarnings(\"SameParameterValue\")\n  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(alias, \"_\", \"2017-10-23\", numShards); // This one should have already existed from the alias creation\n    waitColAndAlias(alias, \"_\", \"2017-10-24\", numShards); // Create 1\n    waitColAndAlias(alias, \"_\", \"2017-10-25\", numShards); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","sourceOld":"  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(\"2017-10-23\", numShards, alias); // This one should have already existed from the alias creation\n    waitColAndAlias(\"2017-10-24\", numShards, alias); // Create 1\n    waitColAndAlias(\"2017-10-25\", numShards, alias); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","sourceNew":"  @SuppressWarnings(\"SameParameterValue\")\n  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(alias, TRA, \"2017-10-23\", numShards); // This one should have already existed from the alias creation\n    waitColAndAlias(alias, TRA, \"2017-10-24\", numShards); // Create 1\n    waitColAndAlias(alias, TRA, \"2017-10-25\", numShards); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"SameParameterValue\")\n  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(alias, \"_\", \"2017-10-23\", numShards); // This one should have already existed from the alias creation\n    waitColAndAlias(alias, \"_\", \"2017-10-24\", numShards); // Create 1\n    waitColAndAlias(alias, \"_\", \"2017-10-25\", numShards); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addOneDocSynchCreation(int,String).mjava","sourceNew":"  @SuppressWarnings(\"SameParameterValue\")\n  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(alias, TRA, \"2017-10-23\", numShards); // This one should have already existed from the alias creation\n    waitColAndAlias(alias, TRA, \"2017-10-24\", numShards); // Create 1\n    waitColAndAlias(alias, TRA, \"2017-10-25\", numShards); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n\n    validateCollectionCountAndAvailability(alias, 3, \"was expecting 3 live collections\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"SameParameterValue\")\n  private void addOneDocSynchCreation(int numShards, String alias) throws SolrServerException, IOException, InterruptedException {\n    // cause some collections to be created\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-25T00:00:00Z\")\n    ));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    // wait for all the collections to exist...\n    waitColAndAlias(alias, TRA, \"2017-10-23\", numShards); // This one should have already existed from the alias creation\n    waitColAndAlias(alias, TRA, \"2017-10-24\", numShards); // Create 1\n    waitColAndAlias(alias, TRA, \"2017-10-25\", numShards); // Create 2nd synchronously (ensure this is not broken)\n\n    // normal update, nothing special, no collection creation required.\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3,cols.size());\n\n    assertNumDocs(\"2017-10-23\", 0, alias);\n    assertNumDocs(\"2017-10-24\", 0, alias);\n    assertNumDocs(\"2017-10-25\", 1, alias);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"b627755385655c7cd3fb296f17593658805cf4d5":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}