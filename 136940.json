{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","commits":[{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<String, List<String>>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<String>();\n      Replica leader = slice.getLeader();\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ada21a57ca8bbc2b585acd8c1245697699c97ac","date":1379443539,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<String, List<String>>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<String>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<String, List<String>>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<String>();\n      Replica leader = slice.getLeader();\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<String, List<String>>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<String>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c3220315ea287974a871d44efa3acaa6d13e249","date":1399518805,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getBaseUrl() + \"/\" + col.getName();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getBaseUrl() + \"/\" + col.getName();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c3220315ea287974a871d44efa3acaa6d13e249":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6ada21a57ca8bbc2b585acd8c1245697699c97ac"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ada21a57ca8bbc2b585acd8c1245697699c97ac":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c3220315ea287974a871d44efa3acaa6d13e249"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"4c3220315ea287974a871d44efa3acaa6d13e249":["bafca15d8e408346a67f4282ad1143b88023893b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4c3220315ea287974a871d44efa3acaa6d13e249"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["6ada21a57ca8bbc2b585acd8c1245697699c97ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"6ada21a57ca8bbc2b585acd8c1245697699c97ac":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}