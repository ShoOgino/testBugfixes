{"path":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestMergeStrategy1#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","commits":[{"id":"6c70567cc1ae757045c80cb458b0b2a2ffcf0141","date":1400098332,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestMergeStrategy1#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"    private NamedList unmarshalSortValues(SortSpec sortSpec,\n                                          NamedList sortFieldValues,\n                                          IndexSchema schema) {\n      NamedList unmarshalledSortValsPerField = new NamedList();\n\n      if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n\n      List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n      SortField[] sortFields = sortSpec.getSort().getSort();\n\n      int marshalledFieldNum = 0;\n      for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n        final SortField sortField = sortFields[sortFieldNum];\n        final SortField.Type type = sortField.getType();\n\n        // :TODO: would be simpler to always serialize every position of SortField[]\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        final String sortFieldName = sortField.getField();\n        final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n        assert sortFieldName.equals(valueFieldName)\n            : \"sortFieldValues name key does not match expected SortField.getField\";\n\n        List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n        final SchemaField schemaField = schemaFields.get(sortFieldNum);\n        if (null == schemaField) {\n          unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n        } else {\n          FieldType fieldType = schemaField.getType();\n          List unmarshalledSortVals = new ArrayList();\n          for (Object sortVal : sortVals) {\n            unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n          }\n          unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n        }\n        marshalledFieldNum++;\n      }\n      return unmarshalledSortValsPerField;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestMergeStrategy1#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"    private NamedList unmarshalSortValues(SortSpec sortSpec,\n                                          NamedList sortFieldValues,\n                                          IndexSchema schema) {\n      NamedList unmarshalledSortValsPerField = new NamedList();\n\n      if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n\n      List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n      SortField[] sortFields = sortSpec.getSort().getSort();\n\n      int marshalledFieldNum = 0;\n      for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n        final SortField sortField = sortFields[sortFieldNum];\n        final SortField.Type type = sortField.getType();\n\n        // :TODO: would be simpler to always serialize every position of SortField[]\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        final String sortFieldName = sortField.getField();\n        final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n        assert sortFieldName.equals(valueFieldName)\n            : \"sortFieldValues name key does not match expected SortField.getField\";\n\n        List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n        final SchemaField schemaField = schemaFields.get(sortFieldNum);\n        if (null == schemaField) {\n          unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n        } else {\n          FieldType fieldType = schemaField.getType();\n          List unmarshalledSortVals = new ArrayList();\n          for (Object sortVal : sortVals) {\n            unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n          }\n          unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n        }\n        marshalledFieldNum++;\n      }\n      return unmarshalledSortValsPerField;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd81b9f1e22432a668756e938bfb0835c1abb11b","date":1546254331,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.TestMergeStrategy1#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestMergeStrategy1#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","sourceNew":"    private NamedList unmarshalSortValues(SortSpec sortSpec,\n                                          NamedList sortFieldValues,\n                                          IndexSchema schema) {\n      NamedList unmarshalledSortValsPerField = new NamedList();\n\n      if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n\n      List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n      SortField[] sortFields = sortSpec.getSort().getSort();\n\n      int marshalledFieldNum = 0;\n      for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n        final SortField sortField = sortFields[sortFieldNum];\n        final SortField.Type type = sortField.getType();\n\n        // :TODO: would be simpler to always serialize every position of SortField[]\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        final String sortFieldName = sortField.getField();\n        final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n        assert sortFieldName.equals(valueFieldName)\n            : \"sortFieldValues name key does not match expected SortField.getField\";\n\n        List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n        final SchemaField schemaField = schemaFields.get(sortFieldNum);\n        if (null == schemaField) {\n          unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n        } else {\n          FieldType fieldType = schemaField.getType();\n          List unmarshalledSortVals = new ArrayList();\n          for (Object sortVal : sortVals) {\n            unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n          }\n          unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n        }\n        marshalledFieldNum++;\n      }\n      return unmarshalledSortValsPerField;\n    }\n\n","sourceOld":"    private NamedList unmarshalSortValues(SortSpec sortSpec,\n                                          NamedList sortFieldValues,\n                                          IndexSchema schema) {\n      NamedList unmarshalledSortValsPerField = new NamedList();\n\n      if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n\n      List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n      SortField[] sortFields = sortSpec.getSort().getSort();\n\n      int marshalledFieldNum = 0;\n      for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n        final SortField sortField = sortFields[sortFieldNum];\n        final SortField.Type type = sortField.getType();\n\n        // :TODO: would be simpler to always serialize every position of SortField[]\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        final String sortFieldName = sortField.getField();\n        final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n        assert sortFieldName.equals(valueFieldName)\n            : \"sortFieldValues name key does not match expected SortField.getField\";\n\n        List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n        final SchemaField schemaField = schemaFields.get(sortFieldNum);\n        if (null == schemaField) {\n          unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n        } else {\n          FieldType fieldType = schemaField.getType();\n          List unmarshalledSortVals = new ArrayList();\n          for (Object sortVal : sortVals) {\n            unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n          }\n          unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n        }\n        marshalledFieldNum++;\n      }\n      return unmarshalledSortValsPerField;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["6c70567cc1ae757045c80cb458b0b2a2ffcf0141"],"6c70567cc1ae757045c80cb458b0b2a2ffcf0141":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd81b9f1e22432a668756e938bfb0835c1abb11b"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c70567cc1ae757045c80cb458b0b2a2ffcf0141"]},"commit2Childs":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c70567cc1ae757045c80cb458b0b2a2ffcf0141":["bd81b9f1e22432a668756e938bfb0835c1abb11b","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c70567cc1ae757045c80cb458b0b2a2ffcf0141","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}