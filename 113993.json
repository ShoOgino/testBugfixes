{"path":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistAllCores(Properties,Map[String,String],Map[String,String],File).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistAllCores(Properties,Map[String,String],Map[String,String],File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * PersistSolrProperties persists the Solr.properties file only,\n   * <p/>\n   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just\n   * persist the solr.properties file for an individual core.\n   * The individual cores were persisted in addPersistCore calls above.\n   * <p/>\n   * TODO: Remove all parameters for 5.0 when we obsolete ConfigSolrXmlBackCompat\n   *\n   * @param containerProperties - ignored, here for back compat.\n   * @param rootSolrAttribs     - ignored, here for back compat.\n   * @param coresAttribs        - ignored, here for back compat.\n   * @param file                - ignored, here for back compat.\n   */\n\n  @Override\n  public void addPersistAllCores(Properties containerProperties, Map<String, String> rootSolrAttribs,\n                                 Map<String, String> coresAttribs, File file) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    // First persist solr.properties\n    File parent = new File(container.getSolrHome());\n    File props = new File(parent, SOLR_PROPERTIES_FILE);\n    Properties propsOut = new Properties();\n    propsOut.putAll(container.getContainerProperties());\n    for (String prop : origsolrprops.stringPropertyNames()) {\n      String toTest = origsolrprops.getProperty(prop);\n      if (toTest.indexOf(\"$\") != -1) { // Don't store away things that should be system properties\n        propsOut.put(prop, toTest);\n      }\n    }\n    try {\n      propsOut.store(new FileOutputStream(props), null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist file \" + props.getAbsolutePath(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f932f4f1026b6902f7a69ce428340678e26a6a0","date":1362349021,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistAllCores(Properties,Map[String,String],Map[String,String],File).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistAllCores(Properties,Map[String,String],Map[String,String],File).mjava","sourceNew":"  /**\n   * PersistSolrProperties persists the Solr.properties file only,\n   * <p/>\n   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just\n   * persist the solr.properties file for an individual core.\n   * The individual cores were persisted in addPersistCore calls above.\n   * <p/>\n   * TODO: Remove all parameters for 5.0 when we obsolete ConfigSolrXmlBackCompat\n   *\n   * @param containerProperties - ignored, here for back compat.\n   * @param rootSolrAttribs     - ignored, here for back compat.\n   * @param coresAttribs        - ignored, here for back compat.\n   * @param file                - ignored, here for back compat.\n   */\n\n  @Override\n  public void addPersistAllCores(Properties containerProperties, Map<String, String> rootSolrAttribs,\n                                 Map<String, String> coresAttribs, File file) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    // First persist solr.properties\n    File parent = new File(container.getSolrHome());\n    File props = new File(parent, SOLR_PROPERTIES_FILE);\n    Properties propsOut = new Properties();\n    propsOut.putAll(container.getContainerProperties());\n    for (String prop : origsolrprops.stringPropertyNames()) {\n      String toTest = origsolrprops.getProperty(prop);\n      if (toTest.indexOf(\"$\") != -1) { // Don't store away things that should be system properties\n        propsOut.put(prop, toTest);\n      }\n    }\n    OutputStream os = null;\n    try {\n      os = new FileOutputStream(props);\n      propsOut.store(os, null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist file \" + props.getAbsolutePath(), e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":"  /**\n   * PersistSolrProperties persists the Solr.properties file only,\n   * <p/>\n   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just\n   * persist the solr.properties file for an individual core.\n   * The individual cores were persisted in addPersistCore calls above.\n   * <p/>\n   * TODO: Remove all parameters for 5.0 when we obsolete ConfigSolrXmlBackCompat\n   *\n   * @param containerProperties - ignored, here for back compat.\n   * @param rootSolrAttribs     - ignored, here for back compat.\n   * @param coresAttribs        - ignored, here for back compat.\n   * @param file                - ignored, here for back compat.\n   */\n\n  @Override\n  public void addPersistAllCores(Properties containerProperties, Map<String, String> rootSolrAttribs,\n                                 Map<String, String> coresAttribs, File file) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    // First persist solr.properties\n    File parent = new File(container.getSolrHome());\n    File props = new File(parent, SOLR_PROPERTIES_FILE);\n    Properties propsOut = new Properties();\n    propsOut.putAll(container.getContainerProperties());\n    for (String prop : origsolrprops.stringPropertyNames()) {\n      String toTest = origsolrprops.getProperty(prop);\n      if (toTest.indexOf(\"$\") != -1) { // Don't store away things that should be system properties\n        propsOut.put(prop, toTest);\n      }\n    }\n    try {\n      propsOut.store(new FileOutputStream(props), null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist file \" + props.getAbsolutePath(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistAllCores(Properties,Map[String,String],Map[String,String],File).mjava","sourceNew":null,"sourceOld":"  /**\n   * PersistSolrProperties persists the Solr.properties file only,\n   * <p/>\n   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just\n   * persist the solr.properties file for an individual core.\n   * The individual cores were persisted in addPersistCore calls above.\n   * <p/>\n   * TODO: Remove all parameters for 5.0 when we obsolete ConfigSolrXmlBackCompat\n   *\n   * @param containerProperties - ignored, here for back compat.\n   * @param rootSolrAttribs     - ignored, here for back compat.\n   * @param coresAttribs        - ignored, here for back compat.\n   * @param file                - ignored, here for back compat.\n   */\n\n  @Override\n  public void addPersistAllCores(Properties containerProperties, Map<String, String> rootSolrAttribs,\n                                 Map<String, String> coresAttribs, File file) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    // First persist solr.properties\n    File parent = new File(container.getSolrHome());\n    File props = new File(parent, SOLR_PROPERTIES_FILE);\n    Properties propsOut = new Properties();\n    propsOut.putAll(container.getContainerProperties());\n    for (String prop : origsolrprops.stringPropertyNames()) {\n      String toTest = origsolrprops.getProperty(prop);\n      if (toTest.indexOf(\"$\") != -1) { // Don't store away things that should be system properties\n        propsOut.put(prop, toTest);\n      }\n    }\n    OutputStream os = null;\n    try {\n      os = new FileOutputStream(props);\n      propsOut.store(os, null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist file \" + props.getAbsolutePath(), e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a837c064b67fa63a9394136e31218b908cdcf783":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}