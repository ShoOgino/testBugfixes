{"path":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb065b657ee556326e3666d83aae3150249aeaa3","date":1294525860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = docState.similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = docState.similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = docState.similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = docState.similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = similarity.computeNorm(fieldState);\n      norms[upto] = similarity.encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"143d45d6fe43d56d1f541059577c929fc0ad27a1","date":1323026648,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0f3cee3d20b0c786e6fca20539454262e29edcab","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["fb065b657ee556326e3666d83aae3150249aeaa3"],"1291e4568eb7d9463d751627596ef14baf4c1603":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"fb065b657ee556326e3666d83aae3150249aeaa3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"143d45d6fe43d56d1f541059577c929fc0ad27a1":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0f3cee3d20b0c786e6fca20539454262e29edcab","143d45d6fe43d56d1f541059577c929fc0ad27a1"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","fb065b657ee556326e3666d83aae3150249aeaa3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1291e4568eb7d9463d751627596ef14baf4c1603","143d45d6fe43d56d1f541059577c929fc0ad27a1","f0b9507caf22f292ac0e5e59f62db4275adf4511","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"fb065b657ee556326e3666d83aae3150249aeaa3":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"143d45d6fe43d56d1f541059577c929fc0ad27a1":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["0f3cee3d20b0c786e6fca20539454262e29edcab","f1bdbf92da222965b46c0a942c3857ba56e5c638","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb065b657ee556326e3666d83aae3150249aeaa3","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}