{"path":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n\n      DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b24326411db492f92ea49f6fb947c90bc73cf19e"]},"commit2Childs":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}