{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","sourceNew":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue(norms[doc]); // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue(norms[doc]); // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","sourceNew":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc)); // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue(norms[doc]); // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6fca07cac66b15729e7870bc0896a88560270b5","date":1360097580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","sourceNew":"    @Override\n    public float score(int doc, int freq) {\n      final float raw = tf(freq)*weightValue;  // compute tf(f)*weight\n\n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc)); // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc)); // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","sourceNew":"    @Override\n    public float score(int doc, int freq) {\n      final float raw = tf(freq)*weightValue;  // compute tf(f)*weight\n\n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc)); // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, int freq) {\n      final float raw =                                // compute tf(f)*weight\n        freq < SCORE_CACHE_SIZE                        // check cache\n        ? scoreCache[freq]                             // cache hit\n        : tf(freq)*weightValue;        // cache miss\n\n      return norms == null ? raw : raw * decodeNormValue(norms[doc]); // normalize for field\n    }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.ExactTFIDFDocScorer#score(int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score(int doc, int freq) {\n      final float raw = tf(freq)*weightValue;  // compute tf(f)*weight\n\n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc)); // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6fca07cac66b15729e7870bc0896a88560270b5":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c6fca07cac66b15729e7870bc0896a88560270b5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b799defcfda6d303cbb180917bf1e749089adf42":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b799defcfda6d303cbb180917bf1e749089adf42"]},"commit2Childs":{"c6fca07cac66b15729e7870bc0896a88560270b5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b799defcfda6d303cbb180917bf1e749089adf42"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b799defcfda6d303cbb180917bf1e749089adf42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["c6fca07cac66b15729e7870bc0896a88560270b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}