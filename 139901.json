{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = true; //= random.nextBoolean();\n    \n    causeConnectionLoss = true;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = random.nextBoolean();\n    causeConnectionLoss = random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fcaa5944562d12b76647462883e41850d7e737d","date":1356497090,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = EXP; //= random.nextBoolean();\n    \n    causeConnectionLoss = CONN_LOSS;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = true; //= random.nextBoolean();\n    \n    causeConnectionLoss = true;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = EXP; //= random.nextBoolean();\n    \n    causeConnectionLoss = CONN_LOSS;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = true; //= random.nextBoolean();\n    \n    causeConnectionLoss = true;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd31721a25ce5c64c43a0fdb8a54eb36f7014a5","date":1383494058,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    Random random = LuceneTestCase.random();\n    if (EXP != null) {\n      expireSessions = EXP; \n    } else {\n      expireSessions = random.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = CONN_LOSS;\n    } else {\n      causeConnectionLoss = random.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    Random random = LuceneTestCase.random();\n    expireSessions = EXP; //= random.nextBoolean();\n    \n    causeConnectionLoss = CONN_LOSS;//= random.nextBoolean();\n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e373ca932bd347b9022c6fd6565e227010c6a9c","date":1458065865,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    this.chaosRandom = new Random(LuceneTestCase.random().nextLong());\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    if (EXP != null) {\n      expireSessions = EXP; \n    } else {\n      expireSessions = chaosRandom.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = CONN_LOSS;\n    } else {\n      causeConnectionLoss = chaosRandom.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    Random random = LuceneTestCase.random();\n    if (EXP != null) {\n      expireSessions = EXP; \n    } else {\n      expireSessions = random.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = CONN_LOSS;\n    } else {\n      causeConnectionLoss = random.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    this.chaosRandom = new Random(LuceneTestCase.random().nextLong());\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    if (EXP != null) {\n      expireSessions = Boolean.parseBoolean(EXP); \n    } else {\n      expireSessions = chaosRandom.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = Boolean.parseBoolean(CONN_LOSS);\n    } else {\n      causeConnectionLoss = chaosRandom.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    this.chaosRandom = new Random(LuceneTestCase.random().nextLong());\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    if (EXP != null) {\n      expireSessions = EXP; \n    } else {\n      expireSessions = chaosRandom.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = CONN_LOSS;\n    } else {\n      causeConnectionLoss = chaosRandom.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#ChaosMonkey(ZkTestServer,ZkStateReader,String,Map[String,List[CloudJettyRunner]],Map[String,CloudJettyRunner]).mjava","sourceNew":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    this.chaosRandom = new Random(LuceneTestCase.random().nextLong());\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    if (EXP != null) {\n      expireSessions = Boolean.parseBoolean(EXP); \n    } else {\n      expireSessions = chaosRandom.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = Boolean.parseBoolean(CONN_LOSS);\n    } else {\n      causeConnectionLoss = chaosRandom.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","sourceOld":"  public ChaosMonkey(ZkTestServer zkServer, ZkStateReader zkStateReader,\n      String collection, Map<String,List<CloudJettyRunner>> shardToJetty,\n      Map<String,CloudJettyRunner> shardToLeaderJetty) {\n    this.shardToJetty = shardToJetty;\n    this.shardToLeaderJetty = shardToLeaderJetty;\n    this.zkServer = zkServer;\n    this.zkStateReader = zkStateReader;\n    this.collection = collection;\n    this.chaosRandom = new Random(LuceneTestCase.random().nextLong());\n    \n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is Disabled and will not run\");\n      return;\n    }\n    \n    if (EXP != null) {\n      expireSessions = EXP; \n    } else {\n      expireSessions = chaosRandom.nextBoolean();\n    }\n    if (CONN_LOSS != null) {\n      causeConnectionLoss = CONN_LOSS;\n    } else {\n      causeConnectionLoss = chaosRandom.nextBoolean();\n    }\n    \n    \n    monkeyLog(\"init - expire sessions:\" + expireSessions\n        + \" cause connection loss:\" + causeConnectionLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","1fcaa5944562d12b76647462883e41850d7e737d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6e373ca932bd347b9022c6fd6565e227010c6a9c","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["6e373ca932bd347b9022c6fd6565e227010c6a9c"],"a6378064655e76cd7b908b1cab4ce425b384b508":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fdd31721a25ce5c64c43a0fdb8a54eb36f7014a5":["1fcaa5944562d12b76647462883e41850d7e737d"],"6e373ca932bd347b9022c6fd6565e227010c6a9c":["fdd31721a25ce5c64c43a0fdb8a54eb36f7014a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"1fcaa5944562d12b76647462883e41850d7e737d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1fcaa5944562d12b76647462883e41850d7e737d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fdd31721a25ce5c64c43a0fdb8a54eb36f7014a5":["6e373ca932bd347b9022c6fd6565e227010c6a9c"],"6e373ca932bd347b9022c6fd6565e227010c6a9c":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"1fcaa5944562d12b76647462883e41850d7e737d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fdd31721a25ce5c64c43a0fdb8a54eb36f7014a5"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a6378064655e76cd7b908b1cab4ce425b384b508","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}