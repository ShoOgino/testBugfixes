{"path":"src/test/org/apache/lucene/index/TestStressIndexing.IndexerThread#run().mjava","commits":[{"id":"08cb7380901e8bc96eacd525a5b157ab9949672a","date":1163818514,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n      try {\n        while(true) {\n\n          if (System.currentTimeMillis() > stopTime) {\n            break;\n          }\n\n          // Add 10 docs:\n          for(int j=0; j<10; j++) {\n            Document d = new Document();\n            int n = RANDOM.nextInt();\n            d.add(new Field(\"id\", Integer.toString(nextID++), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n            modifier.addDocument(d);\n          }\n\n          // Delete 5 docs:\n          int deleteID = nextID;\n          for(int j=0; j<5; j++) {\n            modifier.deleteDocuments(new Term(\"id\", \"\"+deleteID));\n            deleteID -= 2;\n          }\n\n          count++;\n        }\n        \n        modifier.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        failed = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n      try {\n        while(true) {\n\n          if (System.currentTimeMillis() > stopTime) {\n            break;\n          }\n\n          // Add 10 docs:\n          for(int j=0; j<10; j++) {\n            Document d = new Document();\n            int n = RANDOM.nextInt();\n            d.add(new Field(\"id\", Integer.toString(nextID++), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n            modifier.addDocument(d);\n          }\n\n          // Delete 5 docs:\n          int deleteID = nextID;\n          for(int j=0; j<5; j++) {\n            modifier.deleteDocuments(new Term(\"id\", \"\"+deleteID));\n            deleteID -= 2;\n          }\n\n          count++;\n        }\n        \n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        failed = true;\n      }\n    }\n\n","sourceOld":"    public void run() {\n      long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n      try {\n        while(true) {\n\n          if (System.currentTimeMillis() > stopTime) {\n            break;\n          }\n\n          // Add 10 docs:\n          for(int j=0; j<10; j++) {\n            Document d = new Document();\n            int n = RANDOM.nextInt();\n            d.add(new Field(\"id\", Integer.toString(nextID++), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n            modifier.addDocument(d);\n          }\n\n          // Delete 5 docs:\n          int deleteID = nextID;\n          for(int j=0; j<5; j++) {\n            modifier.deleteDocuments(new Term(\"id\", \"\"+deleteID));\n            deleteID -= 2;\n          }\n\n          count++;\n        }\n        \n        modifier.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing.IndexerThread#run().mjava","sourceNew":null,"sourceOld":"    public void run() {\n      long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n      try {\n        while(true) {\n\n          if (System.currentTimeMillis() > stopTime) {\n            break;\n          }\n\n          // Add 10 docs:\n          for(int j=0; j<10; j++) {\n            Document d = new Document();\n            int n = RANDOM.nextInt();\n            d.add(new Field(\"id\", Integer.toString(nextID++), Field.Store.YES, Field.Index.UN_TOKENIZED));\n            d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n            modifier.addDocument(d);\n          }\n\n          // Delete 5 docs:\n          int deleteID = nextID;\n          for(int j=0; j<5; j++) {\n            modifier.deleteDocuments(new Term(\"id\", \"\"+deleteID));\n            deleteID -= 2;\n          }\n\n          count++;\n        }\n        \n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08cb7380901e8bc96eacd525a5b157ab9949672a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"08cb7380901e8bc96eacd525a5b157ab9949672a":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}