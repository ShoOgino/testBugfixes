{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    for(int i=0;i<7;i++) {\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    long newestModTime = dir.fileModified(fileName);\n      \n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", newestModTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f8f000fe6c113d065382a5c22730da1a54a6cd9","date":1176239372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", lastDeleteTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    for(int i=0;i<7;i++) {\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    long newestModTime = dir.fileModified(fileName);\n      \n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", newestModTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", lastDeleteTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", lastDeleteTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc5f152f20871e149a84430a4e1b806e5f8f9f5a","date":1200084365,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds but did not get deleted\", lastDeleteTime - modTime < (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean autoCommit = false;\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"67006a60923e2124212d3baa0d29b444bcbd8373":["0f8f000fe6c113d065382a5c22730da1a54a6cd9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ae99f08f69aa3acba7cd75134e8447eb747559","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["fc5f152f20871e149a84430a4e1b806e5f8f9f5a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fc5f152f20871e149a84430a4e1b806e5f8f9f5a":["67006a60923e2124212d3baa0d29b444bcbd8373"],"0f8f000fe6c113d065382a5c22730da1a54a6cd9":["8b6187898fc4413ccd18229711786550a280383c"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"67006a60923e2124212d3baa0d29b444bcbd8373":["fc5f152f20871e149a84430a4e1b806e5f8f9f5a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fc5f152f20871e149a84430a4e1b806e5f8f9f5a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0f8f000fe6c113d065382a5c22730da1a54a6cd9":["67006a60923e2124212d3baa0d29b444bcbd8373"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["0f8f000fe6c113d065382a5c22730da1a54a6cd9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}