{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"/dev/null","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":["e4db7734414fc682d619339760cc21cc16cd0b1d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4db7734414fc682d619339760cc21cc16cd0b1d","date":1295892961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","bugFix":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"/dev/null","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.skipDocs = skipDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert !fieldInfo.omitTermFreqAndPositions;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsAndPayloadsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert fieldInfo.storePayloads;\n      if (payload == null) {\n        payload = new BytesRef();\n        payload.bytes = new byte[1];\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e4db7734414fc682d619339760cc21cc16cd0b1d":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e4db7734414fc682d619339760cc21cc16cd0b1d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e4db7734414fc682d619339760cc21cc16cd0b1d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["e4db7734414fc682d619339760cc21cc16cd0b1d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","e4db7734414fc682d619339760cc21cc16cd0b1d"],"7b91922b55d15444d554721b352861d028eb8278":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4db7734414fc682d619339760cc21cc16cd0b1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7b91922b55d15444d554721b352861d028eb8278"],"e4db7734414fc682d619339760cc21cc16cd0b1d":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e4db7734414fc682d619339760cc21cc16cd0b1d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}