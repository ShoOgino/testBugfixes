{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","commits":[{"id":"5bd6aa52c560df7d631f1e5182265481bbb883ff","date":1365451215,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    cd.getCloudDescriptor().setShardState(null);\n    cd.getCloudDescriptor().setShardRange(null);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0727ee35cc2b15037dda88835f0e5d5c51b383","date":1365606519,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","sourceNew":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      // set update log to buffer before publishing the core\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e1b8818332825c60cfbd7efa38294078eae898","date":1369337752,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      // set update log to buffer before publishing the core\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"41e1b8818332825c60cfbd7efa38294078eae898":["cc0727ee35cc2b15037dda88835f0e5d5c51b383"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc0727ee35cc2b15037dda88835f0e5d5c51b383":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41e1b8818332825c60cfbd7efa38294078eae898"]},"commit2Childs":{"41e1b8818332825c60cfbd7efa38294078eae898":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["cc0727ee35cc2b15037dda88835f0e5d5c51b383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"cc0727ee35cc2b15037dda88835f0e5d5c51b383":["41e1b8818332825c60cfbd7efa38294078eae898"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}