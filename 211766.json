{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","commits":[{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      File schemaFile = new File(resourceNameToBeUsed);\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrConfig.getResourceLoader().getConfigDir(), schemaFile.getPath());\n      }\n      if (schemaFile.exists()) {\n        try {\n          return schemaCache.get(cacheName(schemaFile), new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dc6df6d3cec2cda16c96f408123470a6c069a29","date":1447321406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          return schemaCache.get(cacheName(schemaFile), new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      File schemaFile = new File(resourceNameToBeUsed);\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrConfig.getResourceLoader().getConfigDir(), schemaFile.getPath());\n      }\n      if (schemaFile.exists()) {\n        try {\n          return schemaCache.get(cacheName(schemaFile), new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          return schemaCache.get(cacheName(schemaFile), new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, () -> {\n            logger.info(\"Creating new index schema for core {}\", cd.getName());\n            return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, () -> {\n            logger.info(\"Creating new index schema for core {}\", cd.getName());\n            return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, new Callable<IndexSchema>() {\n            @Override\n            public IndexSchema call() throws Exception {\n              logger.info(\"Creating new index schema for core {}\", cd.getName());\n              return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n            }\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, () -> {\n            log.info(\"Creating new index schema for core {}\", cd.getName());\n            return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          log.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          log.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, () -> {\n            logger.info(\"Creating new index schema for core {}\", cd.getName());\n            return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          logger.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          logger.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService.SchemaCaching#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IndexSchema createIndexSchema(final CoreDescriptor cd, final SolrConfig solrConfig) {\n      final String resourceNameToBeUsed = IndexSchemaFactory.getResourceNameToBeUsed(cd.getSchemaName(), solrConfig);\n      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(resourceNameToBeUsed);\n      if (Files.exists(schemaFile)) {\n        try {\n          String cachedName = cacheName(schemaFile);\n          return schemaCache.get(cachedName, () -> {\n            log.info(\"Creating new index schema for core {}\", cd.getName());\n            return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n          });\n        } catch (ExecutionException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error creating index schema for core \" + cd.getName(), e);\n        } catch (IOException e) {\n          log.warn(\"Couldn't get last modified time for schema file {}: {}\", schemaFile, e.getMessage());\n          log.warn(\"Will not use schema cache\");\n        }\n      }\n      return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043df2e9a841864922c32756a44c939ed768cb89":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"b6284684320a9808c41a5e43de958b2da22f89bd":["a626ec4d1c92e59fe390724d6220081047b03ce7","043df2e9a841864922c32756a44c939ed768cb89"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d4e985daefcb892b529223b478c47985fc3c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["b6284684320a9808c41a5e43de958b2da22f89bd"],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["2d4e985daefcb892b529223b478c47985fc3c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"]},"commit2Childs":{"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d4e985daefcb892b529223b478c47985fc3c483"],"2d4e985daefcb892b529223b478c47985fc3c483":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}