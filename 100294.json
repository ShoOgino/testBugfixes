{"path":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"16fa358573e3c2508728b3c7c438a8c19a3f0ae4","date":1482846144,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n    return Arrays.asList(\"availableConnections\", \"leasedConnections\", \"maxConnections\", \"pendingConnections\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n    return Arrays.asList(\"availableConnections\", \"leasedConnections\", \"maxConnections\", \"pendingConnections\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n    return Arrays.asList(\"availableConnections\", \"leasedConnections\", \"maxConnections\", \"pendingConnections\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n    return Arrays.asList(\"availableConnections\", \"leasedConnections\", \"maxConnections\", \"pendingConnections\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    this.metricsRegistry = manager.registry(registry);\n    metricsRegistry.register(SolrMetricManager.mkName(\"availableConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getAvailable();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"leasedConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getLeased();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"maxConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getMax();\n        });\n    metricsRegistry.register(SolrMetricManager.mkName(\"pendingConnections\", scope),\n        (Gauge<Integer>) () -> {\n          // this acquires a lock on the connection pool; remove if contention sucks\n          return getTotalStats().getPending();\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(),\n        tag, true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(),\n        tag, true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(),\n        tag, true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(),\n        tag, true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(),\n        tag, true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(),\n        tag, true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(),\n        tag, true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(),\n        tag, true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"ab68488225b6a6c357dda72ed11dedca9914a192":["d646b44d1d17a867bcd0e7a07b11c4837b169366","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f03e4bed5023ec3ef93a771b8888cae991cf448d","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}