{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int).mjava","commits":[{"id":"13b60e3f947fc4f9e2fd81e1929a6809327ff537","date":1435953804,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static int topoSortStatesRecurse(Automaton a, BitSet visited, int[] states, int upto, int state) {\n    Transition t = new Transition();\n    int count = a.initTransition(state, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (!visited.get(t.dest)) {\n        visited.set(t.dest);\n        upto = topoSortStatesRecurse(a, visited, states, upto, t.dest);\n      }\n    }\n    states[upto] = state;\n    upto++;\n    return upto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54297202372099824b9eb2d6897335b221455496","date":1501840968,"type":5,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int).mjava","sourceNew":"  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack so the maximum level of recursion is bounded to 1000\n  private static int topoSortStatesRecurse(Automaton a, BitSet visited, int[] states, int upto, int state, int level) {\n    if (level > MAX_RECURSION_LEVEL) {\n      throw new IllegalArgumentException(\"input automaton is too large: \" + level);\n    }\n    Transition t = new Transition();\n    int count = a.initTransition(state, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (!visited.get(t.dest)) {\n        visited.set(t.dest);\n        upto = topoSortStatesRecurse(a, visited, states, upto, t.dest, level+1);\n      }\n    }\n    states[upto] = state;\n    upto++;\n    return upto;\n  }\n\n","sourceOld":"  private static int topoSortStatesRecurse(Automaton a, BitSet visited, int[] states, int upto, int state) {\n    Transition t = new Transition();\n    int count = a.initTransition(state, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (!visited.get(t.dest)) {\n        visited.set(t.dest);\n        upto = topoSortStatesRecurse(a, visited, states, upto, t.dest);\n      }\n    }\n    states[upto] = state;\n    upto++;\n    return upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStatesRecurse(Automaton,BitSet,int[],int,int).mjava","sourceNew":"  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack so the maximum level of recursion is bounded to 1000\n  private static int topoSortStatesRecurse(Automaton a, BitSet visited, int[] states, int upto, int state, int level) {\n    if (level > MAX_RECURSION_LEVEL) {\n      throw new IllegalArgumentException(\"input automaton is too large: \" + level);\n    }\n    Transition t = new Transition();\n    int count = a.initTransition(state, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (!visited.get(t.dest)) {\n        visited.set(t.dest);\n        upto = topoSortStatesRecurse(a, visited, states, upto, t.dest, level+1);\n      }\n    }\n    states[upto] = state;\n    upto++;\n    return upto;\n  }\n\n","sourceOld":"  private static int topoSortStatesRecurse(Automaton a, BitSet visited, int[] states, int upto, int state) {\n    Transition t = new Transition();\n    int count = a.initTransition(state, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (!visited.get(t.dest)) {\n        visited.set(t.dest);\n        upto = topoSortStatesRecurse(a, visited, states, upto, t.dest);\n      }\n    }\n    states[upto] = state;\n    upto++;\n    return upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["13b60e3f947fc4f9e2fd81e1929a6809327ff537","54297202372099824b9eb2d6897335b221455496"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54297202372099824b9eb2d6897335b221455496":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54297202372099824b9eb2d6897335b221455496"]},"commit2Childs":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54297202372099824b9eb2d6897335b221455496"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"],"54297202372099824b9eb2d6897335b221455496":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}