{"path":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0883328ff2cc09b5c999d05c04e16530d819c627"],"c26f00b574427b55127e869b935845554afde1fa":["0883328ff2cc09b5c999d05c04e16530d819c627","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0883328ff2cc09b5c999d05c04e16530d819c627"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1da8d55113b689b06716246649de6f62430f15c0":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}