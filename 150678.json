{"path":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","sourceNew":"    private void verify(byte message) {\n      try {\n        Socket s = new Socket(host, port);\n        OutputStream out = s.getOutputStream();\n        out.write(id);\n        out.write(message);\n        InputStream in = s.getInputStream();\n        int result = in.read();\n        in.close();\n        out.close();\n        s.close();\n        if (result != 0)\n          throw new RuntimeException(\"lock was double acquired\");\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    private void verify(byte message) {\n      try {\n        Socket s = new Socket(host, port);\n        OutputStream out = s.getOutputStream();\n        out.write(id);\n        out.write(message);\n        InputStream in = s.getInputStream();\n        int result = in.read();\n        in.close();\n        out.close();\n        s.close();\n        if (result != 0)\n          throw new RuntimeException(\"lock was double acquired\");\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813fc8a2a50c4f282fc2463daeb353492aceabbd","date":1397856769,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","sourceNew":"    private void verify(byte message) throws IOException {\n      final OutputStream out = socket.getOutputStream();\n      out.write(message);\n      out.flush();\n      final int ret = socket.getInputStream().read();\n      if (ret < 0) {\n        throw new IllegalStateException(\"Lock server died because of locking error.\");\n      }\n      if (ret != message) {\n        throw new IOException(\"Protocol violation.\");\n      }\n    }\n\n","sourceOld":"    private void verify(byte message) {\n      try {\n        Socket s = new Socket(host, port);\n        OutputStream out = s.getOutputStream();\n        out.write(id);\n        out.write(message);\n        InputStream in = s.getInputStream();\n        int result = in.read();\n        in.close();\n        out.close();\n        s.close();\n        if (result != 0)\n          throw new RuntimeException(\"lock was double acquired\");\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b44163bcc770353b79cdf8163b0ecbed3f6a9de1","date":1397862812,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/VerifyingLockFactory.CheckedLock#verify(byte).mjava","sourceNew":"    private void verify(byte message) throws IOException {\n      out.write(message);\n      out.flush();\n      final int ret = in.read();\n      if (ret < 0) {\n        throw new IllegalStateException(\"Lock server died because of locking error.\");\n      }\n      if (ret != message) {\n        throw new IOException(\"Protocol violation.\");\n      }\n    }\n\n","sourceOld":"    private void verify(byte message) throws IOException {\n      final OutputStream out = socket.getOutputStream();\n      out.write(message);\n      out.flush();\n      final int ret = socket.getInputStream().read();\n      if (ret < 0) {\n        throw new IllegalStateException(\"Lock server died because of locking error.\");\n      }\n      if (ret != message) {\n        throw new IOException(\"Protocol violation.\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813fc8a2a50c4f282fc2463daeb353492aceabbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b44163bcc770353b79cdf8163b0ecbed3f6a9de1"],"b44163bcc770353b79cdf8163b0ecbed3f6a9de1":["813fc8a2a50c4f282fc2463daeb353492aceabbd"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["813fc8a2a50c4f282fc2463daeb353492aceabbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"813fc8a2a50c4f282fc2463daeb353492aceabbd":["b44163bcc770353b79cdf8163b0ecbed3f6a9de1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b44163bcc770353b79cdf8163b0ecbed3f6a9de1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}