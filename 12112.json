{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#multi(Iterable[Op]).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#multi(Iterable[Op]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#multi(Iterable[Op]).mjava","sourceNew":"  @Override\n  public List<OpResult> multi(Iterable<Op> ops) throws BadVersionException, NoSuchElementException, AlreadyExistsException, IOException, KeeperException, InterruptedException {\n    multiLock.lock();\n    List<OpResult> res = new ArrayList<>();\n    try {\n      for (Op op : ops) {\n        Record r = op.toRequestRecord();\n        try {\n          if (op instanceof Op.Check) {\n            CheckVersionRequest rr = (CheckVersionRequest)r;\n            Node n = traverse(rr.getPath(), false, CreateMode.PERSISTENT);\n            if (n == null) {\n              throw new NoSuchElementException(rr.getPath());\n            }\n            if (rr.getVersion() != -1 && n.version != rr.getVersion()) {\n              throw new Exception(\"version mismatch\");\n            }\n            // everything ok\n            res.add(new OpResult.CheckResult());\n          } else if (op instanceof Op.Create) {\n            CreateRequest rr = (CreateRequest)r;\n            createData(rr.getPath(), rr.getData(), CreateMode.fromFlag(rr.getFlags()));\n            res.add(new OpResult.CreateResult(rr.getPath()));\n          } else if (op instanceof Op.Delete) {\n            DeleteRequest rr = (DeleteRequest)r;\n            removeData(rr.getPath(), rr.getVersion());\n            res.add(new OpResult.DeleteResult());\n          } else if (op instanceof Op.SetData) {\n            SetDataRequest rr = (SetDataRequest)r;\n            setData(rr.getPath(), rr.getData(), rr.getVersion());\n            VersionedData vd = getData(rr.getPath());\n            Stat s = new Stat();\n            s.setVersion(vd.getVersion());\n            res.add(new OpResult.SetDataResult(s));\n          } else {\n            throw new Exception(\"Unknown Op: \" + op);\n          }\n        } catch (Exception e) {\n          res.add(new OpResult.ErrorResult(KeeperException.Code.APIERROR.intValue()));\n        }\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<OpResult> multi(Iterable<Op> ops) throws BadVersionException, NoSuchElementException, AlreadyExistsException, IOException, KeeperException, InterruptedException {\n    multiLock.lock();\n    List<OpResult> res = new ArrayList<>();\n    try {\n      for (Op op : ops) {\n        Record r = op.toRequestRecord();\n        try {\n          if (op instanceof Op.Check) {\n            CheckVersionRequest rr = (CheckVersionRequest)r;\n            Node n = traverse(rr.getPath(), false, CreateMode.PERSISTENT);\n            if (n == null) {\n              throw new NoSuchElementException(rr.getPath());\n            }\n            if (rr.getVersion() != -1 && n.version != rr.getVersion()) {\n              throw new Exception(\"version mismatch\");\n            }\n            // everything ok\n            res.add(new OpResult.CheckResult());\n          } else if (op instanceof Op.Create) {\n            CreateRequest rr = (CreateRequest)r;\n            createData(rr.getPath(), rr.getData(), CreateMode.fromFlag(rr.getFlags()));\n            res.add(new OpResult.CreateResult(rr.getPath()));\n          } else if (op instanceof Op.Delete) {\n            DeleteRequest rr = (DeleteRequest)r;\n            removeData(rr.getPath(), rr.getVersion());\n            res.add(new OpResult.DeleteResult());\n          } else if (op instanceof Op.SetData) {\n            SetDataRequest rr = (SetDataRequest)r;\n            setData(rr.getPath(), rr.getData(), rr.getVersion());\n            VersionedData vd = getData(rr.getPath());\n            Stat s = new Stat();\n            s.setVersion(vd.getVersion());\n            res.add(new OpResult.SetDataResult(s));\n          } else {\n            throw new Exception(\"Unknown Op: \" + op);\n          }\n        } catch (Exception e) {\n          res.add(new OpResult.ErrorResult(KeeperException.Code.APIERROR.intValue()));\n        }\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#multi(Iterable[Op]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public List<OpResult> multi(Iterable<Op> ops) throws BadVersionException, NoSuchElementException, AlreadyExistsException, IOException, KeeperException, InterruptedException {\n    multiLock.lock();\n    List<OpResult> res = new ArrayList<>();\n    try {\n      for (Op op : ops) {\n        Record r = op.toRequestRecord();\n        try {\n          if (op instanceof Op.Check) {\n            CheckVersionRequest rr = (CheckVersionRequest)r;\n            Node n = traverse(rr.getPath(), false, CreateMode.PERSISTENT);\n            if (n == null) {\n              throw new NoSuchElementException(rr.getPath());\n            }\n            if (rr.getVersion() != -1 && n.version != rr.getVersion()) {\n              throw new Exception(\"version mismatch\");\n            }\n            // everything ok\n            res.add(new OpResult.CheckResult());\n          } else if (op instanceof Op.Create) {\n            CreateRequest rr = (CreateRequest)r;\n            createData(rr.getPath(), rr.getData(), CreateMode.fromFlag(rr.getFlags()));\n            res.add(new OpResult.CreateResult(rr.getPath()));\n          } else if (op instanceof Op.Delete) {\n            DeleteRequest rr = (DeleteRequest)r;\n            removeData(rr.getPath(), rr.getVersion());\n            res.add(new OpResult.DeleteResult());\n          } else if (op instanceof Op.SetData) {\n            SetDataRequest rr = (SetDataRequest)r;\n            setData(rr.getPath(), rr.getData(), rr.getVersion());\n            VersionedData vd = getData(rr.getPath());\n            Stat s = new Stat();\n            s.setVersion(vd.getVersion());\n            res.add(new OpResult.SetDataResult(s));\n          } else {\n            throw new Exception(\"Unknown Op: \" + op);\n          }\n        } catch (Exception e) {\n          res.add(new OpResult.ErrorResult(KeeperException.Code.APIERROR.intValue()));\n        }\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}