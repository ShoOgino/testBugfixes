{"path":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f4821d05931759774f7fd656e31d449de2d1436","date":1355887327,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // really? lucene/solr do not like to be interrupted\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","sourceOld":"  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80ba0e0ced6273399ff97caaf301445b9fd24895","date":1356802943,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","sourceOld":"  // really? lucene/solr do not like to be interrupted\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // this will interrupt the threads! Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks  - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(1, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n      }\n    }\n  }\n\n","sourceOld":"  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659","date":1440978271,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks  - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(1, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n      }\n    }\n  }\n\n","sourceOld":"  // this will interrupt the threads! Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks  - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(1, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","date":1440987729,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownAndAwaitTerminationWithInterrupt(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    boolean interrupted = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown && !interrupted) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n        interrupted = true;\n      }\n    }\n  }\n\n","sourceOld":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks  - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(1, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb87985079ab034ce215661202801376f614a8c","date":1595969187,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    if (pool == null) return;\n    pool.shutdownNow(); // Disable new tasks from being submitted; interrupt existing tasks\n    awaitTermination(pool);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f4821d05931759774f7fd656e31d449de2d1436":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80ba0e0ced6273399ff97caaf301445b9fd24895":["7f4821d05931759774f7fd656e31d449de2d1436"],"2bb87985079ab034ce215661202801376f614a8c":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659":["275019a81d0883a1db4560391b072d1fbe272ec4"],"275019a81d0883a1db4560391b072d1fbe272ec4":["80ba0e0ced6273399ff97caaf301445b9fd24895"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb87985079ab034ce215661202801376f614a8c"]},"commit2Childs":{"7f4821d05931759774f7fd656e31d449de2d1436":["80ba0e0ced6273399ff97caaf301445b9fd24895"],"a6378064655e76cd7b908b1cab4ce425b384b508":["7f4821d05931759774f7fd656e31d449de2d1436"],"80ba0e0ced6273399ff97caaf301445b9fd24895":["275019a81d0883a1db4560391b072d1fbe272ec4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"2bb87985079ab034ce215661202801376f614a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"275019a81d0883a1db4560391b072d1fbe272ec4":["b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["2bb87985079ab034ce215661202801376f614a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}