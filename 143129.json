{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","sourceNew":"  /**\n   * Calculate a 64-bit hash function for this path. Unlike\n   * {@link #hashCode()}, this method is not part of the Java standard, and is\n   * only used if explicitly called by the user.\n   * <P>\n   * If two objects are equal(), their hash codes need to be equal, so like in\n   * {@link #equals(Object)}, longHashCode does not consider unused portions\n   * of the internal buffers in its calculation.\n   * <P>\n   * The hash function used is a simple multiplicative hash function, with the\n   * multiplier 65599. While Java's standard multiplier 31 (used in\n   * {@link #hashCode()}) gives a good distribution for ASCII strings, it\n   * turns out that for foreign-language strings (with 16-bit characters) it\n   * gives too many collisions, and a bigger multiplier produces fewer\n   * collisions in this case.\n   */\n  public long longHashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    long hash = ncomponents;\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 65599 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 65599 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculate a 64-bit hash function for this path. Unlike\n   * {@link #hashCode()}, this method is not part of the Java standard, and is\n   * only used if explicitly called by the user.\n   * <P>\n   * If two objects are equal(), their hash codes need to be equal, so like in\n   * {@link #equals(Object)}, longHashCode does not consider unused portions\n   * of the internal buffers in its calculation.\n   * <P>\n   * The hash function used is a simple multiplicative hash function, with the\n   * multiplier 65599. While Java's standard multiplier 31 (used in\n   * {@link #hashCode()}) gives a good distribution for ASCII strings, it\n   * turns out that for foreign-language strings (with 16-bit characters) it\n   * gives too many collisions, and a bigger multiplier produces fewer\n   * collisions in this case.\n   */\n  public long longHashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    long hash = ncomponents;\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 65599 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 65599 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","sourceNew":"  /** Calculate a 64-bit hash function for this path. */\n  public long longHashCode() {\n    if (length == 0) {\n      return 0;\n    }\n    \n    long hash = length;\n    for (int i = 0; i < length; i++) {\n      hash = hash * 65599 + components[i].hashCode();\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculate a 64-bit hash function for this path. Unlike\n   * {@link #hashCode()}, this method is not part of the Java standard, and is\n   * only used if explicitly called by the user.\n   * <P>\n   * If two objects are equal(), their hash codes need to be equal, so like in\n   * {@link #equals(Object)}, longHashCode does not consider unused portions\n   * of the internal buffers in its calculation.\n   * <P>\n   * The hash function used is a simple multiplicative hash function, with the\n   * multiplier 65599. While Java's standard multiplier 31 (used in\n   * {@link #hashCode()}) gives a good distribution for ASCII strings, it\n   * turns out that for foreign-language strings (with 16-bit characters) it\n   * gives too many collisions, and a bigger multiplier produces fewer\n   * collisions in this case.\n   */\n  public long longHashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    long hash = ncomponents;\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 65599 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 65599 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","sourceNew":"  /** Calculate a 64-bit hash function for this path. */\n  public long longHashCode() {\n    if (length == 0) {\n      return 0;\n    }\n    \n    long hash = length;\n    for (int i = 0; i < length; i++) {\n      hash = hash * 65599 + components[i].hashCode();\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculate a 64-bit hash function for this path. Unlike\n   * {@link #hashCode()}, this method is not part of the Java standard, and is\n   * only used if explicitly called by the user.\n   * <P>\n   * If two objects are equal(), their hash codes need to be equal, so like in\n   * {@link #equals(Object)}, longHashCode does not consider unused portions\n   * of the internal buffers in its calculation.\n   * <P>\n   * The hash function used is a simple multiplicative hash function, with the\n   * multiplier 65599. While Java's standard multiplier 31 (used in\n   * {@link #hashCode()}) gives a good distribution for ASCII strings, it\n   * turns out that for foreign-language strings (with 16-bit characters) it\n   * gives too many collisions, and a bigger multiplier produces fewer\n   * collisions in this case.\n   */\n  public long longHashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    long hash = ncomponents;\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 65599 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 65599 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#longHashCode().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","sourceNew":"  /** Calculate a 64-bit hash function for this path. */\n  public long longHashCode() {\n    if (length == 0) {\n      return 0;\n    }\n    \n    long hash = length;\n    for (int i = 0; i < length; i++) {\n      hash = hash * 65599 + components[i].hashCode();\n    }\n    return hash;\n  }\n\n","sourceOld":"  /** Calculate a 64-bit hash function for this path. */\n  public long longHashCode() {\n    if (length == 0) {\n      return 0;\n    }\n    \n    long hash = length;\n    for (int i = 0; i < length; i++) {\n      hash = hash * 65599 + components[i].hashCode();\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#longHashCode().mjava","sourceNew":null,"sourceOld":"  /** Calculate a 64-bit hash function for this path. */\n  public long longHashCode() {\n    if (length == 0) {\n      return 0;\n    }\n    \n    long hash = length;\n    for (int i = 0; i < length; i++) {\n      hash = hash * 65599 + components[i].hashCode();\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}