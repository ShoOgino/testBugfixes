{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","commits":[{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Calendar utility method:\n   * Returns the spatial prefix tree level for the corresponding {@link java.util.Calendar} field, such as\n   * {@link java.util.Calendar#YEAR}.  If there's no match, the next greatest level is returned as a negative value.\n   */\n  public int getTreeLevelForCalendarField(int calField) {\n    for (int i = yearLevel; i < FIELD_BY_LEVEL.length; i++) {\n      if (FIELD_BY_LEVEL[i] == calField) {\n        return i;\n      } else if (FIELD_BY_LEVEL[i] > calField) {\n        return -1 * i;\n      }\n    }\n    throw new IllegalArgumentException(\"Bad calendar field?: \" + calField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","sourceNew":"  /** Calendar utility method:\n   * Returns the spatial prefix tree level for the corresponding {@link java.util.Calendar} field, such as\n   * {@link java.util.Calendar#YEAR}.  If there's no match, the next greatest level is returned as a negative value.\n   */\n  public int getTreeLevelForCalendarField(int calField) {\n    for (int i = yearLevel; i < FIELD_BY_LEVEL.length; i++) {\n      if (FIELD_BY_LEVEL[i] == calField) {\n        return i;\n      } else if (FIELD_BY_LEVEL[i] > calField) {\n        return -1 * i;\n      }\n    }\n    throw new IllegalArgumentException(\"Bad calendar field?: \" + calField);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Returns the spatial prefix tree level for the corresponding {@link java.util.Calendar} field, such as\n   * {@link java.util.Calendar#YEAR}.  If there's no match, the next greatest level is returned as a negative value.\n   */\n  public int getTreeLevelForCalendarField(int calField) {\n    for (int i = yearLevel; i < FIELD_BY_LEVEL.length; i++) {\n      if (FIELD_BY_LEVEL[i] == calField) {\n        return i;\n      } else if (FIELD_BY_LEVEL[i] > calField) {\n        return -1 * i;\n      }\n    }\n    throw new IllegalArgumentException(\"Bad calendar field?: \" + calField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#getTreeLevelForCalendarField(int).mjava","sourceNew":"  /** Calendar utility method:\n   * Returns the spatial prefix tree level for the corresponding {@link java.util.Calendar} field, such as\n   * {@link java.util.Calendar#YEAR}.  If there's no match, the next greatest level is returned as a negative value.\n   */\n  public int getTreeLevelForCalendarField(int calField) {\n    for (int i = yearLevel; i < FIELD_BY_LEVEL.length; i++) {\n      if (FIELD_BY_LEVEL[i] == calField) {\n        return i;\n      } else if (FIELD_BY_LEVEL[i] > calField) {\n        return -1 * i;\n      }\n    }\n    throw new IllegalArgumentException(\"Bad calendar field?: \" + calField);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Returns the spatial prefix tree level for the corresponding {@link java.util.Calendar} field, such as\n   * {@link java.util.Calendar#YEAR}.  If there's no match, the next greatest level is returned as a negative value.\n   */\n  public int getTreeLevelForCalendarField(int calField) {\n    for (int i = yearLevel; i < FIELD_BY_LEVEL.length; i++) {\n      if (FIELD_BY_LEVEL[i] == calField) {\n        return i;\n      } else if (FIELD_BY_LEVEL[i] > calField) {\n        return -1 * i;\n      }\n    }\n    throw new IllegalArgumentException(\"Bad calendar field?: \" + calField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}