{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#escape(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#escape(String).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}