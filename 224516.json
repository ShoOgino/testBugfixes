{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return entry.minValue + reader.get(docID);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return entry.minValue + reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d16ef868cf51c616257bedf2a4a51a67ac5bb888","date":1358814697,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return entry.minValue + reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":null,"sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d16ef868cf51c616257bedf2a4a51a67ac5bb888"],"d16ef868cf51c616257bedf2a4a51a67ac5bb888":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":[],"d16ef868cf51c616257bedf2a4a51a67ac5bb888":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","d7a738ebbf9537051521dcc7e49f69208f91e2fc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":[],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["d16ef868cf51c616257bedf2a4a51a67ac5bb888"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9f2be786bbf3746ffcd9720e0b473f4b121c4228","1a7bf5332d569e3d07c4b248462f5d212e26e9af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}