{"path":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","commits":[{"id":"75ed70ebff903842ce0bf09b37df09f11f89ad4f","date":1276477396,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"c26f00b574427b55127e869b935845554afde1fa":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}