{"path":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","sourceOld":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","sourceOld":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","sourceOld":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f9ca2aa071e747f8c770352c2d9dde30d240","date":1323904916,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n    \n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags, \n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n    }\n\n  }\n\n","sourceOld":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  @Test\n  public void testLuke() {\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n    final String hxp = getFieldXPathHistogram(f);\n    assertQ(\"Historgram field should be present for field \"+f,\n        req(\"qt\", \"/admin/luke\", \"fl\", f),\n        hxp+\"[@name='histogram']\");\n    }\n  }\n\n","sourceOld":"  public void testLuke() {\n    doTestHistogramPowerOfTwoBucket();\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n    \n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags, \n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a","date":1328740250,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n    final String hxp = getFieldXPathHistogram(f);\n    assertQ(\"Historgram field should be present for field \"+f,\n        req(\"qt\", \"/admin/luke\", \"fl\", f),\n        hxp+\"[@name='histogram']\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLuke() {\n\n    assertU(adoc(\"id\",\"SOLR1000\", \"name\",\"Apache Solr\",\n      \"solr_si\", \"10\",\n      \"solr_sl\", \"10\",\n      \"solr_sf\", \"10\",\n      \"solr_sd\", \"10\",\n      \"solr_s\", \"10\",\n      \"solr_sI\", \"10\",\n      \"solr_sS\", \"10\",\n      \"solr_t\", \"10\",\n      \"solr_tt\", \"10\",\n      \"solr_b\", \"true\",\n      \"solr_i\", \"10\",\n      \"solr_l\", \"10\",\n      \"solr_f\", \"10\",\n      \"solr_d\", \"10\",\n      \"solr_ti\", \"10\",\n      \"solr_tl\", \"10\",\n      \"solr_tf\", \"10\",\n      \"solr_td\", \"10\",\n      \"solr_pi\", \"10\",\n      \"solr_pl\", \"10\",\n      \"solr_pf\", \"10\",\n      \"solr_pd\", \"10\",\n      \"solr_dt\", \"2000-01-01T01:01:01Z\",\n      \"solr_tdt\", \"2000-01-01T01:01:01Z\",\n      \"solr_pdt\", \"2000-01-01T01:01:01Z\"\n    ));\n    assertU(commit());\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n    final String hxp = getFieldXPathHistogram(f);\n    assertQ(\"Historgram field should be present for field \"+f,\n        req(\"qt\", \"/admin/luke\", \"fl\", f),\n        hxp+\"[@name='histogram']\");\n    }\n  }\n\n","bugFix":["a1a9076189f9cc832856840119afe5c70b4274c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","date":1329188942,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n        req(\"qt\",\"/admin/luke\"),\n        numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n        \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n      final String hxp = getFieldXPathHistogram(f);\n      assertQ(\"Historgram field should be present for field \"+f,\n          req(\"qt\", \"/admin/luke\", \"fl\", f),\n          hxp+\"[@name='histogram']\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n            req(\"qt\",\"/admin/luke\"),\n            numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n                                  \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n                                  \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n              req(\"qt\",\"/admin/luke\", \"fl\", f),\n              numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n    final String hxp = getFieldXPathHistogram(f);\n    assertQ(\"Historgram field should be present for field \"+f,\n        req(\"qt\", \"/admin/luke\", \"fl\", f),\n        hxp+\"[@name='histogram']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n        req(\"qt\",\"/admin/luke\"),\n        numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\",\n        \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n      final String hxp = getFieldXPathHistogram(f);\n      assertQ(\"Historgram field should be present for field \"+f,\n          req(\"qt\", \"/admin/luke\", \"fl\", f),\n          hxp+\"[@name='histogram']\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n        req(\"qt\",\"/admin/luke\"),\n        numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\",\n        \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_pl\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n      final String hxp = getFieldXPathHistogram(f);\n      assertQ(\"Historgram field should be present for field \"+f,\n          req(\"qt\", \"/admin/luke\", \"fl\", f),\n          hxp+\"[@name='histogram']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testLuke().mjava","sourceNew":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n        req(\"qt\",\"/admin/luke\"),\n        numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\",\n        \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\")) {\n      if (h.getCore().getLatestSchema().getField(f).getType().isPointField()) continue;\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n      final String hxp = getFieldXPathHistogram(f);\n      assertQ(\"Historgram field should be present for field \"+f,\n          req(\"qt\", \"/admin/luke\", \"fl\", f),\n          hxp+\"[@name='histogram']\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLuke() {\n\n\n    // test that Luke can handle all of the field types\n    assertQ(req(\"qt\",\"/admin/luke\", \"id\",\"SOLR1000\"));\n\n    final int numFlags = EnumSet.allOf(FieldFlag.class).size();\n\n    assertQ(\"Not all flags (\"+numFlags+\") mentioned in info->key\",\n        req(\"qt\",\"/admin/luke\"),\n        numFlags+\"=count(//lst[@name='info']/lst[@name='key']/str)\");\n\n    // code should be the same for all fields, but just in case do several\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\",\n        \"solr_sS\",\"solr_sI\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many schema flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='schema'])\");\n\n    }\n\n    // diff loop for checking 'index' flags,\n    // only valid for fields that are indexed & stored\n    for (String f : Arrays.asList(\"solr_t\",\"solr_s\",\"solr_ti\",\n        \"solr_td\",\"solr_dt\",\"solr_b\")) {\n\n      final String xp = getFieldXPathPrefix(f);\n      assertQ(\"Not as many index flags as expected (\"+numFlags+\") for \" + f,\n          req(\"qt\",\"/admin/luke\", \"fl\", f),\n          numFlags+\"=string-length(\"+xp+\"[@name='index'])\");\n\n      final String hxp = getFieldXPathHistogram(f);\n      assertQ(\"Historgram field should be present for field \"+f,\n          req(\"qt\", \"/admin/luke\", \"fl\", f),\n          hxp+\"[@name='histogram']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d47f9ca2aa071e747f8c770352c2d9dde30d240":["c26f00b574427b55127e869b935845554afde1fa"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["2106271e380c198349e0f6eac0395bb462913fab"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["8d47f9ca2aa071e747f8c770352c2d9dde30d240"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"]},"commit2Childs":{"8d47f9ca2aa071e747f8c770352c2d9dde30d240":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8d47f9ca2aa071e747f8c770352c2d9dde30d240"],"2106271e380c198349e0f6eac0395bb462913fab":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["2106271e380c198349e0f6eac0395bb462913fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}