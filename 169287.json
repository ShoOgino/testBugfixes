{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#refill().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#refill().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#refill().mjava","sourceNew":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   * \n   * @throws IOException\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = read(input, buffer, leftover, requested);\n    length = returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without space,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    breaker.setText(buffer, 0, Math.max(0, usableLength));\n  }\n\n","sourceOld":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   * \n   * @throws IOException\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = read(input, buffer, leftover, requested);\n    length = returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without space,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    breaker.setText(buffer, 0, Math.max(0, usableLength));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#refill().mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#refill().mjava","sourceNew":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = read(input, buffer, leftover, requested);\n    length = returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without space,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    breaker.setText(buffer, 0, Math.max(0, usableLength));\n  }\n\n","sourceOld":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   * \n   * @throws IOException\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = read(input, buffer, leftover, requested);\n    length = returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without space,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    breaker.setText(buffer, 0, Math.max(0, usableLength));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}