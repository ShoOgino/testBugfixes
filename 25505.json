{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#handleFirstRequest(Request,Response).mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#handleFirstRequest(Request,Response).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The very first request is special in that we use it to figure out the\n     * protocol version the server (or proxy) is compliant with.\n     *\n     * @param req              Description of the Parameter\n     * @param resp             Description of the Parameter\n     * @return                 true if all went fine, false if the request needs\n     *      to be resent\n     * @exception IOException  if any exception is thrown by the response\n     */\n    boolean handleFirstRequest(Request req, Response resp)\n        throws IOException\n    {\n        // read response headers to get protocol version used by\n        // the server.\n\n        ServerProtocolVersion = String2ProtVers(resp.getVersion());\n        ServProtVersKnown = true;\n\n        /*\n         *  We need to treat connections through proxies specially, because\n         *  many HTTP/1.0 proxies do not downgrade an HTTP/1.1 response\n         *  version to HTTP/1.0 (i.e. when we are talking to an HTTP/1.1\n         *  server through an HTTP/1.0 proxy we are mislead to thinking we're\n         *  talking to an HTTP/1.1 proxy). We use the absence of the Via\n         *  header to detect whether we're talking to an HTTP/1.0 proxy,\n         *  unless the status code indicates an error from the proxy\n         *  itself. However, this only works when the chain contains\n         *  only HTTP/1.0 proxies; if you have <client - 1.0 proxy - 1.1\n         *  proxy - server> then this will fail too. Unfortunately there\n         *  seems to be no way to reliably detect broken HTTP/1.0\n         *  proxies...\n         */\n        int sts = resp.getStatusCode();\n        if ((Proxy_Host != null && Protocol != HTTPS) &&\n                resp.getHeader(\"Via\") == null &&\n                sts != 407 && sts != 502 && sts != 504)\n        {\n            ServerProtocolVersion = HTTP_1_0;\n        }\n\n        Log.write(Log.CONN, \"Conn:  Protocol Version established: \" +\n                ProtVers2String(ServerProtocolVersion));\n\n        // some (buggy) servers return an error status if they get a\n        // version they don't comprehend\n\n        if (ServerProtocolVersion == HTTP_1_0 &&\n                (resp.getStatusCode() == 400 || resp.getStatusCode() == 500))\n        {\n            if (input_demux != null)\n            {\n                input_demux.markForClose(resp);\n            }\n            input_demux = null;\n            RequestProtocolVersion = \"HTTP/1.0\";\n            return false;\n        }\n\n        return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#handleFirstRequest(Request,Response).mjava","sourceNew":null,"sourceOld":"    /**\n     * The very first request is special in that we use it to figure out the\n     * protocol version the server (or proxy) is compliant with.\n     *\n     * @param req              Description of the Parameter\n     * @param resp             Description of the Parameter\n     * @return                 true if all went fine, false if the request needs\n     *      to be resent\n     * @exception IOException  if any exception is thrown by the response\n     */\n    boolean handleFirstRequest(Request req, Response resp)\n        throws IOException\n    {\n        // read response headers to get protocol version used by\n        // the server.\n\n        ServerProtocolVersion = String2ProtVers(resp.getVersion());\n        ServProtVersKnown = true;\n\n        /*\n         *  We need to treat connections through proxies specially, because\n         *  many HTTP/1.0 proxies do not downgrade an HTTP/1.1 response\n         *  version to HTTP/1.0 (i.e. when we are talking to an HTTP/1.1\n         *  server through an HTTP/1.0 proxy we are mislead to thinking we're\n         *  talking to an HTTP/1.1 proxy). We use the absence of the Via\n         *  header to detect whether we're talking to an HTTP/1.0 proxy,\n         *  unless the status code indicates an error from the proxy\n         *  itself. However, this only works when the chain contains\n         *  only HTTP/1.0 proxies; if you have <client - 1.0 proxy - 1.1\n         *  proxy - server> then this will fail too. Unfortunately there\n         *  seems to be no way to reliably detect broken HTTP/1.0\n         *  proxies...\n         */\n        int sts = resp.getStatusCode();\n        if ((Proxy_Host != null && Protocol != HTTPS) &&\n                resp.getHeader(\"Via\") == null &&\n                sts != 407 && sts != 502 && sts != 504)\n        {\n            ServerProtocolVersion = HTTP_1_0;\n        }\n\n        Log.write(Log.CONN, \"Conn:  Protocol Version established: \" +\n                ProtVers2String(ServerProtocolVersion));\n\n        // some (buggy) servers return an error status if they get a\n        // version they don't comprehend\n\n        if (ServerProtocolVersion == HTTP_1_0 &&\n                (resp.getStatusCode() == 400 || resp.getStatusCode() == 500))\n        {\n            if (input_demux != null)\n            {\n                input_demux.markForClose(resp);\n            }\n            input_demux = null;\n            RequestProtocolVersion = \"HTTP/1.0\";\n            return false;\n        }\n\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}