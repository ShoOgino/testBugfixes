{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNotQuery)) return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.getBoost() == other.getBoost();\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNotQuery)) return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.getBoost() == other.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre \n            && this.post == other.post;\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNotQuery)) return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.getBoost() == other.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre \n            && this.post == other.post;\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNotQuery)) return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.getBoost() == other.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre\n            && this.post == other.post;\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre \n            && this.post == other.post;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre\n            && this.post == other.post;\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre \n            && this.post == other.post;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre\n            && this.post == other.post;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!super.equals(o))\n      return false;\n\n    SpanNotQuery other = (SpanNotQuery)o;\n    return this.include.equals(other.include)\n            && this.exclude.equals(other.exclude)\n            && this.pre == other.pre\n            && this.post == other.post;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"fab172655716b96f7e42376116235017a922de3a":["2102da8a037e2ce5cb9f72256c58c8722b9cd706","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["0e7bc21595222ae4f75509300fbb7726691f387f","fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fab172655716b96f7e42376116235017a922de3a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}