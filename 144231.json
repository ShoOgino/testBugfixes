{"path":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","commits":[{"id":"cf4186ad2efcdebf9859a7b14723a280571c6587","date":1575575603,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","date":1575629849,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adb160daa24f171372a629f1a31f1022931ed0ec","date":1575655250,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(GRADLE_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7f8987e211341154aa73c7f5a88e8f025be64f","date":1575655346,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(GRADLE_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17d2bb06bae87876029995b9468daefde9ba0047","date":1576728391,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(GRADLE_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkExit(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method inspects the stack trace and checks who is calling\n   * {@link System#exit(int)} and similar methods\n   * @throws SecurityException if the caller of this method is not the test runner itself.\n   */\n  @Override\n  public void checkExit(final int status) {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n      @Override\n      public Void run() {\n        final String systemClassName = System.class.getName(),\n            runtimeClassName = Runtime.class.getName();\n        String exitMethodHit = null;\n        for (final StackTraceElement se : Thread.currentThread().getStackTrace()) {\n          final String className = se.getClassName(), methodName = se.getMethodName();\n          if (\n            (\"exit\".equals(methodName) || \"halt\".equals(methodName)) &&\n            (systemClassName.equals(className) || runtimeClassName.equals(className))\n          ) {\n            exitMethodHit = className + '#' + methodName + '(' + status + ')';\n            continue;\n          }\n          \n          if (exitMethodHit != null) {\n            if (className.startsWith(JUNIT4_TEST_RUNNER_PACKAGE) || \n                className.startsWith(ECLIPSE_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(IDEA_TEST_RUNNER_PACKAGE) ||\n                className.startsWith(GRADLE_TEST_RUNNER_PACKAGE)) {\n              // this exit point is allowed, we return normally from closure:\n              return /*void*/ null;\n            } else {\n              // anything else in stack trace is not allowed, break and throw SecurityException below:\n              break;\n            }\n          }\n        }\n        \n        if (exitMethodHit == null) {\n          // should never happen, only if JVM hides stack trace - replace by generic:\n          exitMethodHit = \"JVM exit method\";\n        }\n        throw new SecurityException(exitMethodHit + \" calls are not allowed because they terminate the test runner's JVM.\");\n      }\n    });\n    \n    // we passed the stack check, delegate to super, so default policy can still deny permission:\n    super.checkExit(status);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"adb160daa24f171372a629f1a31f1022931ed0ec":["cf4186ad2efcdebf9859a7b14723a280571c6587"],"cf4186ad2efcdebf9859a7b14723a280571c6587":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4186ad2efcdebf9859a7b14723a280571c6587"],"17d2bb06bae87876029995b9468daefde9ba0047":["adb160daa24f171372a629f1a31f1022931ed0ec"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["ca7f8987e211341154aa73c7f5a88e8f025be64f","17d2bb06bae87876029995b9468daefde9ba0047"],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","adb160daa24f171372a629f1a31f1022931ed0ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17d2bb06bae87876029995b9468daefde9ba0047"]},"commit2Childs":{"adb160daa24f171372a629f1a31f1022931ed0ec":["17d2bb06bae87876029995b9468daefde9ba0047","ca7f8987e211341154aa73c7f5a88e8f025be64f"],"cf4186ad2efcdebf9859a7b14723a280571c6587":["adb160daa24f171372a629f1a31f1022931ed0ec","2c173aec5dba4a880e26706e8ca1ec9e67b74ed5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf4186ad2efcdebf9859a7b14723a280571c6587","2c173aec5dba4a880e26706e8ca1ec9e67b74ed5"],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":["ca7f8987e211341154aa73c7f5a88e8f025be64f"],"17d2bb06bae87876029995b9468daefde9ba0047":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}