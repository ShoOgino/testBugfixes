{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.OrdinalMappingBinaryDocValues#binaryValue().mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.OrdinalMappingBinaryDocValues#binaryValue().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.OrdinalMappingBinaryDocValues#get(int).mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef binaryValue() {\n      try {\n        // NOTE: this isn't quite koscher, because in general\n        // multiple threads can call BinaryDV.get which would\n        // then conflict on the single ordinals instance, but\n        // because this impl is only used for merging, we know\n        // only 1 thread calls us:\n        ordsReader.get(docID(), ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        return encode(ordinals);\n      } catch (IOException e) {\n        throw new RuntimeException(\"error reading category ordinals for doc \" + docID(), e);\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef get(int docID) {\n      try {\n        // NOTE: this isn't quite koscher, because in general\n        // multiple threads can call BinaryDV.get which would\n        // then conflict on the single ordinals instance, but\n        // because this impl is only used for merging, we know\n        // only 1 thread calls us:\n        ordsReader.get(docID, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        return encode(ordinals);\n      } catch (IOException e) {\n        throw new RuntimeException(\"error reading category ordinals for doc \" + docID, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.OrdinalMappingBinaryDocValues#binaryValue().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef binaryValue() {\n      try {\n        // NOTE: this isn't quite koscher, because in general\n        // multiple threads can call BinaryDV.get which would\n        // then conflict on the single ordinals instance, but\n        // because this impl is only used for merging, we know\n        // only 1 thread calls us:\n        ordsReader.get(docID(), ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        return encode(ordinals);\n      } catch (IOException e) {\n        throw new RuntimeException(\"error reading category ordinals for doc \" + docID(), e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.OrdinalMappingBinaryDocValues#binaryValue().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef binaryValue() {\n      try {\n        // NOTE: this isn't quite koscher, because in general\n        // multiple threads can call BinaryDV.get which would\n        // then conflict on the single ordinals instance, but\n        // because this impl is only used for merging, we know\n        // only 1 thread calls us:\n        ordsReader.get(docID(), ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        return encode(ordinals);\n      } catch (IOException e) {\n        throw new RuntimeException(\"error reading category ordinals for doc \" + docID(), e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}