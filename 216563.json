{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","commits":[{"id":"4af732a9bb4cfe62634ba159e581c6eb45ceb280","date":1323232497,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    IndexDocValuesField dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    IndexDocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4681a68f42605af5014dd08a03a253e804a4d80","date":1323260341,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    IndexDocValuesField dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    IndexDocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","date":1323283758,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    IndexDocValuesField dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    IndexDocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    DocValuesField dv = new DocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new DocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    IndexDocValuesField dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    IndexDocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    DocValuesField dv = new DocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new DocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    DocValuesField dv = new DocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new DocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    DocValuesField dv = new DocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new DocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    IndexDocValuesField dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new IndexDocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    IndexDocValues docValues = sr.perDocValues().docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    DocValuesField dv = new DocValuesField(\"dv\");\n    dv.setInt(1);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    dv = new DocValuesField(\"dv\");\n    dv.setInt(2);\n    doc.add(dv);\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","4af732a9bb4cfe62634ba159e581c6eb45ceb280"],"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicIndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicIndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(new SlowMultiReaderWrapper(r1), new SlowMultiReaderWrapper(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    IndexReader r3 = w.getReader();\n    w.close();\n    IndexReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d4681a68f42605af5014dd08a03a253e804a4d80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa0f44f887719e97183771e977cfc4bfb485b766","da6d5ac19a80d65b1e864251f155d30960353b7e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["d4681a68f42605af5014dd08a03a253e804a4d80","cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["868186558eb3a854ce7e720a52bb445795d54910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["4af732a9bb4cfe62634ba159e581c6eb45ceb280"],"fa0f44f887719e97183771e977cfc4bfb485b766":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4681a68f42605af5014dd08a03a253e804a4d80"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["fa0f44f887719e97183771e977cfc4bfb485b766"],"868186558eb3a854ce7e720a52bb445795d54910":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4681a68f42605af5014dd08a03a253e804a4d80":["d638301ad1cfcae567b681b893bc8781f0ee48a5","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054"],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4681a68f42605af5014dd08a03a253e804a4d80","4af732a9bb4cfe62634ba159e581c6eb45ceb280","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"fa0f44f887719e97183771e977cfc4bfb485b766":["5cab9a86bd67202d20b6adc463008c8e982b070a","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}