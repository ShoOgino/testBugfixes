{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","commits":[{"id":"98b44240f64a2d6935543ff25faee750b29204eb","date":1424972040,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(int).mjava","sourceNew":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long numDocs) {\n    if (pendingNumDocs.addAndGet(numDocs) > actualMaxDocs) {\n      // Reserve failed\n      pendingNumDocs.addAndGet(-numDocs);\n      throw new IllegalArgumentException(\"number of documents in the index cannot exceed \" + actualMaxDocs + \" (current document count is \" + pendingNumDocs.get() + \"; added numDocs is \" + numDocs + \")\");\n    }\n  }\n\n","sourceOld":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalStateException} if it's not allowed. */ \n  private void reserveDocs(int numDocs) {\n    if (pendingNumDocs.addAndGet(numDocs) > actualMaxDocs) {\n      // Reserve failed\n      pendingNumDocs.addAndGet(-numDocs);\n      throw new IllegalStateException(\"number of documents in the index cannot exceed \" + actualMaxDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2","date":1424979404,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","sourceNew":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long addedNumDocs) {\n    assert addedNumDocs >= 0;\n    if (pendingNumDocs.addAndGet(addedNumDocs) > actualMaxDocs) {\n      // Reserve failed: put the docs back and throw exc:\n      pendingNumDocs.addAndGet(-addedNumDocs);\n      tooManyDocs(addedNumDocs);\n    }\n  }\n\n","sourceOld":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long numDocs) {\n    if (pendingNumDocs.addAndGet(numDocs) > actualMaxDocs) {\n      // Reserve failed\n      pendingNumDocs.addAndGet(-numDocs);\n      throw new IllegalArgumentException(\"number of documents in the index cannot exceed \" + actualMaxDocs + \" (current document count is \" + pendingNumDocs.get() + \"; added numDocs is \" + numDocs + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long addedNumDocs) {\n    assert addedNumDocs >= 0;\n    if (pendingNumDocs.addAndGet(addedNumDocs) > actualMaxDocs) {\n      // Reserve failed: put the docs back and throw exc:\n      pendingNumDocs.addAndGet(-addedNumDocs);\n      tooManyDocs(addedNumDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long addedNumDocs) {\n    assert addedNumDocs >= 0;\n    if (pendingNumDocs.addAndGet(addedNumDocs) > actualMaxDocs) {\n      // Reserve failed: put the docs back and throw exc:\n      pendingNumDocs.addAndGet(-addedNumDocs);\n      tooManyDocs(addedNumDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","date":1512420564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#reserveDocs(long).mjava","sourceNew":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long addedNumDocs) {\n    assert addedNumDocs >= 0;\n    if (adjustPendingNumDocs(addedNumDocs) > actualMaxDocs) {\n      // Reserve failed: put the docs back and throw exc:\n      adjustPendingNumDocs(-addedNumDocs);\n      tooManyDocs(addedNumDocs);\n    }\n  }\n\n","sourceOld":"  /** Anything that will add N docs to the index should reserve first to\n   *  make sure it's allowed.  This will throw {@code\n   *  IllegalArgumentException} if it's not allowed. */ \n  private void reserveDocs(long addedNumDocs) {\n    assert addedNumDocs >= 0;\n    if (pendingNumDocs.addAndGet(addedNumDocs) > actualMaxDocs) {\n      // Reserve failed: put the docs back and throw exc:\n      pendingNumDocs.addAndGet(-addedNumDocs);\n      tooManyDocs(addedNumDocs);\n    }\n  }\n\n","bugFix":["acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98a04f56464afdffd4c430d6c47a0c868a38354e"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2"],"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2":["98b44240f64a2d6935543ff25faee750b29204eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"98b44240f64a2d6935543ff25faee750b29204eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"98a04f56464afdffd4c430d6c47a0c868a38354e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98a04f56464afdffd4c430d6c47a0c868a38354e","98b44240f64a2d6935543ff25faee750b29204eb"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98b44240f64a2d6935543ff25faee750b29204eb":["acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}