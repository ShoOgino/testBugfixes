{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","commits":[{"id":"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","date":1482864726,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    final GraphiteSender graphite;\n    if (pickled) {\n      graphite = new PickledGraphite(host, port);\n    } else {\n      graphite = new Graphite(host, port);\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    final GraphiteSender graphite;\n    if (pickled) {\n      graphite = new PickledGraphite(host, port);\n    } else {\n      graphite = new Graphite(host, port);\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    final GraphiteSender graphite;\n    if (pickled) {\n      graphite = new PickledGraphite(host, port);\n    } else {\n      graphite = new Graphite(host, port);\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    final GraphiteSender graphite;\n    if (pickled) {\n      graphite = new PickledGraphite(host, port);\n    } else {\n      graphite = new Graphite(host, port);\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","date":1496661458,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#validate().mjava","sourceNew":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void validate() throws IllegalStateException {\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (host == null) {\n      throw new IllegalStateException(\"Init argument 'host' must be set to a valid Graphite server name.\");\n    }\n    if (port == -1) {\n      throw new IllegalStateException(\"Init argument 'port' must be set to a valid Graphite server port.\");\n    }\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    if (period < 1) {\n      throw new IllegalStateException(\"Init argument 'period' is in time unit 'seconds' and must be at least 1.\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["816521ebaad5add9cb96bb88c577394e2938c40b"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}