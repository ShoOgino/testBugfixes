{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random().nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random().nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random().nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random().nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, rarely());\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb","629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a199589f8815be5b2c960d0a591ca1ddad8b52b1","date":1342833673,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    return newFSDirectory(f, lf, rarely());\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, rarely());\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    return newFSDirectory(f, lf, rarely());\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    return newFSDirectory(f, lf, rarely());\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(\n          random(), maybeNRTWrap(random(), fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      closeAfterSuite(new CloseableDirectory(dir, suiteFailureMarker));\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf) {\n    return newFSDirectory(f, lf, rarely());\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf) {\n    return newFSDirectory(f, lf, rarely());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5da0b42730b6b99b31389ef94cb97384e83b9ede","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","f4abec28b874149a7223e32cc7a01704c27790de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}