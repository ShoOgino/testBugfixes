{"path":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}