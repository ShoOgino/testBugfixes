{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#collectDocs().mjava","commits":[{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"602cca3f75af03832471d8324bbc5b977a02969c":["3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"602cca3f75af03832471d8324bbc5b977a02969c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3661d6742eed69ff6cc30ea2538d572624a7cdf8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["602cca3f75af03832471d8324bbc5b977a02969c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["602cca3f75af03832471d8324bbc5b977a02969c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}