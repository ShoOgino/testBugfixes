{"path":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      final TwoPhaseIterator twoPhase = scorer.asTwoPhaseIterator();\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          if (twoPhase == null) {\n            doc = scorer.advance(min);\n          } else {\n            doc = twoPhase.approximation().advance(min);\n          }\n        }\n        return scoreRange(collector, scorer, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, int min, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorer.advance(min);\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, iterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          if (twoPhase == null) {\n            doc = iterator.advance(min);\n          } else {\n            doc = twoPhase.approximation().advance(min);\n          }\n        }\n        return scoreRange(collector, iterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      final TwoPhaseIterator twoPhase = scorer.asTwoPhaseIterator();\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          if (twoPhase == null) {\n            doc = scorer.advance(min);\n          } else {\n            doc = twoPhase.approximation().advance(min);\n          }\n        }\n        return scoreRange(collector, scorer, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      // if possible filter scorerIterator to keep only competitive docs as defined by collector\n      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :\n          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorerIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, iterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          if (twoPhase == null) {\n            doc = iterator.advance(min);\n          } else {\n            doc = twoPhase.approximation().advance(min);\n          }\n        }\n        return scoreRange(collector, iterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e977a403f93a917f75266c88727eadb89e4f64fc","date":1600866583,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      // if possible filter scorerIterator to keep only competitive docs as defined by collector\n      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :\n          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = filteredIterator.docID();\n        if (doc < min) {\n          doc = filteredIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      // if possible filter scorerIterator to keep only competitive docs as defined by collector\n      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :\n          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorerIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b7c42efe6864f425a13466ed04857c18be1320","date":1602004936,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      DocIdSetIterator filteredIterator;\n      if (collectorIterator == null) {\n        filteredIterator = scorerIterator;\n      } else {\n        if (scorerIterator.docID() != -1) {\n          // Wrap ScorerIterator to start from -1 for conjunction \n          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n        }\n        // filter scorerIterator to keep only competitive docs as defined by collector\n        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      }\n      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = filteredIterator.docID();\n        if (doc < min) {\n          doc = filteredIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      // if possible filter scorerIterator to keep only competitive docs as defined by collector\n      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :\n          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = filteredIterator.docID();\n        if (doc < min) {\n          doc = filteredIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82f88f01593b859697b54aeaddf31c554b8b9215","date":1602068566,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      DocIdSetIterator filteredIterator;\n      if (collectorIterator == null) {\n        filteredIterator = scorerIterator;\n      } else {\n        if (scorerIterator.docID() != -1) {\n          // Wrap ScorerIterator to start from -1 for conjunction \n          scorerIterator = new StartDISIWrapper(scorerIterator);\n        }\n        // filter scorerIterator to keep only competitive docs as defined by collector\n        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      }\n      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = filteredIterator.docID();\n        if (doc < min) {\n          doc = filteredIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n      DocIdSetIterator collectorIterator = collector.competitiveIterator();\n      DocIdSetIterator filteredIterator;\n      if (collectorIterator == null) {\n        filteredIterator = scorerIterator;\n      } else {\n        if (scorerIterator.docID() != -1) {\n          // Wrap ScorerIterator to start from -1 for conjunction \n          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n        }\n        // filter scorerIterator to keep only competitive docs as defined by collector\n        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n      }\n      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = filteredIterator.docID();\n        if (doc < min) {\n          doc = filteredIterator.advance(min);\n        }\n        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e977a403f93a917f75266c88727eadb89e4f64fc":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"f3b7c42efe6864f425a13466ed04857c18be1320":["e977a403f93a917f75266c88727eadb89e4f64fc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82f88f01593b859697b54aeaddf31c554b8b9215":["f3b7c42efe6864f425a13466ed04857c18be1320"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82f88f01593b859697b54aeaddf31c554b8b9215"]},"commit2Childs":{"e977a403f93a917f75266c88727eadb89e4f64fc":["f3b7c42efe6864f425a13466ed04857c18be1320"],"f3b7c42efe6864f425a13466ed04857c18be1320":["82f88f01593b859697b54aeaddf31c554b8b9215"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"82f88f01593b859697b54aeaddf31c554b8b9215":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e977a403f93a917f75266c88727eadb89e4f64fc"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}