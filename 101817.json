{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","commits":[{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"/dev/null","sourceNew":"  private static List<ReplicaCount> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                     CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    List<ReplicaCount> repCounts = new ArrayList<>();\n    for (String s : positions.values()) {\n      repCounts.add(new ReplicaCount(s));\n    }\n    return repCounts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","date":1496237185,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaCount> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                     CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    List<ReplicaCount> repCounts = new ArrayList<>();\n    for (String s : positions.values()) {\n      repCounts.add(new ReplicaCount(s));\n    }\n    return repCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaCount> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                     CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    List<ReplicaCount> repCounts = new ArrayList<>();\n    for (String s : positions.values()) {\n      repCounts.add(new ReplicaCount(s));\n    }\n    return repCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaCount> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                     CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    List<ReplicaCount> repCounts = new ArrayList<>();\n    for (String s : positions.values()) {\n      repCounts.add(new ReplicaCount(s));\n    }\n    return repCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaCount> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                     CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    List<ReplicaCount> repCounts = new ArrayList<>();\n    for (String s : positions.values()) {\n      repCounts.add(new ReplicaCount(s));\n    }\n    return repCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static Map<ReplicaAssigner.Position, String> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(DocCollection.SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaAssigner.Position, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions;// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,CoreContainer,DocCollection,List[String],List).mjava","sourceNew":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        CoreContainer cc, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cc, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","d118ef896fa37a21d831f7e8ffcb8c44b9afc13b"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["28288370235ed02234a64753cdbf0c6ec096304a"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}