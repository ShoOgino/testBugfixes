{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue(Map[String,TermFacet],String).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue(Map[String,TermFacet],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue(Map[String,TermFacet],String).mjava","sourceNew":"    /**\n     * Given a set of (possibly nested) facets, generates a suitable <code>json.facet</code> param value to \n     * use for testing them against in a solr request.\n     */\n    public static CharSequence toJSONFacetParamValue(final Map<String,TermFacet> facets,\n                                                     final String extraJson) {\n      assert null != facets;\n      if (0 == facets.size() && null == extraJson) {\n        return \"\";\n      }\n\n      StringBuilder sb = new StringBuilder(\"{ processEmpty: true, \");\n      for (String key : facets.keySet()) {\n        sb.append(key).append(\" : \").append(facets.get(key).toJSONFacetParamValue());\n        sb.append(\" ,\");\n      }\n      if (null == extraJson) {\n        sb.setLength(sb.length() - 1);\n      } else {\n        sb.append(extraJson);\n      }\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * Given a set of (possibly nested) facets, generates a suitable <code>json.facet</code> param value to \n     * use for testing them against in a solr request.\n     */\n    public static CharSequence toJSONFacetParamValue(final Map<String,TermFacet> facets,\n                                                     final String extraJson) {\n      assert null != facets;\n      if (0 == facets.size() && null == extraJson) {\n        return \"\";\n      }\n\n      StringBuilder sb = new StringBuilder(\"{ processEmpty: true, \");\n      for (String key : facets.keySet()) {\n        sb.append(key).append(\" : \").append(facets.get(key).toJSONFacetParamValue());\n        sb.append(\" ,\");\n      }\n      if (null == extraJson) {\n        sb.setLength(sb.length() - 1);\n      } else {\n        sb.append(extraJson);\n      }\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue(Map[String,TermFacet],String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Given a set of (possibly nested) facets, generates a suitable <code>json.facet</code> param value to \n     * use for testing them against in a solr request.\n     */\n    public static CharSequence toJSONFacetParamValue(final Map<String,TermFacet> facets,\n                                                     final String extraJson) {\n      assert null != facets;\n      if (0 == facets.size() && null == extraJson) {\n        return \"\";\n      }\n\n      StringBuilder sb = new StringBuilder(\"{ processEmpty: true, \");\n      for (String key : facets.keySet()) {\n        sb.append(key).append(\" : \").append(facets.get(key).toJSONFacetParamValue());\n        sb.append(\" ,\");\n      }\n      if (null == extraJson) {\n        sb.setLength(sb.length() - 1);\n      } else {\n        sb.append(extraJson);\n      }\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}