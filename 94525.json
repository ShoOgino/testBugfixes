{"path":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","commits":[{"id":"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e","date":1329752918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"/dev/null","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(filter, false);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter, false);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(filter, false);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter, false);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(filter);\n        filter = new TrimFilter(filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(filter);\n        filter = new TrimFilter(filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#testComplicated().mjava","sourceNew":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(filter);\n        filter = new TrimFilter(filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","sourceOld":"  public void testComplicated() throws Exception {\n    // lowercases, removes field names, other syntax, collapses runs of whitespace, etc.\n    converter.setAnalyzer(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        TokenStream filter = new PatternReplaceFilter(tokenizer, \n            Pattern.compile(\"([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}]*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}\\\\_]+:)|([^\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{Cs}])+\"), \" \", true);\n        filter = new LowerCaseFilter(TEST_VERSION_CURRENT, filter);\n        filter = new TrimFilter(TEST_VERSION_CURRENT, filter);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n    });\n    assertConvertsTo(\"test1 +test2\", new String[] { \"test1 test2\" });\n    assertConvertsTo(\"test~\", new String[] { \"test\" });\n    assertConvertsTo(\"field:test\", new String[] { \"test\" });\n    assertConvertsTo(\"This is a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\" This is  a test\", new String[] { \"this is a test\" });\n    assertConvertsTo(\"Foo (field:bar) text_hi:हिन्दी    \", new String[] { \"foo bar हिन्दी\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["192e49c0445803405b0bc0eebc8b758485480c21"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}