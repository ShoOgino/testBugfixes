{"path":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","commits":[{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n\n    f2.setOmitNorms(true);\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.optimize();\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitNorms for\n  // field X, then adding docs that do omitNorms for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have norms\n    Field f1 = newField(\"f1\", \"This field has norms\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n       \n    // this field will NOT have norms\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f2 = newField(\"f2\", \"This field has NO norms in all docs\", customType);\n    d.add(f2);\n\n    for (int i = 0; i < 5; i++) {\n      writer.addDocument(d);\n    }\n        \n    for (int i = 0; i < 20; i++) {\n      writer.addDocument(d);\n    }\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertTrue(\"OmitNorms field bit should not be set.\", !fi.fieldInfo(\"f1\").omitNorms);\n    assertTrue(\"OmitNorms field bit should be set.\", fi.fieldInfo(\"f2\").omitNorms);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}