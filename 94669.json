{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamFactoryTestCase#analysisFactory(Class[#-extends-AbstractAnalysisFactory],Version,ResourceLoader,String...).mjava","commits":[{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":1,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamFactoryTestCase#analysisFactory(Class[#-extends-AbstractAnalysisFactory],Version,ResourceLoader,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/BaseTokenStreamFactoryTestCase#analysisFactory(Class[#-extends-AbstractAnalysisFactory],Version,ResourceLoader,String...).mjava","sourceNew":"  private AbstractAnalysisFactory analysisFactory(Class<? extends AbstractAnalysisFactory> clazz, Version matchVersion, ResourceLoader loader, String... keysAndValues) throws Exception {\n    if (keysAndValues.length % 2 == 1) {\n      throw new IllegalArgumentException(\"invalid keysAndValues map\");\n    }\n    Map<String,String> args = new HashMap<>();\n    for (int i = 0; i < keysAndValues.length; i += 2) {\n      String previous = args.put(keysAndValues[i], keysAndValues[i+1]);\n      assertNull(\"duplicate values for key: \" + keysAndValues[i], previous);\n    }\n    if (matchVersion != null) {\n      String previous = args.put(\"luceneMatchVersion\", matchVersion.toString());\n      assertNull(\"duplicate values for key: luceneMatchVersion\", previous);\n    }\n    AbstractAnalysisFactory factory = null;\n    try {\n      factory = clazz.getConstructor(Map.class).newInstance(args);\n    } catch (InvocationTargetException e) {\n      // to simplify tests that check for illegal parameters\n      if (e.getCause() instanceof IllegalArgumentException) {\n        throw (IllegalArgumentException) e.getCause();\n      } else {\n        throw e;\n      }\n    }\n    if (factory instanceof ResourceLoaderAware) {\n      ((ResourceLoaderAware) factory).inform(loader);\n    }\n    return factory;\n  }\n\n","sourceOld":"  private AbstractAnalysisFactory analysisFactory(Class<? extends AbstractAnalysisFactory> clazz, Version matchVersion, ResourceLoader loader, String... keysAndValues) throws Exception {\n    if (keysAndValues.length % 2 == 1) {\n      throw new IllegalArgumentException(\"invalid keysAndValues map\");\n    }\n    Map<String,String> args = new HashMap<>();\n    for (int i = 0; i < keysAndValues.length; i += 2) {\n      String previous = args.put(keysAndValues[i], keysAndValues[i+1]);\n      assertNull(\"duplicate values for key: \" + keysAndValues[i], previous);\n    }\n    if (matchVersion != null) {\n      String previous = args.put(\"luceneMatchVersion\", matchVersion.toString());\n      assertNull(\"duplicate values for key: luceneMatchVersion\", previous);\n    }\n    AbstractAnalysisFactory factory = null;\n    try {\n      factory = clazz.getConstructor(Map.class).newInstance(args);\n    } catch (InvocationTargetException e) {\n      // to simplify tests that check for illegal parameters\n      if (e.getCause() instanceof IllegalArgumentException) {\n        throw (IllegalArgumentException) e.getCause();\n      } else {\n        throw e;\n      }\n    }\n    if (factory instanceof ResourceLoaderAware) {\n      ((ResourceLoaderAware) factory).inform(loader);\n    }\n    return factory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}