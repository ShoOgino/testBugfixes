{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTerms(LeafReaderContext,int,String,List[Term]).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTerms(LeafReaderContext,int,String,List[Term]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTerms(LeafReaderContext context, int doc, String field, List<Term> terms) throws IOException {\n    Objects.requireNonNull(field);\n    for (Term term : terms) {\n      if (Objects.equals(field, term.field()) == false) {\n        throw new IllegalArgumentException(\"Tried to generate iterator from terms in multiple fields: expected [\" + field + \"] but got [\" + term.field() + \"]\");\n      }\n    }\n    return fromTermsEnum(context, doc, field, asBytesRefIterator(terms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTerms(LeafReaderContext,int,String,List[Term]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTerms(LeafReaderContext context, int doc, String field, List<Term> terms) throws IOException {\n    Objects.requireNonNull(field);\n    for (Term term : terms) {\n      if (Objects.equals(field, term.field()) == false) {\n        throw new IllegalArgumentException(\"Tried to generate iterator from terms in multiple fields: expected [\" + field + \"] but got [\" + term.field() + \"]\");\n      }\n    }\n    return fromTermsEnum(context, doc, field, asBytesRefIterator(terms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTerms(LeafReaderContext,int,Query,String,List[Term]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTerms(LeafReaderContext,int,String,List[Term]).mjava","sourceNew":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTerms(LeafReaderContext context, int doc, Query query, String field, List<Term> terms) throws IOException {\n    Objects.requireNonNull(field);\n    for (Term term : terms) {\n      if (Objects.equals(field, term.field()) == false) {\n        throw new IllegalArgumentException(\"Tried to generate iterator from terms in multiple fields: expected [\" + field + \"] but got [\" + term.field() + \"]\");\n      }\n    }\n    return fromTermsEnum(context, doc, query, field, asBytesRefIterator(terms));\n  }\n\n","sourceOld":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTerms(LeafReaderContext context, int doc, String field, List<Term> terms) throws IOException {\n    Objects.requireNonNull(field);\n    for (Term term : terms) {\n      if (Objects.equals(field, term.field()) == false) {\n        throw new IllegalArgumentException(\"Tried to generate iterator from terms in multiple fields: expected [\" + field + \"] but got [\" + term.field() + \"]\");\n      }\n    }\n    return fromTermsEnum(context, doc, field, asBytesRefIterator(terms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}