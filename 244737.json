{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","pathOld":"/dev/null","sourceNew":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["192b1af72d46f8ec1d673363fec4d005e9a53c83","192b1af72d46f8ec1d673363fec4d005e9a53c83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dacab2c037901da80e538bdc0f2cf1557c0eb543","date":1308744386,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","sourceNew":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","pathOld":"/dev/null","sourceNew":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut(context);\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut(context);\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final DirectCFSIndexOutput out;\n      if (outputTaken.compareAndSet(false, true)) {\n        initDataOut();\n        success = true;\n        out = new DirectCFSIndexOutput(dataOut, entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["dacab2c037901da80e538bdc0f2cf1557c0eb543","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dacab2c037901da80e538bdc0f2cf1557c0eb543"],"dacab2c037901da80e538bdc0f2cf1557c0eb543":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["dacab2c037901da80e538bdc0f2cf1557c0eb543"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"dacab2c037901da80e538bdc0f2cf1557c0eb543":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}