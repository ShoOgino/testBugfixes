{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","commits":[{"id":"f5d497ef5f4afb803f608c705a49782def2f7082","date":1327943814,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","791c4fb1ff970967cf1802cf4d4875ba12c2eb01","7875fce026a0a335830cfc75abc3eb009eff9a73","1e9ce820cd3ed9efb959c181daaafd22f0c70143","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":["f5d497ef5f4afb803f608c705a49782def2f7082"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      assertEquals(\"more than 1 shard id was assigned to same core\", 1, state.getSlices(\"collection1\").size());\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getCloudStateVersion(controllerClient));\n      \n      reader.updateCloudState(true);\n      CloudState state = reader.getCloudState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found in more than 1 times in CloudState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getShards().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (Map<String,Slice> collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.values()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"node1_core1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (DocCollection collection : state.getCollectionStates().values()) {\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","f5d497ef5f4afb803f608c705a49782def2f7082"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["f5d497ef5f4afb803f608c705a49782def2f7082"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState(true);\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"bugIntro":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["f5d497ef5f4afb803f608c705a49782def2f7082","1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == getClusterStateVersion(controllerClient));\n      \n      reader.updateClusterState();\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      for (String  c : state.getCollections()) {\n        DocCollection collection = state.getCollection(c);\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    \n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      \n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      \n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(zkClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n      \n      try {\n        reader.waitForState(COLLECTION, 5, TimeUnit.SECONDS, (liveNodes, collectionState) -> version == zkController\n            .getZkStateReader().getClusterState().getZkClusterStateVersion());\n      } catch (TimeoutException e) {\n        // okay\n      }\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1);\n\n      while (version == reader.getClusterState().getZkClusterStateVersion()) {\n        Thread.sleep(100);\n      }\n      \n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94","7875fce026a0a335830cfc75abc3eb009eff9a73","29f5eaf296600e1665151e7929d42a3cbe22e481","a9b4296bd51ca61b482138791478afdd0f7d3a3d","f5d497ef5f4afb803f608c705a49782def2f7082","84250b785753dee996ec3f88a1ea2e941ebe7cfb","a5093a9e893633cc091cf2f729d7863671c2b715","f4abec28b874149a7223e32cc7a01704c27790de","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(zkClient);\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      try {\n        reader.waitForState(COLLECTION, 5, TimeUnit.SECONDS, (liveNodes, collectionState) -> version == zkController\n            .getZkStateReader().getClusterState().getZkClusterStateVersion());\n      } catch (TimeoutException e) {\n        // okay\n      }\n      ClusterState state = reader.getClusterState();\n\n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n    \n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      \n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n      \n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(zkClient);\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n      \n      try {\n        reader.waitForState(COLLECTION, 5, TimeUnit.SECONDS, (liveNodes, collectionState) -> version == zkController\n            .getZkStateReader().getClusterState().getZkClusterStateVersion());\n      } catch (TimeoutException e) {\n        // okay\n      }\n      ClusterState state = reader.getClusterState();\n      \n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7053dde4b7eb778402a75790c6b67907508e51fc","date":1560811334,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDoubleAssignment().mjava","sourceNew":"  @Test\n  public void testDoubleAssignment() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      reader.forceUpdateCollection(COLLECTION);\n      ClusterState state = reader.getClusterState();\n\n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleAssignment() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.close();\n\n      int version = getClusterStateVersion(zkClient);\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\",\"shard1\", Replica.State.RECOVERING, 1, true, overseers.get(0));\n\n      try {\n        reader.waitForState(COLLECTION, 5, TimeUnit.SECONDS, (liveNodes, collectionState) -> version == zkController\n            .getZkStateReader().getClusterState().getZkClusterStateVersion());\n      } catch (TimeoutException e) {\n        // okay\n      }\n      ClusterState state = reader.getClusterState();\n\n      int numFound = 0;\n      Map<String, DocCollection> collectionsMap = state.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n        DocCollection collection = entry.getValue();\n        for (Slice slice : collection.getSlices()) {\n          if (slice.getReplicasMap().get(\"core_node1\") != null) {\n            numFound++;\n          }\n        }\n      }\n      assertEquals(\"Shard was found more than once in ClusterState\", 1,\n          numFound);\n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["73450c0955930295d34703e7ddbfc6973b7a121a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c5a558d54519c651068ddb202f03befefb1514a7","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["73450c0955930295d34703e7ddbfc6973b7a121a"],"7053dde4b7eb778402a75790c6b67907508e51fc":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d497ef5f4afb803f608c705a49782def2f7082"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"410e066f093e407222d9681429d209084e783149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d497ef5f4afb803f608c705a49782def2f7082"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["f5d497ef5f4afb803f608c705a49782def2f7082"],"f5d497ef5f4afb803f608c705a49782def2f7082":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["c5a558d54519c651068ddb202f03befefb1514a7"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["849494cf2f3a96af5c8c84995108ddd8456fcd04","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7053dde4b7eb778402a75790c6b67907508e51fc"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"7053dde4b7eb778402a75790c6b67907508e51fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b6fdfce35d0adb18836cf8711abe487a934df33","410e066f093e407222d9681429d209084e783149","f5d497ef5f4afb803f608c705a49782def2f7082"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"410e066f093e407222d9681429d209084e783149":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","7dc08f02757dd10637b16a5c65eaaef839a91a9a"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"f5d497ef5f4afb803f608c705a49782def2f7082":["5b6fdfce35d0adb18836cf8711abe487a934df33","410e066f093e407222d9681429d209084e783149","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c5a558d54519c651068ddb202f03befefb1514a7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a5093a9e893633cc091cf2f729d7863671c2b715":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["7053dde4b7eb778402a75790c6b67907508e51fc"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","5b6fdfce35d0adb18836cf8711abe487a934df33","410e066f093e407222d9681429d209084e783149","7dc08f02757dd10637b16a5c65eaaef839a91a9a","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}