{"path":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","commits":[{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.TEST_NIGHTLY || random.nextInt(20) == 0) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.TEST_NIGHTLY || random.nextInt(20) == 0) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.TEST_NIGHTLY || random.nextInt(20) == 0) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      switch(random.nextInt(3)) {\n        case 0: val = -1; // no payloads\n                break;\n        case 1: val = Integer.MAX_VALUE; // variable length payload\n                break;\n        case 2: val = random.nextInt(12); // fixed length payload\n                break;\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.TEST_NIGHTLY || random.nextInt(20) == 0) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","0762b640e0d0d12b6edb96db68986e13145c3484"],"7b91922b55d15444d554721b352861d028eb8278":["0762b640e0d0d12b6edb96db68986e13145c3484"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"0762b640e0d0d12b6edb96db68986e13145c3484":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["0762b640e0d0d12b6edb96db68986e13145c3484","79c2cb24929f2649a8875fb629086171f914d5ce"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7b91922b55d15444d554721b352861d028eb8278","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"962d04139994fce5193143ef35615499a9a96d78":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}