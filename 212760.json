{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"/dev/null","sourceNew":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException, FeedNotFoundException, ParseException{ \n         \n        List<String> entryIdList = new ArrayList<String>(); \n        for (int i = 1; i <= this.count; i++) { \n           entryIdList.add(\"\"+i); \n        } \n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.profile); \n        assertEquals(entryIdList.size(),entryList.size()); \n        List<String> entryIdCompare = new ArrayList<String>(); \n        for (BaseEntry entry : entryList) { \n            entryIdCompare.add(entry.getId()); \n        } \n        assertTrue(entryIdList.containsAll(entryIdCompare)); \n         \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","sourceNew":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n        \n        List<String> entryIdList = new ArrayList<String>();\n        for (int i = 1; i <= this.count; i++) {\n           entryIdList.add(\"\"+i);\n        }\n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.configurator);\n        assertEquals(entryIdList.size(),entryList.size());\n        List<String> entryIdCompare = new ArrayList<String>();\n        for (BaseEntry entry : entryList) {\n            entryIdCompare.add(entry.getId());\n        }\n        assertTrue(entryIdList.containsAll(entryIdCompare));\n        \n    }\n\n","sourceOld":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException, FeedNotFoundException, ParseException{ \n         \n        List<String> entryIdList = new ArrayList<String>(); \n        for (int i = 1; i <= this.count; i++) { \n           entryIdList.add(\"\"+i); \n        } \n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.profile); \n        assertEquals(entryIdList.size(),entryList.size()); \n        List<String> entryIdCompare = new ArrayList<String>(); \n        for (BaseEntry entry : entryList) { \n            entryIdCompare.add(entry.getId()); \n        } \n        assertTrue(entryIdList.containsAll(entryIdCompare)); \n         \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","sourceNew":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n        \n        List<String> entryIdList = new ArrayList<String>();\n        for (int i = 1; i <= this.count; i++) {\n           entryIdList.add(\"\"+i);\n        }\n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.configurator);\n        assertEquals(entryIdList.size(),entryList.size());\n        List<String> entryIdCompare = new ArrayList<String>();\n        for (BaseEntry entry : entryList) {\n            assertEquals(\"1\",entry.getVersionId());\n            entryIdCompare.add(entry.getId());\n            \n        }\n        assertTrue(entryIdList.containsAll(entryIdCompare));\n        \n    }\n\n","sourceOld":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n        \n        List<String> entryIdList = new ArrayList<String>();\n        for (int i = 1; i <= this.count; i++) {\n           entryIdList.add(\"\"+i);\n        }\n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.configurator);\n        assertEquals(entryIdList.size(),entryList.size());\n        List<String> entryIdCompare = new ArrayList<String>();\n        for (BaseEntry entry : entryList) {\n            entryIdCompare.add(entry.getId());\n        }\n        assertTrue(entryIdList.containsAll(entryIdCompare));\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#entryQueryHelper(ReferenceCounter[StorageQuery]).mjava","sourceNew":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n        \n        List<String> entryIdList = new ArrayList<String>();\n        for (int i = 1; i <= this.count; i++) {\n           entryIdList.add(\"\"+i);\n        }\n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.configurator);\n        assertEquals(entryIdList.size(),entryList.size());\n        List<String> entryIdCompare = new ArrayList<String>();\n        for (BaseEntry entry : entryList) {\n            assertEquals(\"1\",entry.getVersionId());\n            entryIdCompare.add(entry.getId());\n            \n        }\n        assertTrue(entryIdList.containsAll(entryIdCompare));\n        \n    }\n\n","sourceOld":"    private void entryQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n        \n        List<String> entryIdList = new ArrayList<String>();\n        for (int i = 1; i <= this.count; i++) {\n           entryIdList.add(\"\"+i);\n        }\n        List<BaseEntry> entryList = currentQuery.get().entryQuery(entryIdList,feedId,this.configurator);\n        assertEquals(entryIdList.size(),entryList.size());\n        List<String> entryIdCompare = new ArrayList<String>();\n        for (BaseEntry entry : entryList) {\n            assertEquals(\"1\",entry.getVersionId());\n            entryIdCompare.add(entry.getId());\n            \n        }\n        assertTrue(entryIdList.containsAll(entryIdCompare));\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}