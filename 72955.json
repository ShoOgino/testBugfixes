{"path":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","pathOld":"/dev/null","sourceNew":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","pathOld":"/dev/null","sourceNew":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","pathOld":"/dev/null","sourceNew":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","sourceNew":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getLoadedCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","sourceNew":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getLoadedCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","sourceNew":"  /**\n   * Start a replication handler thread that will periodically pull indices from the shard leader\n   * @param switchTransactionLog if true, ReplicationHandler will rotate the transaction log once\n   * the replication is done\n   */\n  public void startReplication(boolean switchTransactionLog) throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getLoadedCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n      LOG.info(\"Will start replication from leader with poll interval: {}\", pollIntervalStr );\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      if (switchTransactionLog) {\n        replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n          if (pollSuccess) {\n            String commitVersion = getCommitVersion(core);\n            if (commitVersion == null) return;\n            if (Long.parseLong(commitVersion) == lastVersion) return;\n            UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n            SolrQueryRequest req = new LocalSolrQueryRequest(core,\n                new ModifiableSolrParams());\n            CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n            cuc.setVersion(Long.parseLong(commitVersion));\n            updateLog.copyOverOldUpdates(cuc);\n            lastVersion = Long.parseLong(commitVersion);\n          }\n        });\n      }\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","sourceOld":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getLoadedCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":["04ecf884544ff74add5faa452748f160c4af904b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplicateFromLeader#startReplication().mjava","sourceNew":null,"sourceOld":"  public void startReplication() throws InterruptedException {\n    try (SolrCore core = cc.getCore(coreName)) {\n      if (core == null) {\n        if (cc.isShutDown()) {\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"SolrCore not found:\" + coreName + \" in \" + cc.getLoadedCoreNames());\n        }\n      }\n      SolrConfig.UpdateHandlerInfo uinfo = core.getSolrConfig().getUpdateHandlerInfo();\n      String pollIntervalStr = \"00:00:03\";\n      if (uinfo.autoCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoCommmitMaxTime/2);\n      } else if (uinfo.autoSoftCommmitMaxTime != -1) {\n        pollIntervalStr = toPollIntervalStr(uinfo.autoSoftCommmitMaxTime/2);\n      }\n\n      NamedList slaveConfig = new NamedList();\n      slaveConfig.add(\"fetchFromLeader\", true);\n      slaveConfig.add(\"pollInterval\", pollIntervalStr);\n      NamedList replicationConfig = new NamedList();\n      replicationConfig.add(\"slave\", slaveConfig);\n\n      String lastCommitVersion = getCommitVersion(core);\n      if (lastCommitVersion != null) {\n        lastVersion = Long.parseLong(lastCommitVersion);\n      }\n\n      replicationProcess = new ReplicationHandler();\n      replicationProcess.setPollListener((solrCore, pollSuccess) -> {\n        if (pollSuccess) {\n          String commitVersion = getCommitVersion(core);\n          if (commitVersion == null) return;\n          if (Long.parseLong(commitVersion) == lastVersion) return;\n          UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n          SolrQueryRequest req = new LocalSolrQueryRequest(core,\n              new ModifiableSolrParams());\n          CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n          cuc.setVersion(Long.parseLong(commitVersion));\n          updateLog.copyOverOldUpdates(cuc);\n          lastVersion = Long.parseLong(commitVersion);\n        }\n      });\n      replicationProcess.init(replicationConfig);\n      replicationProcess.inform(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["be320990bdc77e643388fa801e75017f19289c42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"be320990bdc77e643388fa801e75017f19289c42":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}