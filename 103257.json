{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      final long bits;\n      if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n        bits = field.numericValue().longValue();\n      } else if (field.numericValue() instanceof Float) {\n        bits = Float.floatToIntBits(field.numericValue().floatValue());\n      } else {\n        assert field.numericValue() instanceof Double;\n        bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n      }\n      fields.add(new NumericDocValuesField(sf.getName(), bits));\n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      final long bits;\n      if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n        bits = field.numericValue().longValue();\n      } else if (field.numericValue() instanceof Float) {\n        bits = Float.floatToIntBits(field.numericValue().floatValue());\n      } else {\n        assert field.numericValue() instanceof Double;\n        bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n      }\n      fields.add(new NumericDocValuesField(sf.getName(), bits));\n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRef bytes = new BytesRef();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      final long bits;\n      if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n        bits = field.numericValue().longValue();\n      } else if (field.numericValue() instanceof Float) {\n        bits = Float.floatToIntBits(field.numericValue().floatValue());\n      } else {\n        assert field.numericValue() instanceof Double;\n        bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n      }\n      fields.add(new NumericDocValuesField(sf.getName(), bits));\n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRef bytes = new BytesRef();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRef bytes = new BytesRef();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRef bytes = new BytesRef();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","date":1445009862,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        storedToIndexed(field, bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        readableToIndexed(value.toString(), bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<IndexableField> fields = new ArrayList<>();\n      final IndexableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        storedToIndexed(field, bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      final StorableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        storedToIndexed(field, bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (sf.hasDocValues()) {\n      List<IndexableField> fields = new ArrayList<>();\n      final IndexableField field = createField(sf, value);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        storedToIndexed(field, bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (sf.hasDocValues()) {\n      List<IndexableField> fields = new ArrayList<>();\n      final IndexableField field = createField(sf, value, boost);\n      fields.add(field);\n      \n      if (sf.multiValued()) {\n        BytesRefBuilder bytes = new BytesRefBuilder();\n        storedToIndexed(field, bytes);\n        fields.add(new SortedSetDocValuesField(sf.getName(), bytes.get()));\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n      \n      return fields;\n    } else {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["73bb5a57dc75b54a39494f99986599cae7dff417"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acd9883560fd89e6448b2b447302fe543040cd4f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}