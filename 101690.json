{"path":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"583cdb620dea20ef2bfafd8639a73b29de305103","date":1174543740,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n            throws Exception {\n        SolrParams p = req.getParams();\n        String words = p.get(\"q\");\n        String cmd = p.get(\"cmd\");\n        if (cmd != null && cmd.equals(\"rebuild\"))\n            rebuild(req);\n\n        Float accuracy;\n        int numSug;\n        try {\n            accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n            spellChecker.setAccuracy(accuracy);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n        }\n        try {\n            numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n        }\n\n        String[] suggestions = spellChecker.suggestSimilar(words, numSug,\n                reader, restrictToField, onlyMorePopular);\n\n        rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n\n","sourceOld":"    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n            throws Exception {\n        SolrParams p = req.getParams();\n        String words = p.get(\"q\");\n        String cmd = p.get(\"cmd\");\n        if (cmd != null && cmd.equals(\"rebuild\"))\n            rebuild(req);\n\n        Float accuracy;\n        int numSug;\n        try {\n            accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n            spellChecker.setAccuracy(accuracy);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n        }\n        try {\n            numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n        }\n\n        String[] suggestions = spellChecker.suggestSimilar(words, numSug,\n                reader, restrictToField, onlyMorePopular);\n\n        rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a4de58ddc877061c374826b0232414b06c08b","date":1174943473,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n            throws Exception {\n        SolrParams p = req.getParams();\n        String words = p.get(\"q\");\n        String cmd = p.get(\"cmd\");\n        if (cmd != null) {\n          cmd = cmd.trim();\n          if (cmd.equals(\"rebuild\")) {\n            rebuild(req);\n            rsp.add(\"cmdExecuted\",\"rebuild\");\n          } else if (cmd.equals(\"reopen\")) {\n            reopen();\n            rsp.add(\"cmdExecuted\",\"reopen\");\n          } else {\n            throw new SolrException(400, \"Unrecognized Command: \" + cmd);\n          }\n        }\n\n        Float accuracy;\n        int numSug;\n        try {\n            accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n            spellChecker.setAccuracy(accuracy);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n        }\n        try {\n            numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n        }\n\n        if (null != words && !\"\".equals(words.trim())) {\n          String[] suggestions =\n            spellChecker.suggestSimilar(words, numSug,\n                                        nullReader, restrictToField,\n                                        onlyMorePopular);\n          \n          rsp.add(\"suggestions\", Arrays.asList(suggestions));\n        }\n    }\n\n","sourceOld":"    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n            throws Exception {\n        SolrParams p = req.getParams();\n        String words = p.get(\"q\");\n        String cmd = p.get(\"cmd\");\n        if (cmd != null && cmd.equals(\"rebuild\"))\n            rebuild(req);\n\n        Float accuracy;\n        int numSug;\n        try {\n            accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n            spellChecker.setAccuracy(accuracy);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n        }\n        try {\n            numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n        }\n\n        String[] suggestions = spellChecker.suggestSimilar(words, numSug,\n                reader, restrictToField, onlyMorePopular);\n\n        rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6855049ff6427dd05716183aaeb715f5c84abf44","date":1174943640,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException(400, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    nullReader, restrictToField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n            throws Exception {\n        SolrParams p = req.getParams();\n        String words = p.get(\"q\");\n        String cmd = p.get(\"cmd\");\n        if (cmd != null) {\n          cmd = cmd.trim();\n          if (cmd.equals(\"rebuild\")) {\n            rebuild(req);\n            rsp.add(\"cmdExecuted\",\"rebuild\");\n          } else if (cmd.equals(\"reopen\")) {\n            reopen();\n            rsp.add(\"cmdExecuted\",\"reopen\");\n          } else {\n            throw new SolrException(400, \"Unrecognized Command: \" + cmd);\n          }\n        }\n\n        Float accuracy;\n        int numSug;\n        try {\n            accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n            spellChecker.setAccuracy(accuracy);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n        }\n        try {\n            numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n        }\n\n        if (null != words && !\"\".equals(words.trim())) {\n          String[] suggestions =\n            spellChecker.suggestSimilar(words, numSug,\n                                        nullReader, restrictToField,\n                                        onlyMorePopular);\n          \n          rsp.add(\"suggestions\", Arrays.asList(suggestions));\n        }\n    }\n\n","bugFix":null,"bugIntro":["aebf0313cb5fecf771ee58710e927b0f793b1e14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    nullReader, restrictToField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException(400, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    nullReader, restrictToField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aebf0313cb5fecf771ee58710e927b0f793b1e14","date":1192665301,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(\"onlyMorePopular\", DEFAULT_MORE_POPULAR);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    nullReader, restrictToField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":["6855049ff6427dd05716183aaeb715f5c84abf44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n   // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    try {\n      accuracy = p.getFloat(\"accuracy\", DEFAULT_ACCURACY);\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(\"suggestionCount\", DEFAULT_NUM_SUGGESTIONS);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(\"onlyMorePopular\", DEFAULT_MORE_POPULAR);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n\n    if (null != words && !\"\".equals(words.trim())) {\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n          \n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560d9ff06b001421d5b77a46b7595c913deef74e","date":1195092229,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n   // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b4df10540683a05a9d930000b22c3a2cd470e3","date":1196797229,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff676ea3919c34f30df120b9fa469cd439203ec","date":1211576148,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    rsp.setHttpCaching(true);\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c79e84313497146a1eb431df8994acaa6c8516d1","date":1218002449,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    rsp.setHttpCaching(true);\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea7e692fa617f7de85fce4af8bf2801481f991","date":1218027946,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, multiWords, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"c79e84313497146a1eb431df8994acaa6c8516d1":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9aea7e692fa617f7de85fce4af8bf2801481f991":["c79e84313497146a1eb431df8994acaa6c8516d1"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["6855049ff6427dd05716183aaeb715f5c84abf44"],"89b4df10540683a05a9d930000b22c3a2cd470e3":["560d9ff06b001421d5b77a46b7595c913deef74e"],"c51a4de58ddc877061c374826b0232414b06c08b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"583cdb620dea20ef2bfafd8639a73b29de305103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"071bae97f774d86dca206e837de23a56b71c8b29":["aebf0313cb5fecf771ee58710e927b0f793b1e14"],"aebf0313cb5fecf771ee58710e927b0f793b1e14":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"560d9ff06b001421d5b77a46b7595c913deef74e":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6855049ff6427dd05716183aaeb715f5c84abf44":["c51a4de58ddc877061c374826b0232414b06c08b"],"ad94625fb8d088209f46650c8097196fec67f00c":["9aea7e692fa617f7de85fce4af8bf2801481f991"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["c79e84313497146a1eb431df8994acaa6c8516d1"],"c79e84313497146a1eb431df8994acaa6c8516d1":["9aea7e692fa617f7de85fce4af8bf2801481f991"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"9aea7e692fa617f7de85fce4af8bf2801481f991":["ad94625fb8d088209f46650c8097196fec67f00c"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["aebf0313cb5fecf771ee58710e927b0f793b1e14"],"89b4df10540683a05a9d930000b22c3a2cd470e3":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"c51a4de58ddc877061c374826b0232414b06c08b":["6855049ff6427dd05716183aaeb715f5c84abf44"],"583cdb620dea20ef2bfafd8639a73b29de305103":["c51a4de58ddc877061c374826b0232414b06c08b"],"071bae97f774d86dca206e837de23a56b71c8b29":["560d9ff06b001421d5b77a46b7595c913deef74e"],"aebf0313cb5fecf771ee58710e927b0f793b1e14":["071bae97f774d86dca206e837de23a56b71c8b29"],"560d9ff06b001421d5b77a46b7595c913deef74e":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6855049ff6427dd05716183aaeb715f5c84abf44":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}