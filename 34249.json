{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","commits":[{"id":"89f8b19763ea545f1e428dfa5efb8235beaaa05e","date":1151436680,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","pathOld":"/dev/null","sourceNew":"    public void recoverEntries(final StorageModifier modifier){\n        // prevent deadlock either recovering or writing\n        if(!this.recover){\n            LOG.warn(\"Can't recover entries, Recovercontroller is initialized in write mode\");\n            return;\n        }\n        this.lock.lock();\n        try{\n            this.reader = new RecoverReader();\n        File[] files = this.recoverDirectory.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if(!files[i].isDirectory()){\n                try{\n                this.fileReader = new BufferedReader(new FileReader(files[i]));\n                List<StorageEntryWrapper> entryList = this.reader.recoverEntries(this.fileReader);\n                if(entryList.size() == 0)\n                    continue;\n                storeEntries(entryList,modifier);\n                this.fileReader.close();\n                if(!this.keepRecoverFiles)\n                    files[i].delete();\n                }catch (StorageException e) {\n                    LOG.error(\"Can't store recover entries for file: \"+files[i].getName()+\" -- keep file \"+e.getMessage(),e);\n                }catch (IOException e) {\n                    LOG.error(\"Can't recover entries for file: \"+files[i].getName()+\" -- keep file\",e);\n                }\n            }\n        }\n        \n        }finally{\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","sourceNew":"    /**\n     * @param modifier\n     */\n    public void recoverEntries(final StorageModifier modifier){\n        // prevent deadlock either recovering or writing\n        if(!this.recover){\n            LOG.warn(\"Can't recover entries, Recovercontroller is initialized in write mode\");\n            return;\n        }\n        this.lock.lock();\n        try{\n            this.reader = new RecoverReader();\n        File[] files = this.recoverDirectory.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if(!files[i].isDirectory()){\n                try{\n                LOG.info(\"Recover file -- \"+files[i]);\n                this.fileReader = new BufferedReader(new FileReader(files[i]));\n                List<StorageEntryWrapper> entryList = this.reader.recoverEntries(this.fileReader);\n                if(entryList.size() == 0)\n                    continue;\n                storeEntries(entryList,modifier);\n                this.fileReader.close();\n                if(!this.keepRecoverFiles){\n                    LOG.info(\"Recovering file -- \"+files[i]+\" successful, delete file\");\n                    files[i].delete();\n                }\n                }catch (StorageException e) {\n                    LOG.error(\"Can't store recover entries for file: \"+files[i].getName()+\" -- keep file \"+e.getMessage(),e);\n                }catch (IOException e) {\n                    LOG.error(\"Can't recover entries for file: \"+files[i].getName()+\" -- keep file\",e);\n                }\n            }\n        }\n        \n        }finally{\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    public void recoverEntries(final StorageModifier modifier){\n        // prevent deadlock either recovering or writing\n        if(!this.recover){\n            LOG.warn(\"Can't recover entries, Recovercontroller is initialized in write mode\");\n            return;\n        }\n        this.lock.lock();\n        try{\n            this.reader = new RecoverReader();\n        File[] files = this.recoverDirectory.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if(!files[i].isDirectory()){\n                try{\n                this.fileReader = new BufferedReader(new FileReader(files[i]));\n                List<StorageEntryWrapper> entryList = this.reader.recoverEntries(this.fileReader);\n                if(entryList.size() == 0)\n                    continue;\n                storeEntries(entryList,modifier);\n                this.fileReader.close();\n                if(!this.keepRecoverFiles)\n                    files[i].delete();\n                }catch (StorageException e) {\n                    LOG.error(\"Can't store recover entries for file: \"+files[i].getName()+\" -- keep file \"+e.getMessage(),e);\n                }catch (IOException e) {\n                    LOG.error(\"Can't recover entries for file: \"+files[i].getName()+\" -- keep file\",e);\n                }\n            }\n        }\n        \n        }finally{\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverController#recoverEntries(StorageModifier).mjava","sourceNew":"    /**\n     * @param modifier\n     */\n    public void recoverEntries(final StorageModifier modifier){\n        // prevent deadlock either recovering or writing\n        if(!this.recover){\n            LOG.warn(\"Can't recover entries, Recovercontroller is initialized in write mode\");\n            return;\n        }\n        this.lock.lock();\n        try{\n            this.reader = new RecoverReader();\n        File[] files = this.recoverDirectory.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if(!files[i].isDirectory()){\n                try{\n                LOG.info(\"Recover file -- \"+files[i]);\n                this.fileReader = new BufferedReader(new FileReader(files[i]));\n                List<StorageEntryWrapper> entryList = this.reader.recoverEntries(this.fileReader);\n                if(entryList.size() == 0)\n                    continue;\n                storeEntries(entryList,modifier);\n                this.fileReader.close();\n                if(!this.keepRecoverFiles){\n                    LOG.info(\"Recovering file -- \"+files[i]+\" successful, delete file\");\n                    files[i].delete();\n                }\n                }catch (StorageException e) {\n                    LOG.error(\"Can't store recover entries for file: \"+files[i].getName()+\" -- keep file \"+e.getMessage(),e);\n                }catch (IOException e) {\n                    LOG.error(\"Can't recover entries for file: \"+files[i].getName()+\" -- keep file\",e);\n                }\n            }\n        }\n        \n        }finally{\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * @param modifier\n     */\n    public void recoverEntries(final StorageModifier modifier){\n        // prevent deadlock either recovering or writing\n        if(!this.recover){\n            LOG.warn(\"Can't recover entries, Recovercontroller is initialized in write mode\");\n            return;\n        }\n        this.lock.lock();\n        try{\n            this.reader = new RecoverReader();\n        File[] files = this.recoverDirectory.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if(!files[i].isDirectory()){\n                try{\n                LOG.info(\"Recover file -- \"+files[i]);\n                this.fileReader = new BufferedReader(new FileReader(files[i]));\n                List<StorageEntryWrapper> entryList = this.reader.recoverEntries(this.fileReader);\n                if(entryList.size() == 0)\n                    continue;\n                storeEntries(entryList,modifier);\n                this.fileReader.close();\n                if(!this.keepRecoverFiles){\n                    LOG.info(\"Recovering file -- \"+files[i]+\" successful, delete file\");\n                    files[i].delete();\n                }\n                }catch (StorageException e) {\n                    LOG.error(\"Can't store recover entries for file: \"+files[i].getName()+\" -- keep file \"+e.getMessage(),e);\n                }catch (IOException e) {\n                    LOG.error(\"Can't recover entries for file: \"+files[i].getName()+\" -- keep file\",e);\n                }\n            }\n        }\n        \n        }finally{\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}