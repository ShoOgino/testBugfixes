{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#getAssignedId(DocCollection,String).mjava","commits":[{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#getAssignedId(DocCollection,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"  /*\n       * Return an already assigned id or null if not assigned\n       */\n  public static String getAssignedId(final DocCollection collection, final String nodeName) {\n    Collection<Slice> slices = collection != null ? collection.getSlices() : null;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        if (slice.getReplicasMap().get(nodeName) != null) {\n          return slice.getName();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /*\n       * Return an already assigned id or null if not assigned\n       */\n  public static String getAssignedId(final ClusterState state, final String nodeName,\n                              final ZkNodeProps coreState) {\n    Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n    if (slices != null) {\n      for (Slice slice : slices) {\n        if (slice.getReplicasMap().get(nodeName) != null) {\n          return slice.getName();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#getAssignedId(DocCollection,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"  /*\n       * Return an already assigned id or null if not assigned\n       */\n  public static String getAssignedId(final DocCollection collection, final String nodeName) {\n    Collection<Slice> slices = collection != null ? collection.getSlices() : null;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        if (slice.getReplicasMap().get(nodeName) != null) {\n          return slice.getName();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /*\n       * Return an already assigned id or null if not assigned\n       */\n  public static String getAssignedId(final ClusterState state, final String nodeName,\n                              final ZkNodeProps coreState) {\n    Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n    if (slices != null) {\n      for (Slice slice : slices) {\n        if (slice.getReplicasMap().get(nodeName) != null) {\n          return slice.getName();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}