{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddOldIndex().mjava","sourceNew":null,"sourceOld":"  public void testAddOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();\n\n      FieldNumberBiMap biMap = new FieldNumberBiMap();\n      int maxFieldNum = Integer.MIN_VALUE;\n      for (SegmentInfo segmentInfo : infos) {\n        for (FieldInfo fieldInfo : segmentInfo.getFieldInfos()) {\n          int globNumber = biMap.addOrGet(fieldInfo.name, fieldInfo.number);\n          maxFieldNum = Math.max(maxFieldNum, globNumber);\n          sortedMap.put(globNumber, fieldInfo.name);\n        }\n      }\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          NoMergePolicy.NO_COMPOUND_FILES));\n\n      SortedMap<Integer, String> copySortedMap = new TreeMap<Integer, String>(\n          sortedMap);\n      while (!sortedMap.isEmpty()) { // add every field at least once\n        Document doc = new Document();\n        int nextField = random.nextInt(maxFieldNum + 1);\n        sortedMap.remove(nextField);\n\n        String name = copySortedMap.get(nextField);\n        assertNotNull(name);\n\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(name, _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n        writer.addDocument(doc);\n        if (random.nextInt(10) == 0) {\n          writer.commit();\n        }\n      }\n      Set<Entry<String, Integer>> expectedEntries = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base).entries();\n      writer.addIndexes(dir); // add the old index\n      writer.close();\n\n      writer = new IndexWriter(base, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n      writer.commit(); // make sure the old index is the latest segment\n      writer.close();\n\n      // we don't merge here since we use NoMergePolicy\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      // check that the latest global field numbers are consistent and carried\n      // over from the 4.0 index\n      FieldNumberBiMap actualGlobalMap = sis\n          .getOrLoadGlobalFieldNumberMap(base);\n      assertEquals(expectedEntries, actualGlobalMap.entries());\n      base.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"319624eb66a10b717d3e66af448543e7dc5c479d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["319624eb66a10b717d3e66af448543e7dc5c479d"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["319624eb66a10b717d3e66af448543e7dc5c479d"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}