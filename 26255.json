{"path":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","commits":[{"id":"543992c52fe295c8b15aafe4b066e7e3a9a42c48","date":1510862949,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5613a70439d5d429f0689c2c5a21615e58deff97":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5613a70439d5d429f0689c2c5a21615e58deff97"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"5613a70439d5d429f0689c2c5a21615e58deff97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["5613a70439d5d429f0689c2c5a21615e58deff97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}