{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97bcd657104d24ce5e89db102939e68a6784bdda","date":1509417991,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      throw new RuntimeException(\"This Should not happen\");\n    } else {\n      return super.getContentStreams(req);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b588aaddc61538b71ed5af88704f9949c060fe","date":1509429840,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isEmpty(updateRequest) ) return null;\n      throw new RuntimeException(\"This Should not happen\");\n    } else {\n      return super.getContentStreams(req);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteByIdMap()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      throw new RuntimeException(\"This Should not happen\");\n    } else {\n      return super.getContentStreams(req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  @Override\n  public Collection<ContentStream> getContentStreams(@SuppressWarnings({\"rawtypes\"})SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isEmpty(updateRequest) ) return null;\n      throw new RuntimeException(\"This Should not happen\");\n    } else {\n      return super.getContentStreams(req);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isEmpty(updateRequest) ) return null;\n      throw new RuntimeException(\"This Should not happen\");\n    } else {\n      return super.getContentStreams(req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6b588aaddc61538b71ed5af88704f9949c060fe":["97bcd657104d24ce5e89db102939e68a6784bdda"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["e6b588aaddc61538b71ed5af88704f9949c060fe"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97bcd657104d24ce5e89db102939e68a6784bdda":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"e6b588aaddc61538b71ed5af88704f9949c060fe":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["97bcd657104d24ce5e89db102939e68a6784bdda"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"97bcd657104d24ce5e89db102939e68a6784bdda":["e6b588aaddc61538b71ed5af88704f9949c060fe"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}