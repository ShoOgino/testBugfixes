{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","commits":[{"id":"addc47115aa3376d79985cd4abc9f8c6e212a032","date":1354202882,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    private SimpleDVConsumer getInstance(FieldInfo field) throws IOException {\n      final SimpleDocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private SimpleDVConsumer getInstance(FieldInfo field) throws IOException {\n      final SimpleDocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private SimpleDVConsumer getInstance(FieldInfo field) throws IOException {\n      final SimpleDocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private SimpleDVConsumer getInstance(FieldInfo field) throws IOException {\n      final SimpleDocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f06b860886fc48ea071171354835b8aed8a94de","date":1358789970,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      SimpleDVConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new SimpleDVConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format;\n      if (segmentWriteState.isFieldUpdate) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        assert formatName != null : \"invalid null FORMAT_KEY for field=\\\"\" + field.name + \"\\\" (field updates)\";\n        format = DocValuesFormat.forName(formatName);\n      } else {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert segmentWriteState.isFieldUpdate || previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (segmentWriteState.isFieldUpdate) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          assert suffixAtt != null : \"invalid numm SUFFIX_KEY for field=\\\"\" + field.name + \"\\\" (field updates)\";\n          suffix = Integer.valueOf(suffixAtt);\n        } else {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert segmentWriteState.isFieldUpdate || previousValue == null : \"suffix=\" + Integer.toString(suffix) + \" prevValue=\" + previousValue;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format = getDocValuesFormatForField(field.name);\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n        \n        // bump the suffix\n        suffix = suffixes.get(formatName);\n        if (suffix == null) {\n          suffix = 0;\n        } else {\n          suffix = suffix + 1;\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(field.name,\n                                                          segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert previousValue == null;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this PF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert field.getDocValuesGen() != -1 || previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert field.getDocValuesGen() != -1 || previousValue == null : \"suffix=\" + Integer.toString(suffix) + \" prevValue=\" + previousValue;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      final DocValuesFormat format;\n      if (segmentWriteState.isFieldUpdate) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        assert formatName != null : \"invalid null FORMAT_KEY for field=\\\"\" + field.name + \"\\\" (field updates)\";\n        format = DocValuesFormat.forName(formatName);\n      } else {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert segmentWriteState.isFieldUpdate || previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (segmentWriteState.isFieldUpdate) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          assert suffixAtt != null : \"invalid numm SUFFIX_KEY for field=\\\"\" + field.name + \"\\\" (field updates)\";\n          suffix = Integer.valueOf(suffixAtt);\n        } else {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert segmentWriteState.isFieldUpdate || previousValue == null : \"suffix=\" + Integer.toString(suffix) + \" prevValue=\" + previousValue;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c32cba25aa5578c4b2a22aca3a3a93e01c251","date":1411816524,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + formatName);\n      }\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + suffix);\n      }\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert field.getDocValuesGen() != -1 || previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert field.getDocValuesGen() != -1 || previousValue == null : \"suffix=\" + Integer.toString(suffix) + \" prevValue=\" + previousValue;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + formatName);\n      }\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + suffix);\n      }\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      assert field.getDocValuesGen() != -1 || previousValue == null: \"formatName=\" + formatName + \" prevValue=\" + previousValue;\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      assert field.getDocValuesGen() != -1 || previousValue == null : \"suffix=\" + Integer.toString(suffix) + \" prevValue=\" + previousValue;\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dbcafacd03baeb0f18199de611a1619606073c5","date":1546559081,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsWriter#getInstance(FieldInfo).mjava","sourceNew":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      return getInstance(field, false);\n    }\n\n","sourceOld":"    private DocValuesConsumer getInstance(FieldInfo field) throws IOException {\n      DocValuesFormat format = null;\n      if (field.getDocValuesGen() != -1) {\n        final String formatName = field.getAttribute(PER_FIELD_FORMAT_KEY);\n        // this means the field never existed in that segment, yet is applied updates\n        if (formatName != null) {\n          format = DocValuesFormat.forName(formatName);\n        }\n      }\n      if (format == null) {\n        format = getDocValuesFormatForField(field.name);\n      }\n      if (format == null) {\n        throw new IllegalStateException(\"invalid null DocValuesFormat for field=\\\"\" + field.name + \"\\\"\");\n      }\n      final String formatName = format.getName();\n      \n      String previousValue = field.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + formatName);\n      }\n      \n      Integer suffix = null;\n      \n      ConsumerAndSuffix consumer = formats.get(format);\n      if (consumer == null) {\n        // First time we are seeing this format; create a new instance\n\n        if (field.getDocValuesGen() != -1) {\n          final String suffixAtt = field.getAttribute(PER_FIELD_SUFFIX_KEY);\n          // even when dvGen is != -1, it can still be a new field, that never\n          // existed in the segment, and therefore doesn't have the recorded\n          // attributes yet.\n          if (suffixAtt != null) {\n            suffix = Integer.valueOf(suffixAtt);\n          }\n        }\n        \n        if (suffix == null) {\n          // bump the suffix\n          suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n        }\n        suffixes.put(formatName, suffix);\n        \n        final String segmentSuffix = getFullSegmentSuffix(segmentWriteState.segmentSuffix,\n                                                          getSuffix(formatName, Integer.toString(suffix)));\n        consumer = new ConsumerAndSuffix();\n        consumer.consumer = format.fieldsConsumer(new SegmentWriteState(segmentWriteState, segmentSuffix));\n        consumer.suffix = suffix;\n        formats.put(format, consumer);\n      } else {\n        // we've already seen this format, so just grab its suffix\n        assert suffixes.containsKey(formatName);\n        suffix = consumer.suffix;\n      }\n      \n      previousValue = field.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(suffix));\n      if (field.getDocValuesGen() == -1 && previousValue != null) {\n        throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                        \", field=\" + field.name + \", old=\" + previousValue + \", new=\" + suffix);\n      }\n\n      // TODO: we should only provide the \"slice\" of FIS\n      // that this DVF actually sees ...\n      return consumer.consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1dbcafacd03baeb0f18199de611a1619606073c5":["9bb9a29a5e71a90295f175df8919802993142c9a"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"addc47115aa3376d79985cd4abc9f8c6e212a032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f06b860886fc48ea071171354835b8aed8a94de"],"8f06b860886fc48ea071171354835b8aed8a94de":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"9bb9a29a5e71a90295f175df8919802993142c9a":["8435160e9702b19398118ddf76b61c846612b6a4","971c32cba25aa5578c4b2a22aca3a3a93e01c251"],"971c32cba25aa5578c4b2a22aca3a3a93e01c251":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["addc47115aa3376d79985cd4abc9f8c6e212a032"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1dbcafacd03baeb0f18199de611a1619606073c5"]},"commit2Childs":{"1dbcafacd03baeb0f18199de611a1619606073c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8435160e9702b19398118ddf76b61c846612b6a4"],"addc47115aa3376d79985cd4abc9f8c6e212a032":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["8f06b860886fc48ea071171354835b8aed8a94de"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"8f06b860886fc48ea071171354835b8aed8a94de":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1dbcafacd03baeb0f18199de611a1619606073c5"],"971c32cba25aa5578c4b2a22aca3a3a93e01c251":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["addc47115aa3376d79985cd4abc9f8c6e212a032","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8435160e9702b19398118ddf76b61c846612b6a4":["9bb9a29a5e71a90295f175df8919802993142c9a","971c32cba25aa5578c4b2a22aca3a3a93e01c251"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}