{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testIndexSortDocValuesWithOddLength(boolean).mjava","commits":[{"id":"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb","date":1561533468,"type":0,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testIndexSortDocValuesWithOddLength(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexSortDocValuesWithOddLength(boolean reverse) throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"field\", SortField.Type.LONG, reverse));\n    iwc.setIndexSort(indexSort);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    writer.addDocument(createDocument(\"field\", -80));\n    writer.addDocument(createDocument(\"field\", -5));\n    writer.addDocument(createDocument(\"field\", 0));\n    writer.addDocument(createDocument(\"field\", 0));\n    writer.addDocument(createDocument(\"field\", 5));\n    writer.addDocument(createDocument(\"field\", 30));\n    writer.addDocument(createDocument(\"field\", 35));\n\n    DirectoryReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Test ranges consisting of one value.\n    assertEquals(1, searcher.count(createQuery(\"field\", -80, -80)));\n    assertEquals(1, searcher.count(createQuery(\"field\", -5, -5)));\n    assertEquals(2, searcher.count(createQuery(\"field\", 0, 0)));\n    assertEquals(1, searcher.count(createQuery(\"field\", 5, 5)));\n    assertEquals(1, searcher.count(createQuery(\"field\", 30, 30)));\n    assertEquals(1, searcher.count(createQuery(\"field\", 35, 35)));\n\n    assertEquals(0, searcher.count(createQuery(\"field\", -90, -90)));\n    assertEquals(0, searcher.count(createQuery(\"field\", 6, 6)));\n    assertEquals(0, searcher.count(createQuery(\"field\", 40, 40)));\n\n    // Test the lower end of the document value range.\n    assertEquals(2, searcher.count(createQuery(\"field\", -90, -4)));\n    assertEquals(2, searcher.count(createQuery(\"field\", -80, -4)));\n    assertEquals(1, searcher.count(createQuery(\"field\", -70, -4)));\n    assertEquals(2, searcher.count(createQuery(\"field\", -80, -5)));\n\n    // Test the upper end of the document value range.\n    assertEquals(1, searcher.count(createQuery(\"field\", 25, 34)));\n    assertEquals(2, searcher.count(createQuery(\"field\", 25, 35)));\n    assertEquals(2, searcher.count(createQuery(\"field\", 25, 36)));\n    assertEquals(2, searcher.count(createQuery(\"field\", 30, 35)));\n\n    // Test multiple occurrences of the same value.\n    assertEquals(2, searcher.count(createQuery(\"field\", -4, 4)));\n    assertEquals(2, searcher.count(createQuery(\"field\", -4, 0)));\n    assertEquals(2, searcher.count(createQuery(\"field\", 0, 4)));\n    assertEquals(4, searcher.count(createQuery(\"field\", 0, 30)));\n\n    // Test ranges that span all documents.\n    assertEquals(7, searcher.count(createQuery(\"field\", -80, 35)));\n    assertEquals(7, searcher.count(createQuery(\"field\", -90, 40)));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}