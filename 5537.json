{"path":"src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}