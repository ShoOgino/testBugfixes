{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,SolrCore,Query,SolrParams).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,SolrCore,Query,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList, SolrCore core,\n\t\t\tQuery query, SolrParams solrParams) {\n\t\tSolrHighlighter highligher = null;\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args);\n\t\t}\n\n\t\tRefCounted<SolrIndexSearcher> refCounter = core.getSearcher();\n\t\tSolrIndexSearcher searcher = refCounter.get();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\ttry {\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"IOException\", e);\n\t\t} finally {\n\t\t\trefCounter.decref();\n\t\t}\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,SolrCore,Query,SolrParams).mjava","sourceNew":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList,\n\t\t\tQuery query, final SolrQueryRequest sreq) throws IOException {\n\t\tSolrHighlighter highligher = null;\n                SolrParams solrParams = sreq.getParams();\n                SolrCore core = sreq.getCore();\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n                          @Override\n                          public SolrIndexSearcher getSearcher() {\n                            return sreq.getSearcher();\n                          }\n                        };\n\t\t}\n\n\t\tSolrIndexSearcher searcher = sreq.getSearcher();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\n\t\treturn result;\n\t}\n\n","sourceOld":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList, SolrCore core,\n\t\t\tQuery query, SolrParams solrParams) {\n\t\tSolrHighlighter highligher = null;\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args);\n\t\t}\n\n\t\tRefCounted<SolrIndexSearcher> refCounter = core.getSearcher();\n\t\tSolrIndexSearcher searcher = refCounter.get();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\ttry {\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"IOException\", e);\n\t\t} finally {\n\t\t\trefCounter.decref();\n\t\t}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":[],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2a4e39332de25d2866f373dbf3991a7125b31d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}