{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"  final TopDocs search(Query query, Filter filter, int nDocs)\n       throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchers.length; i++) {  // search each searcher\n      TopDocs docs = searchers[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n    \n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4","date":1016601998,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  final TopDocs search(Query query, Filter filter, int nDocs)\n       throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchers.length; i++) {  // search each searcher\n      TopDocs docs = searchers[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"  final TopDocs search(Query query, Filter filter, int nDocs)\n       throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchers.length; i++) {  // search each searcher\n      TopDocs docs = searchers[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n    \n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"  final TopDocs search(Query query, Filter filter, int nDocs)\n       throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchers.length; i++) {  // search each searcher\n      TopDocs docs = searchers[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36e31648b7ec39d875e5e05bcc9ac24ae313690","date":1063282530,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                      // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    float minScore = 0.0f;\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n\tif (scoreDoc.score >= minScore) {\n\t  scoreDoc.doc += starts[i];\t\t  // convert doc\n\t  hq.put(scoreDoc);\t\t\t  // update hit queue\n\t  if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t    hq.pop();\t\t\t\t  // remove lowest in hit queue\n\t    minScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t  }\n\t} else\n\t  break;\t\t\t\t  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                      // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    Weight weight = prepareWeight(query);\n    return search(weight, filter, nDocs);\n  }\n\n","sourceOld":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(query, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,int).mjava","sourceNew":null,"sourceOld":"  public TopDocs search(Query query, Filter filter, int nDocs)\n      throws IOException {\n    Weight weight = prepareWeight(query);\n    return search(weight, filter, nDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["9c7454619ea6a0710272c1dd947345cee64489f6"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ceaa9738cad9616d1831286111af106e13e0e4b"]},"commit2Childs":{"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4":["9c7454619ea6a0710272c1dd947345cee64489f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9c7454619ea6a0710272c1dd947345cee64489f6":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}