{"path":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed || info.hasDocValues()) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed || info.hasDocValues()) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n  }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed || info.hasDocValues()) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"    SegmentCodecsBuilder tryAddAndSet(FieldInfo fi) {\n      if (fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n      return this;\n    }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":null,"sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final int size = infos.size();\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (int i = 0; i < size; i++) {\n      final FieldInfo info = infos.fieldInfo(i);\n      if (info.isIndexed || info.hasDocValues()) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(info.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        info.codecId = ord.intValue();\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":null,"sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["85a883878c0af761245ab048babc63d099f835f3"],"e92442af786151ee55bc283eb472f629e3c7b52b":["1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e92442af786151ee55bc283eb472f629e3c7b52b"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2d84736c4614acce6720851cbd2c823d7cd516e4","e92442af786151ee55bc283eb472f629e3c7b52b"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92442af786151ee55bc283eb472f629e3c7b52b"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"]},"commit2Childs":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"85a883878c0af761245ab048babc63d099f835f3":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"e92442af786151ee55bc283eb472f629e3c7b52b":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["e92442af786151ee55bc283eb472f629e3c7b52b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}