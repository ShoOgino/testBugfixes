{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#makeIndex(TestRunData,File,IndexWriter,boolean,boolean,boolean,StandardOptions).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#makeIndex(TestRunData,File,IndexWriter,boolean,boolean,boolean,StandardOptions).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Make index, and collect time data.\n     *\n     * @param trd       run data to populate\n     * @param srcDir    directory with source files\n     * @param iw        index writer, already open\n     * @param stored    store values of fields\n     * @param tokenized tokenize fields\n     * @param tfv       store term vectors\n     * @throws Exception\n     */\n    protected void makeIndex(TestRunData trd, File srcDir, IndexWriter iw, boolean stored, boolean tokenized,\n                             boolean tfv, StandardOptions options) throws Exception\n    {\n        //File[] groups = srcDir.listFiles();\n        List files = new ArrayList();\n        getAllFiles(srcDir, null, files);\n        Document doc = null;\n        long cnt = 0L;\n        TimeData td = new TimeData();\n        td.name = \"addDocument\";\n        int scaleUp = options.getScaleUp();\n        int logStep = options.getLogStep();\n        int max = Math.min(files.size(), options.getMaximumDocumentsToIndex());\n        for (int s = 0; s < scaleUp; s++)\n        {\n            String[] tags = new String[]{srcDir.getName() + \"/\" + s};\n            int i = 0;\n            for (Iterator iterator = files.iterator(); iterator.hasNext() && i < max; i++)\n            {\n                File file = (File) iterator.next();\n                doc = makeDocument(file, tags, stored, tokenized, tfv);\n                td.start();\n                iw.addDocument(doc);\n                td.stop();\n                cnt++;\n                if (cnt % logStep == 0)\n                {\n                    System.err.println(\" - processed \" + cnt + \", run id=\" + trd.getId());\n                    trd.addData(td);\n                    td.reset();\n                }\n            }\n        }\n        trd.addData(td);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f55f56ccbdfcad354e67291558fdec36be2341c8","date":1244730392,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#makeIndex(TestRunData,File,IndexWriter,boolean,boolean,boolean,StandardOptions).mjava","sourceNew":null,"sourceOld":"    /**\n     * Make index, and collect time data.\n     *\n     * @param trd       run data to populate\n     * @param srcDir    directory with source files\n     * @param iw        index writer, already open\n     * @param stored    store values of fields\n     * @param tokenized tokenize fields\n     * @param tfv       store term vectors\n     * @throws Exception\n     */\n    protected void makeIndex(TestRunData trd, File srcDir, IndexWriter iw, boolean stored, boolean tokenized,\n                             boolean tfv, StandardOptions options) throws Exception\n    {\n        //File[] groups = srcDir.listFiles();\n        List files = new ArrayList();\n        getAllFiles(srcDir, null, files);\n        Document doc = null;\n        long cnt = 0L;\n        TimeData td = new TimeData();\n        td.name = \"addDocument\";\n        int scaleUp = options.getScaleUp();\n        int logStep = options.getLogStep();\n        int max = Math.min(files.size(), options.getMaximumDocumentsToIndex());\n        for (int s = 0; s < scaleUp; s++)\n        {\n            String[] tags = new String[]{srcDir.getName() + \"/\" + s};\n            int i = 0;\n            for (Iterator iterator = files.iterator(); iterator.hasNext() && i < max; i++)\n            {\n                File file = (File) iterator.next();\n                doc = makeDocument(file, tags, stored, tokenized, tfv);\n                td.start();\n                iw.addDocument(doc);\n                td.stop();\n                cnt++;\n                if (cnt % logStep == 0)\n                {\n                    System.err.println(\" - processed \" + cnt + \", run id=\" + trd.getId());\n                    trd.addData(td);\n                    td.reset();\n                }\n            }\n        }\n        trd.addData(td);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f55f56ccbdfcad354e67291558fdec36be2341c8":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f55f56ccbdfcad354e67291558fdec36be2341c8"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"f55f56ccbdfcad354e67291558fdec36be2341c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}