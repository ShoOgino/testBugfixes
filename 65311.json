{"path":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"/dev/null","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    Hits hits = searcher.search(query);\n    assertEquals(10, hits.length());\n    for (int i = 0; i < hits.length(); i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    Hits hits = searcher.search(query);\n    assertEquals(10, hits.length());\n    for (int i = 0; i < hits.length(); i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    Hits hits = searcher.search(query);\n    assertEquals(10, hits.length());\n    for (int i = 0; i < hits.length(); i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    Hits hits = searcher.search(query);\n    assertEquals(10, hits.length());\n    for (int i = 0; i < hits.length(); i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setAnalyzer(\n        new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setAnalyzer(\n        new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}