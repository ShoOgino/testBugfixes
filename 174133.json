{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSetMinCompetitiveScore().mjava","commits":[{"id":"5003664d14ef48a0557ce1d8a684b15d62efe912","date":1539883534,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSetMinCompetitiveScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetMinCompetitiveScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n    TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, 1);\n    ScoreAndDoc scorer = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(1f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 0.5f;\n    // Make sure we do not call setMinCompetitiveScore for non-competitive hits\n    scorer.minCompetitiveScore = Float.NaN;\n    leafCollector.collect(2);\n    assertTrue(Float.isNaN(scorer.minCompetitiveScore));\n\n    scorer.doc = 3;\n    scorer.score = 4;\n    leafCollector.collect(3);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    // Make sure the min score is set on scorers on new segments\n    scorer = new ScoreAndDoc();\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n    assertEquals(3f, scorer.minCompetitiveScore, 0f);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60a97329527e682292497dd2f6fae1c519840bae","date":1587668642,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSetMinCompetitiveScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSetMinCompetitiveScore().mjava","sourceNew":"  public void testSetMinCompetitiveScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n    TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, 2);\n    ScoreAndDoc scorer = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertNull(scorer.minCompetitiveScore);\n    \n    scorer.doc = 2;\n    scorer.score = 3;\n    leafCollector.collect(2);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 3;\n    scorer.score = 0.5f;\n    // Make sure we do not call setMinCompetitiveScore for non-competitive hits\n    scorer.minCompetitiveScore = Float.NaN;\n    leafCollector.collect(3);\n    assertTrue(Float.isNaN(scorer.minCompetitiveScore));\n\n    scorer.doc = 4;\n    scorer.score = 4;\n    leafCollector.collect(4);\n    assertEquals(3f, scorer.minCompetitiveScore, 0f);\n\n    // Make sure the min score is set on scorers on new segments\n    scorer = new ScoreAndDoc();\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n    assertEquals(3f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertEquals(3f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 1;\n    scorer.score = 4;\n    leafCollector.collect(1);\n    assertEquals(4f, scorer.minCompetitiveScore, 0f);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetMinCompetitiveScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n    TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, 1);\n    ScoreAndDoc scorer = new ScoreAndDoc();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertNull(scorer.minCompetitiveScore);\n\n    scorer.doc = 1;\n    scorer.score = 2;\n    leafCollector.collect(1);\n    assertEquals(1f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 2;\n    scorer.score = 0.5f;\n    // Make sure we do not call setMinCompetitiveScore for non-competitive hits\n    scorer.minCompetitiveScore = Float.NaN;\n    leafCollector.collect(2);\n    assertTrue(Float.isNaN(scorer.minCompetitiveScore));\n\n    scorer.doc = 3;\n    scorer.score = 4;\n    leafCollector.collect(3);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    // Make sure the min score is set on scorers on new segments\n    scorer = new ScoreAndDoc();\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 0;\n    scorer.score = 1;\n    leafCollector.collect(0);\n    assertEquals(2f, scorer.minCompetitiveScore, 0f);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n    assertEquals(3f, scorer.minCompetitiveScore, 0f);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60a97329527e682292497dd2f6fae1c519840bae":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5003664d14ef48a0557ce1d8a684b15d62efe912":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60a97329527e682292497dd2f6fae1c519840bae"]},"commit2Childs":{"60a97329527e682292497dd2f6fae1c519840bae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["60a97329527e682292497dd2f6fae1c519840bae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}