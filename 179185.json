{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#closeCnxn().mjava","commits":[{"id":"be9f7175e1703e31f8d8de32612b7212db6acf76","date":1408660152,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#closeCnxn().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  public void closeCnxn() {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n          }\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4383b91725e5b335d0a9d5f24b122b813dddd0cc","date":1442106431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#closeCnxn().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#closeCnxn().mjava","sourceNew":"  public void closeCnxn() {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          AccessController.doPrivileged((PrivilegedAction<Void>) this::closeZookeeperChannel);\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n      \n      @SuppressForbidden(reason = \"Hack for Zookeper needs access to private methods.\")\n      private Void closeZookeeperChannel() {\n        final ClientCnxn cnxn = getConnection();\n        synchronized (cnxn) {\n          try {\n            final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadFld.setAccessible(true);\n            Object sendThread = sendThreadFld.get(cnxn);\n            if (sendThread != null) {\n              Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n              method.setAccessible(true);\n              try {\n                method.invoke(sendThread);\n              } catch (InvocationTargetException e) {\n                // is fine\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n          }\n        }\n        return null; // Void\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  public void closeCnxn() {\n    final Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                Method method = sendThread.getClass().getDeclaredMethod(\"testableCloseSocket\");\n                method.setAccessible(true);\n                try {\n                  method.invoke(sendThread);\n                } catch (InvocationTargetException e) {\n                  // is fine\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n          }\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}