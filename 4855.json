{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1be7eddae5f5e3424273c183686cc9e44196b811","date":1343102736,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = loader.getLines(file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de6b1e414481e1c25c32f310b02a6d192f7f9faa","date":1343310208,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = getLines(loader, file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = loader.getLines(file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = getLines(loader, file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = getLines(loader, file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    List<String> files = splitFileNames(stopTypesFiles);\n    if (files.size() > 0) {\n      stopTypes = new HashSet<String>();\n      for (String file : files) {\n        List<String> typesLines = getLines(loader, file.trim());\n        stopTypes.addAll(typesLines);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      List<String> files = splitFileNames(stopTypesFiles);\n      if (files.size() > 0) {\n        stopTypes = new HashSet<String>();\n        for (String file : files) {\n          List<String> typesLines = getLines(loader, file.trim());\n          stopTypes.addAll(typesLines);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    List<String> files = splitFileNames(stopTypesFiles);\n    if (files.size() > 0) {\n      stopTypes = new HashSet<>();\n      for (String file : files) {\n        List<String> typesLines = getLines(loader, file.trim());\n        stopTypes.addAll(typesLines);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    List<String> files = splitFileNames(stopTypesFiles);\n    if (files.size() > 0) {\n      stopTypes = new HashSet<String>();\n      for (String file : files) {\n        List<String> typesLines = getLines(loader, file.trim());\n        stopTypes.addAll(typesLines);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["f6f80818731469e00f54165ec94aae2db868ea05"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1be7eddae5f5e3424273c183686cc9e44196b811"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1be7eddae5f5e3424273c183686cc9e44196b811":["3241e06e642196396b80bb293acd9c0814d079e0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["1be7eddae5f5e3424273c183686cc9e44196b811"],"1be7eddae5f5e3424273c183686cc9e44196b811":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}