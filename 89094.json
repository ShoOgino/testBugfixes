{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}