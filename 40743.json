{"path":"contrib/analyzers/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","commits":[{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"contrib/snowball/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"contrib/analyzers/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"]},"commit2Childs":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}