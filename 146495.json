{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","commits":[{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        /* TODO: enable this after resolving LUCENE-4130\n         * CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n         * checkHeaders(cfsDir); // recurse into cfs\n         * cfsDir.close();\n         */\n        continue; // .cfs has its own header... would be nice to fix\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)) {\n        continue; // .cfe has its own header... would be nice to fix\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03288de96c3666aa5583cc4dce079f6894fb3b31","date":1339438313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n        continue; // .cfs has its own header... would be nice to fix\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)) {\n        continue; // .cfe has its own header... would be nice to fix\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        /* TODO: enable this after resolving LUCENE-4130\n         * CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n         * checkHeaders(cfsDir); // recurse into cfs\n         * cfsDir.close();\n         */\n        continue; // .cfs has its own header... would be nice to fix\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)) {\n        continue; // .cfe has its own header... would be nice to fix\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c01d39462806d7dce1e381b201c104783ab056","date":1339453993,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n        continue; // .cfs has its own header... would be nice to fix\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)) {\n        continue; // .cfe has its own header... would be nice to fix\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["61c01d39462806d7dce1e381b201c104783ab056","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["61c01d39462806d7dce1e381b201c104783ab056"],"03288de96c3666aa5583cc4dce079f6894fb3b31":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["61c01d39462806d7dce1e381b201c104783ab056","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61c01d39462806d7dce1e381b201c104783ab056":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"03288de96c3666aa5583cc4dce079f6894fb3b31":["61c01d39462806d7dce1e381b201c104783ab056"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"61c01d39462806d7dce1e381b201c104783ab056":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}