{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"/dev/null","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}