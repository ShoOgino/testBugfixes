{"path":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator();\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator();\n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator();\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator();\n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator();\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator();\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts);\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts);\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField);\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts);\n                                       }\n                                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField);\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    assert pendingCounts.size() == maxDoc;\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                              // doc -> valueCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new CountIterator(valueCounts);\n                                }\n                              },\n\n                              // values\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new ValuesIterator(values);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator());\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField);\n                                       }\n                                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator());\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField);\n                                       }\n                                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values;\n    final PackedLongValues valueCounts;\n    if (finalValues == null) {\n      values = pending.build();\n      valueCounts = pendingCounts.build();\n    } else {\n      values = finalValues;\n      valueCounts = finalValuesCount;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         final SortedNumericDocValues buf =\n                                             new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator());\n                                         if (sorted == null) {\n                                           return buf;\n                                         } else {\n                                           return new SortingLeafReader.SortingSortedNumericDocValues(buf, sorted);\n                                         }\n                                       }\n                                     });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator());\n                                       }\n                                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedNumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final PackedLongValues valueCounts = pendingCounts.build();\n\n    dvConsumer.addSortedNumericField(fieldInfo,\n                                     new EmptyDocValuesProducer() {\n                                       @Override\n                                       public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfoIn) {\n                                         if (fieldInfoIn != fieldInfo) {\n                                           throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                         }\n                                         return new BufferedSortedNumericDocValues(values, valueCounts, docsWithField.iterator());\n                                       }\n                                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5844844466689b1121b12ccb467623f894eb269d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","5844844466689b1121b12ccb467623f894eb269d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"b06445ae1731e049327712db0454e5643ca9b7fe":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b0267c69e2456a3477a1ad785723f2135da3117e","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["b0267c69e2456a3477a1ad785723f2135da3117e"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["ceec64003e8cc400e862d44c8589a41570432ab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"b0267c69e2456a3477a1ad785723f2135da3117e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5844844466689b1121b12ccb467623f894eb269d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}