{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#BlockImpactsEverythingEnum(FieldInfo,IntBlockTermState,SimScorer,int).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#BlockImpactsEverythingEnum(FieldInfo,IntBlockTermState,SimScorer,int).mjava","pathOld":"/dev/null","sourceNew":"    public BlockImpactsEverythingEnum(FieldInfo fieldInfo, IntBlockTermState termState, SimScorer scorer, int flags) throws IOException {\n      indexHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      indexHasPos = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      indexHasPayloads = fieldInfo.hasPayloads();\n      \n      needsPositions = PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS);\n      needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n      \n      this.docIn = Lucene50PostingsReader.this.docIn.clone();\n      \n      encoded = new byte[MAX_ENCODED_SIZE];\n\n      if (indexHasPos && needsPositions) {\n        this.posIn = Lucene50PostingsReader.this.posIn.clone();\n      } else {\n        this.posIn = null;\n      }\n      \n      if ((indexHasOffsets && needsOffsets) || (indexHasPayloads && needsPayloads)) {\n        this.payIn = Lucene50PostingsReader.this.payIn.clone();\n      } else {\n        this.payIn = null;\n      }\n      \n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      totalTermFreq = termState.totalTermFreq;\n      docIn.seek(docTermStartFP);\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene50ScoreSkipReader(version,\n          docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPos,\n          indexHasOffsets,\n          indexHasPayloads,\n          scorer);\n      skipper.init(docTermStartFP+termState.skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n\n      if (indexHasFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#BlockImpactsEverythingEnum(FieldInfo,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#BlockImpactsEverythingEnum(FieldInfo,IntBlockTermState,SimScorer,int).mjava","sourceNew":"    public BlockImpactsEverythingEnum(FieldInfo fieldInfo, IntBlockTermState termState, int flags) throws IOException {\n      indexHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      indexHasPos = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      indexHasPayloads = fieldInfo.hasPayloads();\n      \n      needsPositions = PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS);\n      needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n      \n      this.docIn = Lucene50PostingsReader.this.docIn.clone();\n      \n      encoded = new byte[MAX_ENCODED_SIZE];\n\n      if (indexHasPos && needsPositions) {\n        this.posIn = Lucene50PostingsReader.this.posIn.clone();\n      } else {\n        this.posIn = null;\n      }\n      \n      if ((indexHasOffsets && needsOffsets) || (indexHasPayloads && needsPayloads)) {\n        this.payIn = Lucene50PostingsReader.this.payIn.clone();\n      } else {\n        this.payIn = null;\n      }\n      \n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      totalTermFreq = termState.totalTermFreq;\n      docIn.seek(docTermStartFP);\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene50ScoreSkipReader(version,\n          docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPos,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(docTermStartFP+termState.skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n\n      if (indexHasFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n    }\n\n","sourceOld":"    public BlockImpactsEverythingEnum(FieldInfo fieldInfo, IntBlockTermState termState, SimScorer scorer, int flags) throws IOException {\n      indexHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      indexHasPos = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      indexHasPayloads = fieldInfo.hasPayloads();\n      \n      needsPositions = PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS);\n      needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n      \n      this.docIn = Lucene50PostingsReader.this.docIn.clone();\n      \n      encoded = new byte[MAX_ENCODED_SIZE];\n\n      if (indexHasPos && needsPositions) {\n        this.posIn = Lucene50PostingsReader.this.posIn.clone();\n      } else {\n        this.posIn = null;\n      }\n      \n      if ((indexHasOffsets && needsOffsets) || (indexHasPayloads && needsPayloads)) {\n        this.payIn = Lucene50PostingsReader.this.payIn.clone();\n      } else {\n        this.payIn = null;\n      }\n      \n      if (indexHasOffsets) {\n        offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n        offsetLengthBuffer = new int[MAX_DATA_SIZE];\n      } else {\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        startOffset = -1;\n        endOffset = -1;\n      }\n\n      if (indexHasPayloads) {\n        payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        payloadBytes = new byte[128];\n        payload = new BytesRef();\n      } else {\n        payloadLengthBuffer = null;\n        payloadBytes = null;\n        payload = null;\n      }\n\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      totalTermFreq = termState.totalTermFreq;\n      docIn.seek(docTermStartFP);\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene50ScoreSkipReader(version,\n          docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPos,\n          indexHasOffsets,\n          indexHasPayloads,\n          scorer);\n      skipper.init(docTermStartFP+termState.skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n\n      if (indexHasFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}