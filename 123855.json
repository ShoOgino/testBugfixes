{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","commits":[{"id":"32d5034e9ef94910c8cd2b01cc3c2be222453d0c","date":1342825337,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","pathOld":"/dev/null","sourceNew":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","pathOld":"/dev/null","sourceNew":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","pathOld":"/dev/null","sourceNew":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","date":1346817835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          descriptor.getCloudDescriptor().isLeader = false;\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().isLeader = false;\n      }\n    }\n  }\n\n","sourceOld":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          descriptor.getCloudDescriptor().isLeader = false;\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect, boolean updateLastPublished) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          descriptor.getCloudDescriptor().isLeader = false;\n          publish(descriptor, ZkStateReader.DOWN, updateLastPublished);\n        } catch (Exception e) {\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n          }\n          try {\n            publish(descriptor, ZkStateReader.DOWN);\n          } catch (Exception e2) {\n            SolrException.log(log, \"\", e2);\n            continue;\n          }\n        }\n        try {\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          descriptor.getCloudDescriptor().isLeader = false;\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6378064655e76cd7b908b1cab4ce425b384b508":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6378064655e76cd7b908b1cab4ce425b384b508"]},"commit2Childs":{"a6378064655e76cd7b908b1cab4ce425b384b508":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["a6378064655e76cd7b908b1cab4ce425b384b508"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}