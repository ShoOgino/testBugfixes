{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"/dev/null","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      // writer.setInfoStream(System.out);\n      long t0 = System.currentTimeMillis();\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      long t1 = System.currentTimeMillis();\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      long t0 = System.currentTimeMillis();\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      long t1 = System.currentTimeMillis();\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      // writer.setInfoStream(System.out);\n      long t0 = System.currentTimeMillis();\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      long t1 = System.currentTimeMillis();\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741a5cca05cabe1e7482410a29e563a08379251a","date":1196676550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      long t0 = System.currentTimeMillis();\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      long t1 = System.currentTimeMillis();\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")));\n      assertEquals(300, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.TOKENIZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = new Random(31415);\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void xxxtestDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void xxxtestDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setRAMBufferSizeMB(0.5));\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setRAMBufferSizeMB(0.5));\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["cb1066f2afe9450585d0d10063ea4450085236f1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["741a5cca05cabe1e7482410a29e563a08379251a"],"741a5cca05cabe1e7482410a29e563a08379251a":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["741a5cca05cabe1e7482410a29e563a08379251a"],"cb1066f2afe9450585d0d10063ea4450085236f1":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"741a5cca05cabe1e7482410a29e563a08379251a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}