{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher#testWaitForStateChecksCurrentState().mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher#testWaitForStateChecksCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}