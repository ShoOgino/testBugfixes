{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseID();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feedid is null\");\n        if(entry.getVersion() != 1)\n            throw new StorageException(\"entry version must be 1\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"ProvidedService must not be null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseId();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseID();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed-id is null\");\n        if(entry.getVersion() != 1)\n            throw new StorageException(\"entry version must be 1\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"ProvidedService must not be null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseId();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feedid is null\");\n        if(entry.getVersion() != 1)\n            throw new StorageException(\"entry version must be 1\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"ProvidedService must not be null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseId();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#storeEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed-id is null\");\n        if(entry.getVersion() != 1)\n            throw new StorageException(\"entry version must be 1\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"ProvidedService must not be null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseId();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(final ServerBaseEntry entry)\n            throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed-id is null\");\n        if(entry.getVersion() != 1)\n            throw new StorageException(\"entry version must be 1\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"ProvidedService must not be null\");\n        StorageModifier modifier = this.controller.getStorageModifier();\n        String id = this.controller.releaseId();\n        entry.setId(entry.getFeedId() + id);\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Store entry \" + id + \" -- feed: \" + entry.getFeedId());\n\n        try {\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                    StorageOperation.INSERT);\n            modifier.insertEntry(wrapper);\n        } catch (IOException e) {\n            StorageException ex = new StorageException(\"Can't create Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        return entry.getEntry();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}