{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","commits":[{"id":"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","date":1556831715,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb","date":1561824429,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","bugFix":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ece7e3f03c890461bce71fb45142b75807c28a4e","date":1583713564,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      List<LeafReaderContext> con = searcher.getTopReaderContext().leaves();\n      for(int i=0; i<con.size(); i++) {\n        contexts[i] = con.get(i);\n      }\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      List<LeafReaderContext> con = searcher.getTopReaderContext().leaves();\n      for(int i=0; i<con.size(); i++) {\n        contexts[i] = con.get(i);\n      }\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, valueCount, groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, valueCount, groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, valueCount, groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, valueCount, groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, valueCount, groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      List<LeafReaderContext> con = searcher.getTopReaderContext().leaves();\n      for(int i=0; i<con.size(); i++) {\n        contexts[i] = con.get(i);\n      }\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["ece7e3f03c890461bce71fb45142b75807c28a4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ece7e3f03c890461bce71fb45142b75807c28a4e":["432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"]},"commit2Childs":{"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb":["ece7e3f03c890461bce71fb45142b75807c28a4e"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"],"ece7e3f03c890461bce71fb45142b75807c28a4e":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}