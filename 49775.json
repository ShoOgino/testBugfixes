{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b3034cd34b8cb87874ebdd7b1cfb2281200623","date":1498354741,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2d13525f1dc36cdefcb92f649c930405104dbe8","date":1498512806,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a2d13525f1dc36cdefcb92f649c930405104dbe8"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a2d13525f1dc36cdefcb92f649c930405104dbe8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0f719faa74f7213d4a395510dbc1f1b7cb178484","43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["30c8e5574b55d57947e989443dfde611646530ee"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["a2d13525f1dc36cdefcb92f649c930405104dbe8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["43b3034cd34b8cb87874ebdd7b1cfb2281200623","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}