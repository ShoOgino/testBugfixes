{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    boolean scoresNeeded = false;\n    for (FacetRequest frq : facetSearchParams.facetRequests) {\n      if (frq.requireDocumentScore()) {\n        scoresNeeded = true;\n        break;\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), scoresNeeded);\n  }\n\n","sourceOld":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    boolean scoresNeeded = false;\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        scoresNeeded = true;\n        break;\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), scoresNeeded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    boolean scoresNeeded = false;\n    for (FacetRequest frq : facetSearchParams.facetRequests) {\n      if (frq.requireDocumentScore()) {\n        scoresNeeded = true;\n        break;\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), scoresNeeded);\n  }\n\n","sourceOld":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    boolean scoresNeeded = false;\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        scoresNeeded = true;\n        break;\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), scoresNeeded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    boolean scoresNeeded = false;\n    for (FacetRequest frq : facetSearchParams.facetRequests) {\n      if (frq.requireDocumentScore()) {\n        scoresNeeded = true;\n        break;\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), scoresNeeded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}