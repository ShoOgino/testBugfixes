{"path":"backwards/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,char[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,char[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param buffer that will contain the encoded chars, must be at least of {@link #BUF_SIZE_INT}\n   * length\n   * @return number of chars written to buffer\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final char[] buffer) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (31-shift)/7 + 1, len = nChars+1;\n    buffer[0] = (char)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars>=1) {\n      // Store 7 bits per character for good efficiency when UTF-8 encoding.\n      // The whole number is right-justified so that lucene can prefix-encode\n      // the terms more efficiently.\n      buffer[nChars--] = (char)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,char[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,char[]).mjava","sourceNew":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param buffer that will contain the encoded chars, must be at least of {@link #BUF_SIZE_INT}\n   * length\n   * @return number of chars written to buffer\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final char[] buffer) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (31-shift)/7 + 1, len = nChars+1;\n    buffer[0] = (char)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars>=1) {\n      // Store 7 bits per character for good efficiency when UTF-8 encoding.\n      // The whole number is right-justified so that lucene can prefix-encode\n      // the terms more efficiently.\n      buffer[nChars--] = (char)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param buffer that will contain the encoded chars, must be at least of {@link #BUF_SIZE_INT}\n   * length\n   * @return number of chars written to buffer\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final char[] buffer) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (31-shift)/7 + 1, len = nChars+1;\n    buffer[0] = (char)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars>=1) {\n      // Store 7 bits per character for good efficiency when UTF-8 encoding.\n      // The whole number is right-justified so that lucene can prefix-encode\n      // the terms more efficiently.\n      buffer[nChars--] = (char)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}