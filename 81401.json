{"path":"lucene/core/src/test/org/apache/lucene/search/TestSegmentCacheables#testMultipleDocValuesDelegates().mjava","commits":[{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSegmentCacheables#testMultipleDocValuesDelegates().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleDocValuesDelegates() throws IOException {\n\n    SegmentCacheable seg = (ctx) -> true;\n    SegmentCacheable non = (ctx) -> false;\n    SegmentCacheable dv1 = (ctx) -> DocValues.isCacheable(ctx, \"field1\");\n    SegmentCacheable dv2 = (ctx) -> DocValues.isCacheable(ctx, \"field2\");\n    SegmentCacheable dv3 = (ctx) -> DocValues.isCacheable(ctx, \"field3\");\n    SegmentCacheable dv34 = (ctx) -> DocValues.isCacheable(ctx, \"field3\", \"field4\");\n    SegmentCacheable dv12 = (ctx) -> DocValues.isCacheable(ctx, \"field1\", \"field2\");\n\n    SegmentCacheable seg_dv1 = (ctx) -> isCacheable(ctx, seg, dv1);\n    SegmentCacheable dv2_dv34 = (ctx) -> isCacheable(ctx, dv2, dv34);\n    SegmentCacheable dv2_non = (ctx) -> isCacheable(ctx, dv2, non);\n\n    SegmentCacheable seg_dv1_dv2_dv34 = (ctx) -> isCacheable(ctx, seg_dv1, dv2_dv34);\n\n    SegmentCacheable dv1_dv3 = (ctx) -> isCacheable(ctx, dv1, dv3);\n    SegmentCacheable dv12_dv1_dv3 = (ctx) -> isCacheable(ctx, dv12, dv1_dv3);\n\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field3\", 1));\n    doc.add(newTextField(\"text\", \"text\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    DirectoryReader reader = DirectoryReader.open(w);\n\n    LeafReaderContext ctx = reader.leaves().get(0);\n\n    assertTrue(seg_dv1.isCacheable(ctx));\n    assertTrue(dv2_dv34.isCacheable(ctx));\n    assertTrue(seg_dv1_dv2_dv34.isCacheable(ctx));\n    assertFalse(dv2_non.isCacheable(ctx));\n\n    w.updateNumericDocValue(new Term(\"text\", \"text\"), \"field3\", 2l);\n    w.commit();\n    reader.close();\n    reader = DirectoryReader.open(dir);\n\n    // after field3 is updated, all composites referring to it should be uncacheable\n\n    ctx = reader.leaves().get(0);\n    assertTrue(seg_dv1.isCacheable(ctx));\n    assertFalse(dv34.isCacheable(ctx));\n    assertFalse(dv2_dv34.isCacheable(ctx));\n    assertFalse(dv1_dv3.isCacheable(ctx));\n    assertFalse(seg_dv1_dv2_dv34.isCacheable(ctx));\n    assertFalse(dv12_dv1_dv3.isCacheable(ctx));\n\n    reader.close();\n    w.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"]},"commit2Childs":{"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}