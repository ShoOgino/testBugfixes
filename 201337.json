{"path":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","sourceNew":"  /**\n   * Flushes the in-memory bufer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","sourceOld":"  /**\n   * Flushes the in-memory bufer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","sourceNew":"  /**\n   * Flushes the in-memory bufer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected final int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","sourceOld":"  /**\n   * Flushes the in-memory bufer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","sourceNew":"  /**\n   * Flushes the in-memory buffer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected final int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","sourceOld":"  /**\n   * Flushes the in-memory bufer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected final int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","bugFix":["d05b801583d7568b68b06c67b22136d2a3b3e3bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af9ce763a9d61cb88781e638d593430b71efa7dc","date":1586259009,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#flushBuffer(IndexOutput,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Flushes the in-memory buffer to the given output, copying at most\n   * <code>numBytes</code>.\n   * <p>\n   * <b>NOTE:</b> this method does not refill the buffer, however it does\n   * advance the buffer position.\n   * \n   * @return the number of bytes actually flushed from the in-memory buffer.\n   */\n  protected final int flushBuffer(IndexOutput out, long numBytes) throws IOException {\n    int toCopy = bufferLength - bufferPosition;\n    if (toCopy > numBytes) {\n      toCopy = (int) numBytes;\n    }\n    if (toCopy > 0) {\n      out.writeBytes(buffer, bufferPosition, toCopy);\n      bufferPosition += toCopy;\n    }\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["7602e63987582091a0e432f8d8f7619d2206fab7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7602e63987582091a0e432f8d8f7619d2206fab7":["7d91b7936af3081e704512ac1234340133e59904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af9ce763a9d61cb88781e638d593430b71efa7dc"]},"commit2Childs":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d91b7936af3081e704512ac1234340133e59904":["7602e63987582091a0e432f8d8f7619d2206fab7"],"7602e63987582091a0e432f8d8f7619d2206fab7":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}