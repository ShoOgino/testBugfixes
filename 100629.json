{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.x)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.y)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.x)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.y)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a","date":1460035668,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","sourceNew":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n    }\n  }\n\n","sourceOld":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.x)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.y)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.x)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.y)),\n                                         PointInShapeIntersectVisitor.decodeValueMin(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeRoundsDown().mjava","sourceNew":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    PlanetModel planetModel = randomPlanetModel();\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        GeoPoint point = new GeoPoint(planetModel, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.x), planetModel),\n                                         Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.y), planetModel),\n                                         Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.z), planetModel));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        GeoPoint point = new GeoPoint(planetModel, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.x), planetModel),\n                                         Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.y), planetModel),\n                                         Geo3DUtil.decodeValueFloor(planetModel.encodeValue(point.z), planetModel));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n    }\n  }\n\n","sourceOld":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(lat), toRadians(lon));\n        GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),\n                                         Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));\n        assertTrue(pointEnc.x <= point.x);\n        assertTrue(pointEnc.y <= point.y);\n        assertTrue(pointEnc.z <= point.z);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}