{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea56d2514dca3494326429a4b7d9afa166b0b205","date":1320331093,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    Object luceneAutoCommit = solrConfig.get(prefix + \"/luceneAutoCommit\", null);\n    if(luceneAutoCommit != null) {\n      log.warn(\"found deprecated option : luceneAutoCommit no longer has any affect - it is always false\");\n    }\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        luceneVersion.onOrAfter(Version.LUCENE_36));\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0667c7011259c2634991cf172c550f2c411df2ae","date":1350053156,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415fc059c6f2340aed1714220b9578c3f66ed09c","date":1366942705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n    \n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1cb61792cbeba6c44e2530ca5836b96d956adb25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n    \n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n    \n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cb61792cbeba6c44e2530ca5836b96d956adb25","date":1372469272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile != null) {\n        log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        try {\n          FileOutputStream fos = new FileOutputStream(f, true);\n          infoStream = new PrintStreamInfoStream(new PrintStream(fos, true, \"UTF-8\"));\n        } catch (Exception e) {\n          log.error(\"Could not create info stream for file \" + infoStreamFile, e);\n        }\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n    \n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":["2e0bc4832caa5a5ed426b1618dedc1faf34f43ec","415fc059c6f2340aed1714220b9578c3f66ed09c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c137d4b396254a19c409132bb476af43a6755b3d","date":1372772052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        log.warn(\"IndexWriter infoStream file log is enabled: \" + infoStreamFile +\n                 \"\\nThis feature is deprecated. Remove @file from <infoStream> to output messages to solr's logfile\");\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        try {\n          FileOutputStream fos = new FileOutputStream(f, true);\n          infoStream = new PrintStreamInfoStream(new PrintStream(fos, true, \"UTF-8\"));\n        } catch (Exception e) {\n          log.error(\"Could not create info stream for file \" + infoStreamFile, e);\n        }\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile != null) {\n        log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        try {\n          FileOutputStream fos = new FileOutputStream(f, true);\n          infoStream = new PrintStreamInfoStream(new PrintStream(fos, true, \"UTF-8\"));\n        } catch (Exception e) {\n          log.error(\"Could not create info stream for file \" + infoStreamFile, e);\n        }\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddd7debaaa66447dc4b40413599ea8e3830cfdfd","date":1372775804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        log.warn(\"IndexWriter infoStream file log is enabled: \" + infoStreamFile +\n                 \"\\nThis feature is deprecated. Remove @file from <infoStream> to output messages to solr's logfile\");\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        try {\n          FileOutputStream fos = new FileOutputStream(f, true);\n          infoStream = new PrintStreamInfoStream(new PrintStream(fos, true, \"UTF-8\"));\n        } catch (Exception e) {\n          log.error(\"Could not create info stream for file \" + infoStreamFile, e);\n        }\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n    \n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2901fdf41816ed0ac227f1c2245c963778fb2074","date":1375381090,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergeScheduler/text()\",null) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.get(prefix+\"/mergePolicy/text()\",null) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.reopenReaders == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since reopenReaders is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e7d674d8857e8df2e386eed8175bd53a1912116","date":1398195958,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    checkIntegrityAtMerge = solrConfig.getBool(prefix + \"/checkIntegrityAtMerge\", def.checkIntegrityAtMerge);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    checkIntegrityAtMerge = solrConfig.getBool(prefix + \"/checkIntegrityAtMerge\", def.checkIntegrityAtMerge);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    checkIntegrityAtMerge = solrConfig.getBool(prefix + \"/checkIntegrityAtMerge\", def.checkIntegrityAtMerge);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_36, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    checkIntegrityAtMerge = solrConfig.getBool(prefix + \"/checkIntegrityAtMerge\", def.checkIntegrityAtMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c605959f474a9750852dcbac5d132aa776ddf8","date":1418318507,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n                     (null == solrConfig.getNode(prefix+\"/checkIntegrityAtMerge\",false)),\n                     false);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    checkIntegrityAtMerge = solrConfig.getBool(prefix + \"/checkIntegrityAtMerge\", def.checkIntegrityAtMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b321ae9c560ebc362e46acf2451184f71b88ccc0","date":1418330707,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n                     (null == solrConfig.getNode(prefix+\"/checkIntegrityAtMerge\",false)),\n                     true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n                     (null == solrConfig.getNode(prefix+\"/checkIntegrityAtMerge\",false)),\n                     false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergeScheduler\",false) != null) && (solrConfig.get(prefix+\"/mergeScheduler/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix+\"/mergePolicy\",false) != null) && (solrConfig.get(prefix+\"/mergePolicy/@class\",null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix+\"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n    if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {\n      throw new IllegalArgumentException(\"Supplying a mergedSegmentWarmer will do nothing since nrtMode is false\");\n    }\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n                     (null == solrConfig.getNode(prefix+\"/checkIntegrityAtMerge\",false)),\n                     true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    effectiveUseCompountFileSetting = useCompoundFile;\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    maxIndexingThreads=solrConfig.getInt(prefix+\"/maxIndexingThreads\",def.maxIndexingThreads);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  @SuppressWarnings(\"deprecation\")\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    defaultMergePolicyClassName = def.defaultMergePolicyClassName;\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    \n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":["ad86a83e02ca589601745e08147f68420dc7546c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad86a83e02ca589601745e08147f68420dc7546c","date":1456501906,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergePolicyFactoryInfo != null && mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcc380048b55345ad31956481649ad7d139b80b","date":1494007096,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24227480271877af3b86e4f724fd8e7d8371f700","date":1494597527,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12a024bac1772e3d7a9fd342b27fbf4c037fa7ac","date":1495789801,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    effectiveUseCompoundFileSetting = solrConfig.getBool(prefix+\"/useCompoundFile\", def.getUseCompoundFile());\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n    if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergePolicy> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n    if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {\n      throw new IllegalArgumentException(\"<mergeFactor> and <mergePolicyFactory> are mutually exclusive.\");\n    }\n\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.\",\n        (mergePolicyInfo == null), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (maxMergeDocs == def.maxMergeDocs), false);\n    assertWarnOrFail(\"Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.\",\n        (mergeFactor == def.mergeFactor), false);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e52f407fdd673843031b092b1a4bf7a12f2c281","date":1542639073,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    luceneVersion = solrConfig.luceneMatchVersion;\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    // how do we validate the value??\n    ramPerThreadHardLimitMB = solrConfig.getInt(prefix+\"/ramPerThreadHardLimitMB\", def.ramPerThreadHardLimitMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix '{}' for index configuration\", prefix);\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    // how do we validate the value??\n    ramPerThreadHardLimitMB = solrConfig.getInt(prefix+\"/ramPerThreadHardLimitMB\", def.ramPerThreadHardLimitMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix \\\"\"+prefix+\"\\\" for index configuration\");\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    // how do we validate the value??\n    ramPerThreadHardLimitMB = solrConfig.getInt(prefix+\"/ramPerThreadHardLimitMB\", def.ramPerThreadHardLimitMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d7561aa9163e566b45895f013690403401d5e5c","date":1596822876,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix '{}' for index configuration\", prefix);\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs = solrConfig.getInt(prefix+\"/maxBufferedDocs\", def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n    maxCommitMergeWaitMillis = solrConfig.getInt(prefix+\"/maxCommitMergeWaitTime\", def.maxCommitMergeWaitMillis);\n\n    // how do we validate the value??\n    ramPerThreadHardLimitMB = solrConfig.getInt(prefix+\"/ramPerThreadHardLimitMB\", def.ramPerThreadHardLimitMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrIndexConfig which parses the Lucene related config params in solrconfig.xml\n   * @param solrConfig the overall SolrConfig object\n   * @param prefix the XPath prefix for which section to parse (mandatory)\n   * @param def a SolrIndexConfig instance to pick default values from (optional)\n   */\n  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null) {\n      prefix = \"indexConfig\";\n      log.debug(\"Defaulting to prefix '{}' for index configuration\", prefix);\n    }\n    \n    if (def == null) {\n      def = new SolrIndexConfig(solrConfig);\n    }\n\n    // sanity check: this will throw an error for us if there is more then one\n    // config section\n    Object unused = solrConfig.getNode(prefix, false);\n\n    // Assert that end-of-life parameters or syntax is not in our config.\n    // Warn for luceneMatchVersion's before LUCENE_3_6, fail fast above\n    assertWarnOrFail(\"The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\\\"myclass\\\"/> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergeScheduler\", false) != null) && (solrConfig.get(prefix + \"/mergeScheduler/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy>myclass</mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        !((solrConfig.getNode(prefix + \"/mergePolicy\", false) != null) && (solrConfig.get(prefix + \"/mergePolicy/@class\", null) == null)),\n        true);\n    assertWarnOrFail(\"The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.\",\n        solrConfig.get(prefix + \"/luceneAutoCommit\", null) == null,\n        true);\n\n    useCompoundFile = solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    // how do we validate the value??\n    ramPerThreadHardLimitMB = solrConfig.getInt(prefix+\"/ramPerThreadHardLimitMB\", def.ramPerThreadHardLimitMB);\n\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    List<PluginInfo> infos = solrConfig.readPluginInfos(prefix + \"/metrics\", false, false);\n    if (infos.isEmpty()) {\n      metricsInfo = def.metricsInfo;\n    } else {\n      metricsInfo = infos.get(0);\n    }\n    mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    mergePolicyFactoryInfo = getPluginInfo(prefix + \"/mergePolicyFactory\", solrConfig, def.mergePolicyFactoryInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergePolicy> is no longer supported, use <mergePolicyFactory> instead.\",\n        getPluginInfo(prefix + \"/mergePolicy\", solrConfig, null) == null,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <maxMergeDocs> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/maxMergeDocs\", 0) == 0,\n        true);\n    assertWarnOrFail(\"Beginning with Solr 7.0, <mergeFactor> is no longer supported, configure it on the relevant <mergePolicyFactory> instead.\",\n        solrConfig.getInt(prefix+\"/mergeFactor\", 0) == 0,\n        true);\n\n    String val = solrConfig.get(prefix + \"/termIndexInterval\", null);\n    if (val != null) {\n      throw new IllegalArgumentException(\"Illegal parameter 'termIndexInterval'\");\n    }\n\n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      String infoStreamFile = solrConfig.get(prefix + \"/infoStream/@file\", null);\n      if (infoStreamFile == null) {\n        log.info(\"IndexWriter infoStream solr logging is enabled\");\n        infoStream = new LoggingInfoStream();\n      } else {\n        throw new IllegalArgumentException(\"Remove @file from <infoStream> to output messages to solr's logfile\");\n      }\n    }\n    mergedSegmentWarmerInfo = getPluginInfo(prefix + \"/mergedSegmentWarmer\", solrConfig, def.mergedSegmentWarmerInfo);\n\n    assertWarnOrFail(\"Beginning with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)\",\n        (null == solrConfig.getNode(prefix + \"/checkIntegrityAtMerge\", false)),\n        true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddd7debaaa66447dc4b40413599ea8e3830cfdfd":["c137d4b396254a19c409132bb476af43a6755b3d"],"151c786e439f34edb91b77d019109463ab0a6548":["4e52f407fdd673843031b092b1a4bf7a12f2c281"],"56c605959f474a9750852dcbac5d132aa776ddf8":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"af2638813028b254a88b418ebeafb541afb49653":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","ad86a83e02ca589601745e08147f68420dc7546c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["415fc059c6f2340aed1714220b9578c3f66ed09c","ddd7debaaa66447dc4b40413599ea8e3830cfdfd"],"12a024bac1772e3d7a9fd342b27fbf4c037fa7ac":["24227480271877af3b86e4f724fd8e7d8371f700"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c137d4b396254a19c409132bb476af43a6755b3d":["1cb61792cbeba6c44e2530ca5836b96d956adb25"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["12a024bac1772e3d7a9fd342b27fbf4c037fa7ac"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"5d7561aa9163e566b45895f013690403401d5e5c":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"b321ae9c560ebc362e46acf2451184f71b88ccc0":["56c605959f474a9750852dcbac5d132aa776ddf8"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"d82832af39f94dbb58a3130fd216ff1d49435589":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","0667c7011259c2634991cf172c550f2c411df2ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["2901fdf41816ed0ac227f1c2245c963778fb2074"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["415fc059c6f2340aed1714220b9578c3f66ed09c"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["151c786e439f34edb91b77d019109463ab0a6548"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["24227480271877af3b86e4f724fd8e7d8371f700","12a024bac1772e3d7a9fd342b27fbf4c037fa7ac"],"4e52f407fdd673843031b092b1a4bf7a12f2c281":["28288370235ed02234a64753cdbf0c6ec096304a"],"1cb61792cbeba6c44e2530ca5836b96d956adb25":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2901fdf41816ed0ac227f1c2245c963778fb2074"],"2901fdf41816ed0ac227f1c2245c963778fb2074":["a45bec74b98f6fc05f52770cfb425739e6563960"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","6e7d674d8857e8df2e386eed8175bd53a1912116"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"a45bec74b98f6fc05f52770cfb425739e6563960":["ddd7debaaa66447dc4b40413599ea8e3830cfdfd"],"6e7d674d8857e8df2e386eed8175bd53a1912116":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"ea56d2514dca3494326429a4b7d9afa166b0b205":["c26f00b574427b55127e869b935845554afde1fa"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["b321ae9c560ebc362e46acf2451184f71b88ccc0"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["af2638813028b254a88b418ebeafb541afb49653","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","0667c7011259c2634991cf172c550f2c411df2ae"],"0667c7011259c2634991cf172c550f2c411df2ae":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4dcc380048b55345ad31956481649ad7d139b80b":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["ea56d2514dca3494326429a4b7d9afa166b0b205"],"ad86a83e02ca589601745e08147f68420dc7546c":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["6e7d674d8857e8df2e386eed8175bd53a1912116"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24227480271877af3b86e4f724fd8e7d8371f700":["4dcc380048b55345ad31956481649ad7d139b80b"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["af2638813028b254a88b418ebeafb541afb49653"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["0667c7011259c2634991cf172c550f2c411df2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d7561aa9163e566b45895f013690403401d5e5c"]},"commit2Childs":{"ddd7debaaa66447dc4b40413599ea8e3830cfdfd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a45bec74b98f6fc05f52770cfb425739e6563960"],"151c786e439f34edb91b77d019109463ab0a6548":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"56c605959f474a9750852dcbac5d132aa776ddf8":["b321ae9c560ebc362e46acf2451184f71b88ccc0"],"af2638813028b254a88b418ebeafb541afb49653":["f03e4bed5023ec3ef93a771b8888cae991cf448d","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"12a024bac1772e3d7a9fd342b27fbf4c037fa7ac":["70d848516a5d0b23d183a2ceb4f4fb8634205956","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"c26f00b574427b55127e869b935845554afde1fa":["ea56d2514dca3494326429a4b7d9afa166b0b205"],"c137d4b396254a19c409132bb476af43a6755b3d":["ddd7debaaa66447dc4b40413599ea8e3830cfdfd"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5d7561aa9163e566b45895f013690403401d5e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"b321ae9c560ebc362e46acf2451184f71b88ccc0":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d82832af39f94dbb58a3130fd216ff1d49435589","6efad415dcdbcca7d440f909743e6e3152eeb6c0","0667c7011259c2634991cf172c550f2c411df2ae"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","6e7d674d8857e8df2e386eed8175bd53a1912116"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["1cb61792cbeba6c44e2530ca5836b96d956adb25"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["5d7561aa9163e566b45895f013690403401d5e5c"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"4e52f407fdd673843031b092b1a4bf7a12f2c281":["151c786e439f34edb91b77d019109463ab0a6548"],"1cb61792cbeba6c44e2530ca5836b96d956adb25":["c137d4b396254a19c409132bb476af43a6755b3d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2901fdf41816ed0ac227f1c2245c963778fb2074":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["af2638813028b254a88b418ebeafb541afb49653","ad86a83e02ca589601745e08147f68420dc7546c"],"a45bec74b98f6fc05f52770cfb425739e6563960":["2901fdf41816ed0ac227f1c2245c963778fb2074"],"6e7d674d8857e8df2e386eed8175bd53a1912116":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"ea56d2514dca3494326429a4b7d9afa166b0b205":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"28288370235ed02234a64753cdbf0c6ec096304a":["4e52f407fdd673843031b092b1a4bf7a12f2c281"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[],"0667c7011259c2634991cf172c550f2c411df2ae":["d82832af39f94dbb58a3130fd216ff1d49435589","6efad415dcdbcca7d440f909743e6e3152eeb6c0","415fc059c6f2340aed1714220b9578c3f66ed09c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4dcc380048b55345ad31956481649ad7d139b80b":["24227480271877af3b86e4f724fd8e7d8371f700"],"ad86a83e02ca589601745e08147f68420dc7546c":["af2638813028b254a88b418ebeafb541afb49653"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["56c605959f474a9750852dcbac5d132aa776ddf8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"415fc059c6f2340aed1714220b9578c3f66ed09c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"24227480271877af3b86e4f724fd8e7d8371f700":["12a024bac1772e3d7a9fd342b27fbf4c037fa7ac","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["e9017cf144952056066919f1ebc7897ff9bd71b1","f03e4bed5023ec3ef93a771b8888cae991cf448d","4dcc380048b55345ad31956481649ad7d139b80b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","d82832af39f94dbb58a3130fd216ff1d49435589","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f03e4bed5023ec3ef93a771b8888cae991cf448d","6efad415dcdbcca7d440f909743e6e3152eeb6c0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}