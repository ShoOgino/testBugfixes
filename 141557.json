{"path":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","commits":[{"id":"c302627a03bb83cf186ac5d7d3239e0c764f4432","date":1238514068,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    assertTrue(r instanceof SegmentReader);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = (IndexReader) r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlySegmentReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = (IndexReader) r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof MultiSegmentReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    assertTrue(r instanceof SegmentReader);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = (IndexReader) r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlySegmentReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = (IndexReader) r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof MultiSegmentReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["c302627a03bb83cf186ac5d7d3239e0c764f4432"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c302627a03bb83cf186ac5d7d3239e0c764f4432":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c302627a03bb83cf186ac5d7d3239e0c764f4432"],"c302627a03bb83cf186ac5d7d3239e0c764f4432":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}