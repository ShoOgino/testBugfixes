{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\"));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\"));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\"));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7c01f80e536140839f2b15359fe04106b0eced","date":1479265585,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","sourceOld":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\"));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\"));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\"));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","sourceOld":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\"));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\"));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\"));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(SORT)){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","sourceOld":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(SORT)){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","sourceOld":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(\"sort\")){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4149dd739240f7ae0f2188920ae11f66e4a200","date":1554468772,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#JDBCStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    StreamExpressionNamedParameter fetchSizeExpression = factory.getNamedOperand(expression, \"fetchSize\");\n\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(SORT)){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    int fetchSize = 5000;\n    if(null != fetchSizeExpression && fetchSizeExpression.getParameter() instanceof StreamExpressionValue){\n      String fetchSizeString = ((StreamExpressionValue)fetchSizeExpression.getParameter()).getValue();\n      fetchSize = Integer.parseInt(fetchSizeString);\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass, fetchSize);\n  }\n\n","sourceOld":"  public JDBCStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter connectionUrlExpression = factory.getNamedOperand(expression, \"connection\");\n    StreamExpressionNamedParameter sqlQueryExpression = factory.getNamedOperand(expression, \"sql\");\n    StreamExpressionNamedParameter definedSortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter driverClassNameExpression = factory.getNamedOperand(expression, \"driver\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\", expression));\n    }\n           \n    // All named params we don't care about will be passed to the driver on connection\n    Properties connectionProperties = new Properties();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"driver\") && !namedParam.getName().equals(\"connection\") && !namedParam.getName().equals(\"sql\") && !namedParam.getName().equals(SORT)){\n        connectionProperties.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // connectionUrl, required\n    String connectionUrl = null;\n    if(null != connectionUrlExpression && connectionUrlExpression.getParameter() instanceof StreamExpressionValue){\n      connectionUrl = ((StreamExpressionValue)connectionUrlExpression.getParameter()).getValue();\n    }\n    if(null == connectionUrl){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - connection not found\", connectionUrlExpression));\n    }\n    \n    // sql, required\n    String sqlQuery = null;\n    if(null != sqlQueryExpression && sqlQueryExpression.getParameter() instanceof StreamExpressionValue){\n      sqlQuery = ((StreamExpressionValue)sqlQueryExpression.getParameter()).getValue();\n    }\n    if(null == sqlQuery){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sql not found\", sqlQueryExpression));\n    }\n    \n    // definedSort, required\n    StreamComparator definedSort = null;\n    if(null != definedSortExpression && definedSortExpression.getParameter() instanceof StreamExpressionValue){\n      definedSort = factory.constructComparator(((StreamExpressionValue)definedSortExpression.getParameter()).getValue(), FieldComparator.class);\n    }\n    if(null == definedSort){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - sort not found\", definedSortExpression));\n    }\n    \n    // driverClass, optional\n    String driverClass = null;\n    if(null != driverClassNameExpression && driverClassNameExpression.getParameter() instanceof StreamExpressionValue){\n      driverClass = ((StreamExpressionValue)driverClassNameExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(connectionUrl, sqlQuery, definedSort, connectionProperties, driverClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea4149dd739240f7ae0f2188920ae11f66e4a200":["01624b85de12fb02335810bdf325124e59040772"],"bb7c01f80e536140839f2b15359fe04106b0eced":["c533b201163bd7b15aa8881f922f9289a7668187"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c533b201163bd7b15aa8881f922f9289a7668187","bb7c01f80e536140839f2b15359fe04106b0eced"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["bb7c01f80e536140839f2b15359fe04106b0eced"],"01624b85de12fb02335810bdf325124e59040772":["bb7c01f80e536140839f2b15359fe04106b0eced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4149dd739240f7ae0f2188920ae11f66e4a200"]},"commit2Childs":{"ea4149dd739240f7ae0f2188920ae11f66e4a200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb7c01f80e536140839f2b15359fe04106b0eced":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"c533b201163bd7b15aa8881f922f9289a7668187":["bb7c01f80e536140839f2b15359fe04106b0eced","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["ea4149dd739240f7ae0f2188920ae11f66e4a200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}