{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfos infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.info(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfos infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.info(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfos infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.info(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(List<SegmentInfo> infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.get(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfos infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.info(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(List<SegmentInfo> infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.get(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfos infos) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      buffer.append(segString(infos.info(i)));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  private synchronized String segString(SegmentInfos infos) {\n    StringBuilder buffer = new StringBuilder();\n    final int count = infos.size();\n    for(int i = 0; i < count; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      final SegmentInfo info = infos.info(i);\n      buffer.append(info.toString(directory, 0));\n      if (info.dir != directory)\n        buffer.append(\"**\");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3","45669a651c970812a680841b97a77cce06af559f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}