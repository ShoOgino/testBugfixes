{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],byte[][],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, byte[][] upper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0) < 0) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0) > 0) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],byte[][],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, byte[][] upper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0) < 0) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0) > 0) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],byte[][],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, byte[][] upper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, lower[dim], 0) < 0) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (StringHelper.compare(bytesPerDim, value[dim], 0, upper[dim], 0) > 0) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bfdc932307442b651432f92845942f9041ace8":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["12bfdc932307442b651432f92845942f9041ace8","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["12bfdc932307442b651432f92845942f9041ace8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"12bfdc932307442b651432f92845942f9041ace8":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}