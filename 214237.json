{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() throws IOException {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() throws IOException {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() throws IOException {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() throws IOException {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() throws IOException {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() throws IOException {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() throws IOException {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() throws IOException {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }  \n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }  \n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n              \n              \n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.sortedTerms.length;\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.sortedTerms.length > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return stride == 3;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public Comparator<BytesRef> getComparator() {\n              return BytesRef.getUTF8SortedAsUnicodeComparator();\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db","date":1381416174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return true;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator(TermsEnum reuse) {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return false;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        int i = Arrays.binarySearch(sortedFields, field, termComparator);\n        if (i < 0) {\n          return null;\n        } else {\n          final Info info = getInfo(i);\n          info.sortTerms();\n\n          return new Terms() {\n            @Override \n            public TermsEnum iterator(TermsEnum reuse) {\n              return new MemoryTermsEnum(info);\n            }\n\n            @Override\n            public long size() {\n              return info.terms.size();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              return info.getSumTotalTermFreq();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              // each term has df=1\n              return info.terms.size();\n            }\n\n            @Override\n            public int getDocCount() {\n              return info.terms.size() > 0 ? 1 : 0;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return true;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return storeOffsets;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return true;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          };\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator(TermsEnum reuse) {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator(TermsEnum reuse) {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return false;\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator(TermsEnum reuse) {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null) {\n          return null;\n        }\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null)\n          return null;\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","date":1469455140,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null || info.numTokens <= 0) {\n          return null;\n        }\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null) {\n          return null;\n        }\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","bugFix":["253a79e1af11467dd01315b1919025d288aa0ccb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryFields#terms(String).mjava","sourceNew":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null || info.numTokens <= 0) {\n          return null;\n        }\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public Terms terms(final String field) {\n        final Info info = fields.get(field);\n        if (info == null) {\n          return null;\n        }\n\n        return new Terms() {\n          @Override\n          public TermsEnum iterator() {\n            return new MemoryTermsEnum(info);\n          }\n\n          @Override\n          public long size() {\n            return info.terms.size();\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return info.sumTotalTermFreq;\n          }\n\n          @Override\n          public long getSumDocFreq() {\n            // each term has df=1\n            return info.terms.size();\n          }\n\n          @Override\n          public int getDocCount() {\n            return size() > 0 ? 1 : 0;\n          }\n\n          @Override\n          public boolean hasFreqs() {\n            return true;\n          }\n\n          @Override\n          public boolean hasOffsets() {\n            return storeOffsets;\n          }\n\n          @Override\n          public boolean hasPositions() {\n            return true;\n          }\n\n          @Override\n          public boolean hasPayloads() {\n            return storePayloads;\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115":["253a79e1af11467dd01315b1919025d288aa0ccb"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","0935c850ea562932997b72c69d93e345f21d7f45"],"253a79e1af11467dd01315b1919025d288aa0ccb":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["253a79e1af11467dd01315b1919025d288aa0ccb"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"253a79e1af11467dd01315b1919025d288aa0ccb":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","30fd30bfbfa6b9e036bcd99c8339712e965d4a63","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}