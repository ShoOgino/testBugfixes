{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","commits":[{"id":"c2f15ce56e25538825682a41ccb854c1d82e0e95","date":1378972163,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IResource[] getAll(final String resource) {\n    final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n    CarrotClusteringEngine.log.debug(\"Looking for Solr resource: \" + resourceName);\n\n    InputStream resourceStream = null;\n    final byte [] asBytes;\n    try {\n      resourceStream = resourceLoader.openResource(resourceName);\n      asBytes = IOUtils.toByteArray(resourceStream);\n    } catch (IOException e) {\n      CarrotClusteringEngine.log.debug(\"Resource not found in Solr's config: \" + resourceName\n          + \". Using the default \" + resource + \" from Carrot JAR.\");          \n      return new IResource[] {};\n    } finally {\n      if (resourceStream != null) {\n        try {\n          resourceStream.close();\n        } catch (IOException e) {\n          // ignore.\n        }\n      }\n    }\n\n    CarrotClusteringEngine.log.info(\"Loaded Solr resource: \" + resourceName);\n\n    final IResource foundResource = new IResource() {\n      @Override\n      public InputStream open() {\n        return new ByteArrayInputStream(asBytes);\n      }\n\n      @Override\n      public int hashCode() {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.hashCode();\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.equals(obj);\n      }\n\n      @Override\n      public String toString() {\n        return \"Solr config resource: \" + resourceName;\n      }\n    };\n\n    return new IResource[] { foundResource };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","sourceNew":"  @Override\n  public IResource[] getAll(final String resource) {\n    final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n    log.debug(\"Looking for Solr resource: \" + resourceName);\n\n    InputStream resourceStream = null;\n    final byte [] asBytes;\n    try {\n      resourceStream = resourceLoader.openResource(resourceName);\n      asBytes = IOUtils.toByteArray(resourceStream);\n    } catch (IOException e) {\n      log.debug(\"Resource not found in Solr's config: \" + resourceName\n          + \". Using the default \" + resource + \" from Carrot JAR.\");          \n      return new IResource[] {};\n    } finally {\n      if (resourceStream != null) {\n        try {\n          resourceStream.close();\n        } catch (IOException e) {\n          // ignore.\n        }\n      }\n    }\n\n    log.info(\"Loaded Solr resource: \" + resourceName);\n\n    final IResource foundResource = new IResource() {\n      @Override\n      public InputStream open() {\n        return new ByteArrayInputStream(asBytes);\n      }\n\n      @Override\n      public int hashCode() {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.hashCode();\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.equals(obj);\n      }\n\n      @Override\n      public String toString() {\n        return \"Solr config resource: \" + resourceName;\n      }\n    };\n\n    return new IResource[] { foundResource };\n  }\n\n","sourceOld":"  @Override\n  public IResource[] getAll(final String resource) {\n    final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n    CarrotClusteringEngine.log.debug(\"Looking for Solr resource: \" + resourceName);\n\n    InputStream resourceStream = null;\n    final byte [] asBytes;\n    try {\n      resourceStream = resourceLoader.openResource(resourceName);\n      asBytes = IOUtils.toByteArray(resourceStream);\n    } catch (IOException e) {\n      CarrotClusteringEngine.log.debug(\"Resource not found in Solr's config: \" + resourceName\n          + \". Using the default \" + resource + \" from Carrot JAR.\");          \n      return new IResource[] {};\n    } finally {\n      if (resourceStream != null) {\n        try {\n          resourceStream.close();\n        } catch (IOException e) {\n          // ignore.\n        }\n      }\n    }\n\n    CarrotClusteringEngine.log.info(\"Loaded Solr resource: \" + resourceName);\n\n    final IResource foundResource = new IResource() {\n      @Override\n      public InputStream open() {\n        return new ByteArrayInputStream(asBytes);\n      }\n\n      @Override\n      public int hashCode() {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.hashCode();\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.equals(obj);\n      }\n\n      @Override\n      public String toString() {\n        return \"Solr config resource: \" + resourceName;\n      }\n    };\n\n    return new IResource[] { foundResource };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrResourceLocator#getAll(String).mjava","sourceNew":"  @Override\n  public IResource[] getAll(final String resource) {\n    final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n    log.debug(\"Looking for Solr resource: {}\", resourceName);\n\n    InputStream resourceStream = null;\n    final byte [] asBytes;\n    try {\n      resourceStream = resourceLoader.openResource(resourceName);\n      asBytes = IOUtils.toByteArray(resourceStream);\n    } catch (IOException e) {\n      log.debug(\"Resource not found in Solr's config: {}. Using the default {} from Carrot JAR.\"\n          , resourceName,  resource);\n      return new IResource[] {};\n    } finally {\n      if (resourceStream != null) {\n        try {\n          resourceStream.close();\n        } catch (IOException e) {\n          // ignore.\n        }\n      }\n    }\n\n    log.info(\"Loaded Solr resource: {}\", resourceName);\n\n    final IResource foundResource = new IResource() {\n      @Override\n      public InputStream open() {\n        return new ByteArrayInputStream(asBytes);\n      }\n\n      @Override\n      public int hashCode() {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.hashCode();\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.equals(obj);\n      }\n\n      @Override\n      public String toString() {\n        return \"Solr config resource: \" + resourceName;\n      }\n    };\n\n    return new IResource[] { foundResource };\n  }\n\n","sourceOld":"  @Override\n  public IResource[] getAll(final String resource) {\n    final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n    log.debug(\"Looking for Solr resource: \" + resourceName);\n\n    InputStream resourceStream = null;\n    final byte [] asBytes;\n    try {\n      resourceStream = resourceLoader.openResource(resourceName);\n      asBytes = IOUtils.toByteArray(resourceStream);\n    } catch (IOException e) {\n      log.debug(\"Resource not found in Solr's config: \" + resourceName\n          + \". Using the default \" + resource + \" from Carrot JAR.\");          \n      return new IResource[] {};\n    } finally {\n      if (resourceStream != null) {\n        try {\n          resourceStream.close();\n        } catch (IOException e) {\n          // ignore.\n        }\n      }\n    }\n\n    log.info(\"Loaded Solr resource: \" + resourceName);\n\n    final IResource foundResource = new IResource() {\n      @Override\n      public InputStream open() {\n        return new ByteArrayInputStream(asBytes);\n      }\n\n      @Override\n      public int hashCode() {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.hashCode();\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n        // so simply rely on instance equivalence.\n        return super.equals(obj);\n      }\n\n      @Override\n      public String toString() {\n        return \"Solr config resource: \" + resourceName;\n      }\n    };\n\n    return new IResource[] { foundResource };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2f15ce56e25538825682a41ccb854c1d82e0e95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["c2f15ce56e25538825682a41ccb854c1d82e0e95"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"c2f15ce56e25538825682a41ccb854c1d82e0e95":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2f15ce56e25538825682a41ccb854c1d82e0e95"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}