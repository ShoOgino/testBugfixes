{"path":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setContext(Object).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setContext(Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the current context. The context is used by modules such as the\n     * AuthorizationModule and the CookieModule which keep lists of info that is\n     * normally shared between all instances of HTTPConnection. This is usually\n     * the desired behaviour. However, in some cases one would like to simulate\n     * multiple independent clients within the same application and hence the\n     * sharing of such info should be restricted. This is where the context\n     * comes in. Modules will only share their info between requests using the\n     * same context (i.e. they keep multiple lists, one for each context). <P>\n     *\n     * The context may be any object. Contexts are considered equal if <code>equals()</code>\n     * returns true. Examples of useful context objects are threads (e.g. if you\n     * are running multiple clients, one per thread) and sockets (e.g. if you\n     * are implementing a gateway). <P>\n     *\n     * When a new HTTPConnection is created it is initialized with a default\n     * context which is the same for all instances. This method must be invoked\n     * immediately after a new HTTPConnection is created and before any request\n     * method is invoked. Furthermore, this method may only be called once (i.e.\n     * the context is \"sticky\").\n     *\n     * @param context  the new context; must be non-null\n     */\n    public void setContext(Object context)\n    {\n        if (context == null)\n        {\n            throw new IllegalArgumentException(\"Context must be non-null\");\n        }\n        if (Context != null)\n        {\n            throw new IllegalStateException(\"Context already set\");\n        }\n\n        Context = context;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setContext(Object).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sets the current context. The context is used by modules such as the\n     * AuthorizationModule and the CookieModule which keep lists of info that is\n     * normally shared between all instances of HTTPConnection. This is usually\n     * the desired behaviour. However, in some cases one would like to simulate\n     * multiple independent clients within the same application and hence the\n     * sharing of such info should be restricted. This is where the context\n     * comes in. Modules will only share their info between requests using the\n     * same context (i.e. they keep multiple lists, one for each context). <P>\n     *\n     * The context may be any object. Contexts are considered equal if <code>equals()</code>\n     * returns true. Examples of useful context objects are threads (e.g. if you\n     * are running multiple clients, one per thread) and sockets (e.g. if you\n     * are implementing a gateway). <P>\n     *\n     * When a new HTTPConnection is created it is initialized with a default\n     * context which is the same for all instances. This method must be invoked\n     * immediately after a new HTTPConnection is created and before any request\n     * method is invoked. Furthermore, this method may only be called once (i.e.\n     * the context is \"sticky\").\n     *\n     * @param context  the new context; must be non-null\n     */\n    public void setContext(Object context)\n    {\n        if (context == null)\n        {\n            throw new IllegalArgumentException(\"Context must be non-null\");\n        }\n        if (Context != null)\n        {\n            throw new IllegalStateException(\"Context already set\");\n        }\n\n        Context = context;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}