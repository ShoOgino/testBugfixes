{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e40c7b0baa9f015b690f60bacb592b64264ba3d","date":1381610202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.shutdown(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.shutdown(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.shutdown(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      writer.shutdown(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      DocsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9f7829b01acc3b2d4cad883060a0fbf544eaae1","date":1521396858,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, false, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      boolean done = false;\n      while (!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n\n        // [DW] this is unreachable once join() returns a thread cannot be alive.\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, false, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      boolean done = false;\n      while (!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n\n        // [DW] this is unreachable once join() returns a thread cannot be alive.\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now close\");\n      }\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = DirectoryReader.open(dir);\n      PostingsEnum tdocs = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"aaa\"),\n          null,\n          0);\n      int count = 0;\n      while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e40c7b0baa9f015b690f60bacb592b64264ba3d":["02331260bb246364779cb6f04919ca47900d01bb"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5e40c7b0baa9f015b690f60bacb592b64264ba3d"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["0f4464508ee83288c8c4585b533f9faaa93aa314","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"02331260bb246364779cb6f04919ca47900d01bb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"5e40c7b0baa9f015b690f60bacb592b64264ba3d":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["203e3fcf513c02ee2c07015f2ce277e26dc60907","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["5e40c7b0baa9f015b690f60bacb592b64264ba3d","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}