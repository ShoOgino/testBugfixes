{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","commits":[{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  private void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray, Term[] queryTerms)\n      throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void collectTermContext(IndexReader reader,\n                                 List<LeafReaderContext> leaves, TermContext[] contextArray,\n                                 Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  private void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray, Term[] queryTerms)\n      throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void collectTermContext(IndexReader reader,\n                                 List<LeafReaderContext> leaves, TermContext[] contextArray,\n                                 Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb88a28fb92adce0607c5b28f8f1cce9e3171639","date":1492689807,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray, Term[] queryTerms)\n      throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray, Term[] queryTerms)\n      throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermStates(IndexReaderContext,TermStates[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermStates(IndexReaderContext topReaderContext, TermStates[] contextArray,\n                                        Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermStates termStates = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            termStates = new TermStates(topReaderContext);\n            contextArray[i] = termStates;\n          }\n          termStates.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":null,"sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","a6e9f769521480a623f897c0d59089b919fa4239"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4302dfeb5d01c940f69c48bec27f03ad8828668","cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a6e9f769521480a623f897c0d59089b919fa4239":["28288370235ed02234a64753cdbf0c6ec096304a"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cb88a28fb92adce0607c5b28f8f1cce9e3171639","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["e9017cf144952056066919f1ebc7897ff9bd71b1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","a4302dfeb5d01c940f69c48bec27f03ad8828668"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}