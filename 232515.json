{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    AtomicReader reader = readerContext.reader();\n    final NumericDocValues minX = DocValues.getNumeric(reader, strategy.field_minX);\n    final NumericDocValues minY = DocValues.getNumeric(reader, strategy.field_minY);\n    final NumericDocValues maxX = DocValues.getNumeric(reader, strategy.field_maxX);\n    final NumericDocValues maxY = DocValues.getNumeric(reader, strategy.field_maxY);\n\n    final Bits validBits = DocValues.getDocsWithField(reader, strategy.field_minX);//could have chosen any field\n    //reused\n    final Rectangle rect = strategy.getSpatialContext().makeRectangle(0,0,0,0);\n\n    return new FunctionValues() {\n      @Override\n      public Object objectVal(int doc) {\n        if (!validBits.get(doc)) {\n          return null;\n        } else {\n          rect.reset(\n              Double.longBitsToDouble(minX.get(doc)), Double.longBitsToDouble(maxX.get(doc)),\n              Double.longBitsToDouble(minY.get(doc)), Double.longBitsToDouble(maxY.get(doc)));\n          return rect;\n        }\n      }\n\n      @Override\n      public String strVal(int doc) {//TODO support WKT output once Spatial4j does\n        Object v = objectVal(doc);\n        return v == null ? null : v.toString();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return validBits.get(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        return new Explanation(Float.NaN, toString(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    AtomicReader reader = readerContext.reader();\n    final NumericDocValues minX = DocValues.getNumeric(reader, strategy.field_minX);\n    final NumericDocValues minY = DocValues.getNumeric(reader, strategy.field_minY);\n    final NumericDocValues maxX = DocValues.getNumeric(reader, strategy.field_maxX);\n    final NumericDocValues maxY = DocValues.getNumeric(reader, strategy.field_maxY);\n\n    final Bits validBits = DocValues.getDocsWithField(reader, strategy.field_minX);//could have chosen any field\n    //reused\n    final Rectangle rect = strategy.getSpatialContext().makeRectangle(0,0,0,0);\n\n    return new FunctionValues() {\n      @Override\n      public Object objectVal(int doc) {\n        if (!validBits.get(doc)) {\n          return null;\n        } else {\n          rect.reset(\n              Double.longBitsToDouble(minX.get(doc)), Double.longBitsToDouble(maxX.get(doc)),\n              Double.longBitsToDouble(minY.get(doc)), Double.longBitsToDouble(maxY.get(doc)));\n          return rect;\n        }\n      }\n\n      @Override\n      public String strVal(int doc) {//TODO support WKT output once Spatial4j does\n        Object v = objectVal(doc);\n        return v == null ? null : v.toString();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return validBits.get(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        return new Explanation(Float.NaN, toString(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}