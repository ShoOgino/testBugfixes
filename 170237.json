{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Node[#],DeleteSlice).mjava","commits":[{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Node[#],DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Node<?> deleteNode, DeleteSlice slice) {\n    long seqNo = add(deleteNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = deleteNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"110125c995236a7f61057dd04b039ed2d267f3a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["110125c995236a7f61057dd04b039ed2d267f3a1"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}