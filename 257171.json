{"path":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56584ae6fa4912e4dd6e818a7da3799cf807234f","date":1339586560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#reset(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.reset(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f7a67b528a360bdc01ea05af57e6459fe42ac0","date":1346299172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream that is allowed to be re-use from the previous time\n   * that the same thread called this method.  Callers that do not need to use\n   * more than one TokenStream at the same time from this analyzer should use\n   * this method for better performance.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * </p>\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38061899d760e06a12fe186bc1f09ca9ff0e64a6","date":1376491296,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n    components.setReader(r);\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n    components.setReader(r);\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>reader</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * <b>NOTE:</b> If your data is available as a {@code String}, use\n   * {@link #tokenStream(String, String)} which reuses a {@code StringReader}-like\n   * instance internally.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs.\n   * @see #tokenStream(String, String)\n   */\n  public final TokenStream tokenStream(final String fieldName,\n                                       final Reader reader) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    final Reader r = initReader(fieldName, reader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n    components.setReader(r);\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["27f7a67b528a360bdc01ea05af57e6459fe42ac0","c83d6c4335f31cae14f625a222bc842f20073dcd"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["38061899d760e06a12fe186bc1f09ca9ff0e64a6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","38061899d760e06a12fe186bc1f09ca9ff0e64a6"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"38061899d760e06a12fe186bc1f09ca9ff0e64a6":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e859719dc778fb66d3d21e7be08cd408fc2bde98"]},"commit2Childs":{"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","05a14b2611ead08655a2b2bdc61632eb31316e57","c83d6c4335f31cae14f625a222bc842f20073dcd"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["27f7a67b528a360bdc01ea05af57e6459fe42ac0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["fc706b1e03a539d44d99998108feb684bb44cbb2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38061899d760e06a12fe186bc1f09ca9ff0e64a6":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","38061899d760e06a12fe186bc1f09ca9ff0e64a6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}