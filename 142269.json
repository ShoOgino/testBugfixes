{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","commits":[{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4987206dabc9f3576bb1df72e987094a7dad6e4f","date":1527510516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46","a3b4a63b6b0155323dde6b827e0dc22a43580753","31741cf1390044e38a2ec3127cf302ba841bfd75"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        hardLiveDocs = liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        hardLiveDocs = liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,boolean,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, boolean openedFromWriter, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, openedFromWriter, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        hardLiveDocs = liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        hardLiveDocs = liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        hardLiveDocs = liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        hardLiveDocs = liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,boolean,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        hardLiveDocs = liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        hardLiveDocs = liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  SegmentReader(SegmentCommitInfo si, int createdVersionMajor, boolean openedFromWriter, IOContext context) throws IOException {\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, openedFromWriter, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        hardLiveDocs = liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        hardLiveDocs = liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bec68e7c41fed133827595747d853cad504e481e":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["4987206dabc9f3576bb1df72e987094a7dad6e4f"],"4987206dabc9f3576bb1df72e987094a7dad6e4f":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["bec68e7c41fed133827595747d853cad504e481e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"578a4d73d90ecd838846cc32bf1098aaa262b524":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"4987206dabc9f3576bb1df72e987094a7dad6e4f":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["4987206dabc9f3576bb1df72e987094a7dad6e4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}