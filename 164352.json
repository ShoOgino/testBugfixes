{"path":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(Term).mjava","sourceNew":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","sourceNew":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Terms terms = terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":["b6a0e3c1c21aac8ecf75706605133012833585c7","955c32f886db6f6356c9fcdea6b1f1cb4effda24","e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#docFreq(Term).mjava","sourceNew":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Terms terms = terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator();\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Terms terms = terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}