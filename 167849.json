{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","commits":[{"id":"52f3940604eb2d2795432a16e5a79f7efd5b5888","date":1379518151,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    DefaultSimilarity expected = new DefaultSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    state.setBoost(3);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    ClassicSimilarity expected = new ClassicSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    state.setBoost(3);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    DefaultSimilarity expected = new DefaultSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    state.setBoost(3);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    ClassicSimilarity expected = new ClassicSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    ClassicSimilarity expected = new ClassicSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    state.setBoost(3);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    BM25Similarity expected = new BM25Similarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    ClassicSimilarity expected = new ClassicSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    BM25Similarity expected = new BM25Similarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    ClassicSimilarity expected = new ClassicSimilarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(\"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testDiscountOverlapsBoost().mjava","sourceNew":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    BM25Similarity expected = new BM25Similarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", IndexOptions.DOCS_AND_FREQS);\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","sourceOld":"  // LUCENE-5221\n  public void testDiscountOverlapsBoost() throws IOException {\n    BM25Similarity expected = new BM25Similarity();\n    SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());\n    expected.setDiscountOverlaps(false);\n    actual.setDiscountOverlaps(false);\n    FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\");\n    state.setLength(5);\n    state.setNumOverlap(2);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n    expected.setDiscountOverlaps(true);\n    actual.setDiscountOverlaps(true);\n    assertEquals(expected.computeNorm(state), actual.computeNorm(state));\n  }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"52f3940604eb2d2795432a16e5a79f7efd5b5888":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a4bb2b5569a925d9d26743041864893512a7958":["615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["52f3940604eb2d2795432a16e5a79f7efd5b5888"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a4bb2b5569a925d9d26743041864893512a7958"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","5a4bb2b5569a925d9d26743041864893512a7958"],"52f3940604eb2d2795432a16e5a79f7efd5b5888":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52f3940604eb2d2795432a16e5a79f7efd5b5888"],"5a4bb2b5569a925d9d26743041864893512a7958":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}