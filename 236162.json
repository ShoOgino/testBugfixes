{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f9462128d6aef6f10f721e3635944ede9327665c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","sourceOld":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","sourceOld":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9462128d6aef6f10f721e3635944ede9327665c","date":1397750801,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    Throwable th = null;\n    try {\n      return call.call();\n    } catch (Throwable t) {\n      th = t;\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          EntityUtils.consumeQuietly(response.getEntity());\n        }\n      }\n    }\n    assert th != null; // extra safety - if we get here, it means the callable failed\n    IOUtils.reThrow(th);\n    return null; // silly, if we're here, IOUtils.reThrow always throws an exception \n  }\n\n","sourceOld":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    IOException error = null;\n    try {\n      return call.call();\n    } catch (IOException e) {\n      error = e;\n    } catch (Exception e) {\n      error = new IOException(e);\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          try {\n            EntityUtils.consume(response.getEntity());\n          } catch (Exception e) {\n            // ignoring on purpose\n          }\n        }\n      }\n    }\n    throw error; // should not get here\n  }\n\n","bugFix":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    Throwable th = null;\n    try {\n      return call.call();\n    } catch (Throwable t) {\n      th = t;\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          EntityUtils.consumeQuietly(response.getEntity());\n        }\n      }\n    }\n    throw IOUtils.rethrowAlways(th); \n  }\n\n","sourceOld":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    Throwable th = null;\n    try {\n      return call.call();\n    } catch (Throwable t) {\n      th = t;\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          EntityUtils.consumeQuietly(response.getEntity());\n        }\n      }\n    }\n    assert th != null; // extra safety - if we get here, it means the callable failed\n    IOUtils.reThrow(th);\n    return null; // silly, if we're here, IOUtils.reThrow always throws an exception \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#[T]_doAction(HttpResponse,boolean,Callable[T]).mjava","sourceNew":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    Throwable th = null;\n    try {\n      return call.call();\n    } catch (Throwable t) {\n      th = t;\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          EntityUtils.consumeQuietly(response.getEntity());\n        }\n      }\n    }\n    throw IOUtils.rethrowAlways(th); \n  }\n\n","sourceOld":"  /**\n   * Do a specific action and validate after the action that the status is still OK, \n   * and if not, attempt to extract the actual server side exception. Optionally\n   * release the response at exit, depending on <code>consume</code> parameter.\n   */\n  protected <T> T doAction(HttpResponse response, boolean consume, Callable<T> call) throws IOException {\n    Throwable th = null;\n    try {\n      return call.call();\n    } catch (Throwable t) {\n      th = t;\n    } finally {\n      try {\n        verifyStatus(response);\n      } finally {\n        if (consume) {\n          EntityUtils.consumeQuietly(response.getEntity());\n        }\n      }\n    }\n    assert th != null; // extra safety - if we get here, it means the callable failed\n    IOUtils.reThrow(th);\n    return null; // silly, if we're here, IOUtils.reThrow always throws an exception \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["f9462128d6aef6f10f721e3635944ede9327665c","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["f9462128d6aef6f10f721e3635944ede9327665c"],"f9462128d6aef6f10f721e3635944ede9327665c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9462128d6aef6f10f721e3635944ede9327665c":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f9462128d6aef6f10f721e3635944ede9327665c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}