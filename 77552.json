{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.getClauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f, \n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f, \n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.getClauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f, \n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f, \n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, true, 1);\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates context = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, true, 1);\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, true, 1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates context = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, true, 1);\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new SimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term);\n          SimWeight w = weight.similarity.computeWeight(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = weight.similarity.simScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates context = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, \"field\", true);\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates context = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, true, 1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,LeafReader,IndexSearcher).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates ts = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, ts.docFreq(), ts.totalTermFreq()));\n          sims[(int)ord] = new LeafSimScorer(w, reader, \"field\", true);\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, LeafReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new LeafSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.clauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermStates context = TermStates.build(reader.getContext(), term, true);\n          SimScorer w = weight.similarity.scorer(1f,\n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          sims[(int)ord] = new LeafSimScorer(w, reader, \"field\", true);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b94236357aaa22b76c10629851fe4e376e0cea82":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19238c4860c45945f1b1e39032e056ce9e266152":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["19238c4860c45945f1b1e39032e056ce9e266152"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}