{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","commits":[{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema-tiny.xml\");\n      d1.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema-tiny.xml\");\n      d2.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema-tiny.xml\");\n      d3.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema-tiny.xml\");\n      d4.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96a802acd838449b6936d34e464baeeb82f9ef54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27affa73e101ea5cb023d8ea037d86c352e6a563","date":1366746292,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","sourceNew":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema-tiny.xml\");\n      d1.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema-tiny.xml\");\n      d2.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema-tiny.xml\");\n      d3.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema-tiny.xml\");\n      d4.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema-tiny.xml\");\n      d1.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema-tiny.xml\");\n      d2.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema-tiny.xml\");\n      d3.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema-tiny.xml\");\n      d4.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96a802acd838449b6936d34e464baeeb82f9ef54","date":1371519049,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","sourceNew":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema.xml\");\n      d1.setConfigName(\"solrconfig.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema.xml\");\n      d2.setConfigName(\"solrconfig.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema.xml\");\n      d3.setConfigName(\"solrconfig.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema.xml\");\n      d4.setConfigName(\"solrconfig.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema-tiny.xml\");\n      d1.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema-tiny.xml\");\n      d2.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema-tiny.xml\");\n      d3.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema-tiny.xml\");\n      d4.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","sourceNew":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      final CoreDescriptor cd1 = buildCoreDescriptor(cc, \"core1\", \"./core1\")\n          .isTransient(true).loadOnStartup(true).build();\n      final CoreDescriptor cd2 = buildCoreDescriptor(cc, \"core2\", \"./core2\")\n          .isTransient(true).loadOnStartup(false).build();\n      final CoreDescriptor cd3 = buildCoreDescriptor(cc, \"core3\", \"./core3\")\n          .isTransient(false).loadOnStartup(true).build();\n      final CoreDescriptor cd4 = buildCoreDescriptor(cc, \"core4\", \"./core4\")\n          .isTransient(false).loadOnStartup(false).build();\n\n\n      SolrCore core1 = cc.create(cd1);\n      SolrCore core2 = cc.create(cd2);\n      SolrCore core3 = cc.create(cd3);\n      SolrCore core4 = cc.create(cd4);\n\n      SolrXMLCoresLocator.NonPersistingLocator locator =\n          (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n      TestHarness.validateXPath(locator.xml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\",\n          \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n      TestHarness.validateXPath(locator.xml, \"3=count(/solr/cores/core)\");\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema.xml\");\n      d1.setConfigName(\"solrconfig.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema.xml\");\n      d2.setConfigName(\"solrconfig.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema.xml\");\n      d3.setConfigName(\"solrconfig.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema.xml\");\n      d4.setConfigName(\"solrconfig.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","sourceNew":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      final CoreDescriptor cd1 = buildCoreDescriptor(cc, \"core1\", \"./core1\")\n          .isTransient(true).loadOnStartup(true).build();\n      final CoreDescriptor cd2 = buildCoreDescriptor(cc, \"core2\", \"./core2\")\n          .isTransient(true).loadOnStartup(false).build();\n      final CoreDescriptor cd3 = buildCoreDescriptor(cc, \"core3\", \"./core3\")\n          .isTransient(false).loadOnStartup(true).build();\n      final CoreDescriptor cd4 = buildCoreDescriptor(cc, \"core4\", \"./core4\")\n          .isTransient(false).loadOnStartup(false).build();\n\n\n      SolrCore core1 = cc.create(cd1);\n      SolrCore core2 = cc.create(cd2);\n      SolrCore core3 = cc.create(cd3);\n      SolrCore core4 = cc.create(cd4);\n\n      SolrXMLCoresLocator.NonPersistingLocator locator =\n          (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n      TestHarness.validateXPath(locator.xml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\",\n          \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n      TestHarness.validateXPath(locator.xml, \"3=count(/solr/cores/core)\");\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      cc.setPersistent(true);\n      CoreDescriptor d1 = new CoreDescriptor(cc, \"core1\", \"./core1\");\n      d1.setTransient(true);\n      d1.setLoadOnStartup(true);\n      d1.setSchemaName(\"schema-tiny.xml\");\n      d1.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core1 = cc.create(d1);\n\n      CoreDescriptor d2 = new CoreDescriptor(cc, \"core2\", \"./core2\");\n      d2.setTransient(true);\n      d2.setLoadOnStartup(false);\n      d2.setSchemaName(\"schema-tiny.xml\");\n      d2.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core2 = cc.create(d2);\n\n      CoreDescriptor d3 = new CoreDescriptor(cc, \"core3\", \"./core3\");\n      d3.setTransient(false);\n      d3.setLoadOnStartup(true);\n      d3.setSchemaName(\"schema-tiny.xml\");\n      d3.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core3 = cc.create(d3);\n\n      CoreDescriptor d4 = new CoreDescriptor(cc, \"core4\", \"./core4\");\n      d4.setTransient(false);\n      d4.setLoadOnStartup(false);\n      d4.setSchemaName(\"schema-tiny.xml\");\n      d4.setConfigName(\"solrconfig-minimal.xml\");\n      SolrCore core4 = cc.create(d4);\n\n      final File oneXml = new File(solrHomeDirectory, \"lazy1.solr.xml\");\n      cc.persistFile(oneXml);\n\n      assertXmlFile(oneXml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\");\n      assertXmlFile(oneXml, \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n\n      final File twoXml = new File(solrHomeDirectory, \"lazy2.solr.xml\");\n      cc.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"3=count(/solr/cores/core)\");\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testPersistence().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPersistence() throws Exception {\n    final CoreContainer cc = init();\n    try {\n      copyMinConf(new File(solrHomeDirectory, \"core1\"));\n      copyMinConf(new File(solrHomeDirectory, \"core2\"));\n      copyMinConf(new File(solrHomeDirectory, \"core3\"));\n      copyMinConf(new File(solrHomeDirectory, \"core4\"));\n\n      final CoreDescriptor cd1 = buildCoreDescriptor(cc, \"core1\", \"./core1\")\n          .isTransient(true).loadOnStartup(true).build();\n      final CoreDescriptor cd2 = buildCoreDescriptor(cc, \"core2\", \"./core2\")\n          .isTransient(true).loadOnStartup(false).build();\n      final CoreDescriptor cd3 = buildCoreDescriptor(cc, \"core3\", \"./core3\")\n          .isTransient(false).loadOnStartup(true).build();\n      final CoreDescriptor cd4 = buildCoreDescriptor(cc, \"core4\", \"./core4\")\n          .isTransient(false).loadOnStartup(false).build();\n\n\n      SolrCore core1 = cc.create(cd1);\n      SolrCore core2 = cc.create(cd2);\n      SolrCore core3 = cc.create(cd3);\n      SolrCore core4 = cc.create(cd4);\n\n      SolrXMLCoresLocator.NonPersistingLocator locator =\n          (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n      TestHarness.validateXPath(locator.xml,\n          \"/solr/cores/core[@name='collection1']\",\n          \"/solr/cores/core[@name='collectionLazy2']\",\n          \"/solr/cores/core[@name='collectionLazy3']\",\n          \"/solr/cores/core[@name='collectionLazy4']\",\n          \"/solr/cores/core[@name='collectionLazy5']\",\n          \"/solr/cores/core[@name='collectionLazy6']\",\n          \"/solr/cores/core[@name='collectionLazy7']\",\n          \"/solr/cores/core[@name='collectionLazy8']\",\n          \"/solr/cores/core[@name='collectionLazy9']\",\n          \"/solr/cores/core[@name='core1']\",\n          \"/solr/cores/core[@name='core2']\",\n          \"/solr/cores/core[@name='core3']\",\n          \"/solr/cores/core[@name='core4']\",\n          \"13=count(/solr/cores/core)\");\n\n      removeOne(cc, \"collectionLazy2\");\n      removeOne(cc, \"collectionLazy3\");\n      removeOne(cc, \"collectionLazy4\");\n      removeOne(cc, \"collectionLazy5\");\n      removeOne(cc, \"collectionLazy6\");\n      removeOne(cc, \"collectionLazy7\");\n      removeOne(cc, \"core1\");\n      removeOne(cc, \"core2\");\n      removeOne(cc, \"core3\");\n      removeOne(cc, \"core4\");\n\n      // now test that unloading a core means the core is not persisted\n      TestHarness.validateXPath(locator.xml, \"3=count(/solr/cores/core)\");\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27affa73e101ea5cb023d8ea037d86c352e6a563":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["27affa73e101ea5cb023d8ea037d86c352e6a563","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["96a802acd838449b6936d34e464baeeb82f9ef54"],"96a802acd838449b6936d34e464baeeb82f9ef54":["27affa73e101ea5cb023d8ea037d86c352e6a563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["27affa73e101ea5cb023d8ea037d86c352e6a563"],"27affa73e101ea5cb023d8ea037d86c352e6a563":["37a0f60745e53927c4c876cfe5b5a58170f0646c","96a802acd838449b6936d34e464baeeb82f9ef54"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"96a802acd838449b6936d34e464baeeb82f9ef54":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}