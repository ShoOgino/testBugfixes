{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","commits":[{"id":"a684698d2d785b642cc0dda9c81091abc2bd90b5","date":1078844108,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Reads a stemsdictionary. Each line contains:\n     * word \\t stem\n\t * i.e. tab seperated)\n\t *\n\t * @return Stem dictionary that overrules, the stemming algorithm\n\t */\n\tpublic static Hashtable getStemDict( File wordstemfile)\n\t{\n\t\tif ( wordstemfile == null )\n\t\t{\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = new Hashtable();\n\t\ttry\n\t\t{\n\t\t\tLineNumberReader lnr = new LineNumberReader(new FileReader(wordstemfile));\n\t\t\tString line;\n\t\t\tString[] wordstem;\n\t\t\twhile ((line = lnr.readLine()) != null)\n\t\t\t{\n\t\t\t\twordstem = line.split(\"\\t\", 2);\n\t\t\t\tresult.put(wordstem[0], wordstem[1]);\n\t\t   }\n\t\t}\n\t\tcatch (IOException e)\n\t\t{}\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9","date":1078974336,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","sourceNew":"  /**\n   * Reads a stemsdictionary. Each line contains:\n   * word \\t stem\n   * i.e. tab seperated)\n   *\n   * @return Stem dictionary that overrules, the stemming algorithm\n   */\n  public static HashMap getStemDict(File wordstemfile) {\n    if (wordstemfile == null) {\n      return new HashMap();\n    }\n    HashMap result = new HashMap();\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordstemfile));\n      String line;\n      String[] wordstem;\n      while ((line = lnr.readLine()) != null) {\n        wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } catch (IOException e) {\n    }\n    return result;\n  }\n\n","sourceOld":"\t/**\n\t * Reads a stemsdictionary. Each line contains:\n     * word \\t stem\n\t * i.e. tab seperated)\n\t *\n\t * @return Stem dictionary that overrules, the stemming algorithm\n\t */\n\tpublic static Hashtable getStemDict( File wordstemfile)\n\t{\n\t\tif ( wordstemfile == null )\n\t\t{\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = new Hashtable();\n\t\ttry\n\t\t{\n\t\t\tLineNumberReader lnr = new LineNumberReader(new FileReader(wordstemfile));\n\t\t\tString line;\n\t\t\tString[] wordstem;\n\t\t\twhile ((line = lnr.readLine()) != null)\n\t\t\t{\n\t\t\t\twordstem = line.split(\"\\t\", 2);\n\t\t\t\tresult.put(wordstem[0], wordstem[1]);\n\t\t   }\n\t\t}\n\t\tcatch (IOException e)\n\t\t{}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getStemDict(File).mjava","sourceNew":"  /**\n   * Reads a stemsdictionary. Each line contains:\n   * word \\t stem\n   * i.e. tab seperated)\n   *\n   * @return Stem dictionary that overrules, the stemming algorithm\n   */\n  public static HashMap getStemDict(File wordstemfile) {\n    if (wordstemfile == null) {\n      return new HashMap();\n    }\n    HashMap result = new HashMap();\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordstemfile));\n      String line;\n      String[] wordstem;\n      while ((line = lnr.readLine()) != null) {\n        wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } catch (IOException e) {\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads a stemsdictionary. Each line contains:\n   * word \\t stem\n   * i.e. tab seperated)\n   *\n   * @return Stem dictionary that overrules, the stemming algorithm\n   */\n  public static HashMap getStemDict(File wordstemfile) {\n    if (wordstemfile == null) {\n      return new HashMap();\n    }\n    HashMap result = new HashMap();\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordstemfile));\n      String line;\n      String[] wordstem;\n      while ((line = lnr.readLine()) != null) {\n        wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } catch (IOException e) {\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["a684698d2d785b642cc0dda9c81091abc2bd90b5"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a684698d2d785b642cc0dda9c81091abc2bd90b5"],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}