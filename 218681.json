{"path":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","commits":[{"id":"5e316f9ea0ab451f736a2a2b65103c3910bfad8e","date":1009307680,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n\treturn directory.fileExists(\"write.lock\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dbb14e9adf67f0e8fb9cc55a25a71063c230338","date":1051751355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return directory.fileExists(\"write.lock\");\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n\treturn directory.fileExists(\"write.lock\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12ee37ea5a0061cfa8d91d87109b11dcf89142c4","date":1051818618,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"write.lock\").isLocked() ||\n        directory.makeLock(\"commit.lock\").isLocked();\n        \n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return directory.fileExists(\"write.lock\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693a4c06f749274d170a2e87d4afb2709a810f46","date":1060700703,"type":3,"author":"Scott Ganyo","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"write.lock\").isLocked() ||\n        directory.makeLock(\"commit.lock\").isLocked();\n\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"write.lock\").isLocked() ||\n        directory.makeLock(\"commit.lock\").isLocked();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18a2a015b86d022024b2b712bd8b607afccbb881","date":1066054947,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"IndexWriter.WRITE_LOCK_NAME\").isLocked() ||\n        directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\").isLocked();\n\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"write.lock\").isLocked() ||\n        directory.makeLock(\"commit.lock\").isLocked();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93","date":1066387782,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n        directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(\"IndexWriter.WRITE_LOCK_NAME\").isLocked() ||\n        directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\").isLocked();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n            directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n            directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(Directory directory) throws IOException {\n      return\n        directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n        directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n            directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n            directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n            directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n            directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n            directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked() ||\n            directory.makeLock(IndexWriter.COMMIT_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(Directory).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return\n      directory.makeLock(IndexWriter.WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"18a2a015b86d022024b2b712bd8b607afccbb881":["693a4c06f749274d170a2e87d4afb2709a810f46"],"693a4c06f749274d170a2e87d4afb2709a810f46":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["ba712167ee848727018d8b77aa0c273839fbe15c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["1b54a9bc667895a2095a886184bf69a3179e63df"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["18a2a015b86d022024b2b712bd8b607afccbb881"],"ba712167ee848727018d8b77aa0c273839fbe15c":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a2a015b86d022024b2b712bd8b607afccbb881":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"693a4c06f749274d170a2e87d4afb2709a810f46":["18a2a015b86d022024b2b712bd8b607afccbb881"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["ba712167ee848727018d8b77aa0c273839fbe15c"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ba712167ee848727018d8b77aa0c273839fbe15c":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["693a4c06f749274d170a2e87d4afb2709a810f46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}