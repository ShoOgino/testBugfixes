{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","commits":[{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","sourceNew":"  // nocommit: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6c554455db6752562dfe09614cdf3fd06062c3","date":1323301343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    if (readOnly)\n      throw new UnsupportedOperationException(\"this SegmentReader is read only\");\n    hasChanges = true;\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n    // liveDocs are now dirty:\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    ensureOpen();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#deleteDocument(int).mjava","sourceNew":null,"sourceOld":"  // TODO: remove deletions from SR\n  synchronized void deleteDocument(int docNum) throws IOException {\n    if (readOnly)\n      throw new UnsupportedOperationException(\"this SegmentReader is read only\");\n    hasChanges = true;\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n    // liveDocs are now dirty:\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6c554455db6752562dfe09614cdf3fd06062c3"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["7d6c554455db6752562dfe09614cdf3fd06062c3"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["781537683b56c6c5aad3b1046f00daf1c7ea93ae","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}