{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#incrementSentence().mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#incrementSentence().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * return true if there is a token from the buffer, or null if it is\n   * exhausted.\n   */\n  private boolean incrementSentence() throws IOException {\n    if (length == 0) // we must refill the buffer\n      return false;\n    \n    while (true) {\n      int start = iterator.current();\n\n      if (start == BreakIterator.DONE)\n        return false; // BreakIterator exhausted\n\n      // find the next set of boundaries\n      int end = iterator.next();\n\n      if (end == BreakIterator.DONE)\n        return false; // BreakIterator exhausted\n\n      setNextSentence(start, end);\n      if (incrementWord()) {\n        return true;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1387d416b7beb69f15a682854da8ec4c153f5bce","date":1332264506,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#incrementSentence().mjava","sourceNew":null,"sourceOld":"  /**\n   * return true if there is a token from the buffer, or null if it is\n   * exhausted.\n   */\n  private boolean incrementSentence() throws IOException {\n    if (length == 0) // we must refill the buffer\n      return false;\n    \n    while (true) {\n      int start = iterator.current();\n\n      if (start == BreakIterator.DONE)\n        return false; // BreakIterator exhausted\n\n      // find the next set of boundaries\n      int end = iterator.next();\n\n      if (end == BreakIterator.DONE)\n        return false; // BreakIterator exhausted\n\n      setNextSentence(start, end);\n      if (incrementWord()) {\n        return true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1387d416b7beb69f15a682854da8ec4c153f5bce"]},"commit2Childs":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["1387d416b7beb69f15a682854da8ec4c153f5bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}