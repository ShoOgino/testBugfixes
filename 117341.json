{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"/dev/null","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * BufferedIndexOutput.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = files.iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f592767aedabac6986d9a9d5b4191e7709ea774f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592767aedabac6986d9a9d5b4191e7709ea774f","date":1169930354,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * BufferedIndexOutput.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * BufferedIndexOutput.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = files.iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * BufferedIndexOutput.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  public final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  public final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    for (final RAMFile file : fileMap.values())\n      size += file.length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  public final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    Iterator it = fileMap.values().iterator();\n    while (it.hasNext())\n      size += ((RAMFile) it.next()).length;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#getRecomputedActualSizeInBytes().mjava","sourceNew":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  public final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    for (final RAMFile file : fileMap.values())\n      size += file.length;\n    return size;\n  }\n\n","sourceOld":"  /** Like getRecomputedSizeInBytes(), but, uses actual file\n   * lengths rather than buffer allocations (which are\n   * quantized up to nearest\n   * RAMOutputStream.BUFFER_SIZE (now 1024) bytes.\n   */\n\n  public final synchronized long getRecomputedActualSizeInBytes() {\n    long size = 0;\n    for (final RAMFile file : fileMap.values())\n      size += file.length;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"f592767aedabac6986d9a9d5b4191e7709ea774f":["eeefd99c477417e5c7c574228461ebafe92469d4"],"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["f592767aedabac6986d9a9d5b4191e7709ea774f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["ef82ff03e4016c705811b2658e81471a645c0e49"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"f592767aedabac6986d9a9d5b4191e7709ea774f":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"eeefd99c477417e5c7c574228461ebafe92469d4":["f592767aedabac6986d9a9d5b4191e7709ea774f"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}