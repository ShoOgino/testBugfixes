{"path":"backwards/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String).mjava","pathOld":"/dev/null","sourceNew":"  final List<String> createCompoundFile(String fileName)\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n      new CompoundFileWriter(directory, fileName, checkAbort);\n\n    List<String> files =\n      new ArrayList<String>(IndexFileNames.COMPOUND_EXTENSIONS.length + 1);    \n    \n    // Basic files\n    for (int i = 0; i < IndexFileNames.COMPOUND_EXTENSIONS.length; i++) {\n      String ext = IndexFileNames.COMPOUND_EXTENSIONS[i];\n\n      if (ext.equals(IndexFileNames.PROX_EXTENSION) && !hasProx())\n        continue;\n\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                            !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        files.add(segment + \".\" + ext);\n    }\n\n    // Fieldable norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        files.add(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (int i = 0; i < IndexFileNames.VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + IndexFileNames.VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    for (String file : files) {\n      cfsWriter.addFile(file);\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n   \n    return files;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String).mjava","sourceNew":"  final List<String> createCompoundFile(String fileName)\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n      new CompoundFileWriter(directory, fileName, checkAbort);\n\n    List<String> files =\n      new ArrayList<String>(IndexFileNames.COMPOUND_EXTENSIONS.length + 1);    \n    \n    // Basic files\n    for (int i = 0; i < IndexFileNames.COMPOUND_EXTENSIONS.length; i++) {\n      String ext = IndexFileNames.COMPOUND_EXTENSIONS[i];\n\n      if (ext.equals(IndexFileNames.PROX_EXTENSION) && !hasProx())\n        continue;\n\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                            !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        files.add(segment + \".\" + ext);\n    }\n\n    // Fieldable norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        files.add(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (int i = 0; i < IndexFileNames.VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + IndexFileNames.VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    for (String file : files) {\n      cfsWriter.addFile(file);\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n   \n    return files;\n  }\n\n","sourceOld":"  final List<String> createCompoundFile(String fileName)\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n      new CompoundFileWriter(directory, fileName, checkAbort);\n\n    List<String> files =\n      new ArrayList<String>(IndexFileNames.COMPOUND_EXTENSIONS.length + 1);    \n    \n    // Basic files\n    for (int i = 0; i < IndexFileNames.COMPOUND_EXTENSIONS.length; i++) {\n      String ext = IndexFileNames.COMPOUND_EXTENSIONS[i];\n\n      if (ext.equals(IndexFileNames.PROX_EXTENSION) && !hasProx())\n        continue;\n\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                            !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        files.add(segment + \".\" + ext);\n    }\n\n    // Fieldable norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        files.add(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (int i = 0; i < IndexFileNames.VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + IndexFileNames.VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    for (String file : files) {\n      cfsWriter.addFile(file);\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n   \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}