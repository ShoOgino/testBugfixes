{"path":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","commits":[{"id":"966b6744500bb2953baa42383dbd59ff490dc216","date":1237739626,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aab56102a66ad6123bbc7a10ec65d998b5e6117a","date":1238749717,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["966b6744500bb2953baa42383dbd59ff490dc216"],"ad94625fb8d088209f46650c8097196fec67f00c":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"966b6744500bb2953baa42383dbd59ff490dc216":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["966b6744500bb2953baa42383dbd59ff490dc216"],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"966b6744500bb2953baa42383dbd59ff490dc216":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}