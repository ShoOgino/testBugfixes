{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50110fe9088380a4f557899cce4a52f1257c8494","date":1359751675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","sourceNew":"    /**\n     * Sets the given field number and name if not yet set. \n     */\n    // nocommit: why is docvalues involved with global field numbers?\n    // nocommit: and is it even tested...\n    /*\n    synchronized void setIfNotSet(int fieldNumber, String fieldName, DocValuesType dvType) {\n      final Integer boxedFieldNumber = Integer.valueOf(fieldNumber);\n      if (!numberToName.containsKey(boxedFieldNumber)\n          && !nameToNumber.containsKey(fieldName)\n          && !docValuesType.containsKey(dvType)) {\n        numberToName.put(boxedFieldNumber, fieldName);\n        nameToNumber.put(fieldName, boxedFieldNumber);\n        docValuesType.put(fieldName, dvType);\n      } else {\n        // nocommit should this be a real check?\n        assert containsConsistent(boxedFieldNumber, fieldName, dvType);\n      }\n    }\n    */\n    \n    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","sourceOld":"    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"301d3faa5738629bababa1e25f2b0418192e201a","date":1359754681,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","sourceNew":"    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","sourceOld":"    /**\n     * Sets the given field number and name if not yet set. \n     */\n    // nocommit: why is docvalues involved with global field numbers?\n    // nocommit: and is it even tested...\n    /*\n    synchronized void setIfNotSet(int fieldNumber, String fieldName, DocValuesType dvType) {\n      final Integer boxedFieldNumber = Integer.valueOf(fieldNumber);\n      if (!numberToName.containsKey(boxedFieldNumber)\n          && !nameToNumber.containsKey(fieldName)\n          && !docValuesType.containsKey(dvType)) {\n        numberToName.put(boxedFieldNumber, fieldName);\n        nameToNumber.put(fieldName, boxedFieldNumber);\n        docValuesType.put(fieldName, dvType);\n      } else {\n        // nocommit should this be a real check?\n        assert containsConsistent(boxedFieldNumber, fieldName, dvType);\n      }\n    }\n    */\n    \n    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#containsConsistent(Integer,String,DocValuesType).mjava","sourceNew":null,"sourceOld":"    // used by assert\n    synchronized boolean containsConsistent(Integer number, String name, DocValuesType dvType) {\n      return name.equals(numberToName.get(number))\n          && number.equals(nameToNumber.get(name)) &&\n        (dvType == null || docValuesType.get(name) == null || dvType == docValuesType.get(name));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","301d3faa5738629bababa1e25f2b0418192e201a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"301d3faa5738629bababa1e25f2b0418192e201a":["50110fe9088380a4f557899cce4a52f1257c8494"],"50110fe9088380a4f557899cce4a52f1257c8494":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"]},"commit2Childs":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"0837ab0472feecb3a54260729d845f839e1cbd72":["50110fe9088380a4f557899cce4a52f1257c8494"],"301d3faa5738629bababa1e25f2b0418192e201a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"50110fe9088380a4f557899cce4a52f1257c8494":["301d3faa5738629bababa1e25f2b0418192e201a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}