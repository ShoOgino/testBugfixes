{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","commits":[{"id":"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a","date":1217856027,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimplCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows. Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   *\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows. Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   *\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows. Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   *\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["418d77836a1ba93781f1d48f1dc2fb16dd7fae0a"],"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["ad94625fb8d088209f46650c8097196fec67f00c"],"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["418d77836a1ba93781f1d48f1dc2fb16dd7fae0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}