{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flush(int,FixedBitSet,int,byte,IndexOutput).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flush(int,FixedBitSet,int,byte,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  private static void flush(\n      int block, FixedBitSet buffer, int cardinality, byte denseRankPower, IndexOutput out) throws IOException {\n    assert block >= 0 && block < 65536;\n    out.writeShort((short) block);\n    assert cardinality > 0 && cardinality <= 65536;\n    out.writeShort((short) (cardinality - 1));\n    if (cardinality > MAX_ARRAY_LENGTH) {\n      if (cardinality != 65536) { // all docs are set\n        if (denseRankPower != -1) {\n          final byte[] rank = createRank(buffer, denseRankPower);\n          out.writeBytes(rank, rank.length);\n        }\n        for (long word : buffer.getBits()) {\n          out.writeLong(word);\n        }\n      }\n    } else {\n      BitSetIterator it = new BitSetIterator(buffer, cardinality);\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n        out.writeShort((short) doc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flush(int,FixedBitSet,int,byte,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  private static void flush(\n      int block, FixedBitSet buffer, int cardinality, byte denseRankPower, IndexOutput out) throws IOException {\n    assert block >= 0 && block < 65536;\n    out.writeShort((short) block);\n    assert cardinality > 0 && cardinality <= 65536;\n    out.writeShort((short) (cardinality - 1));\n    if (cardinality > MAX_ARRAY_LENGTH) {\n      if (cardinality != 65536) { // all docs are set\n        if (denseRankPower != -1) {\n          final byte[] rank = createRank(buffer, denseRankPower);\n          out.writeBytes(rank, rank.length);\n        }\n        for (long word : buffer.getBits()) {\n          out.writeLong(word);\n        }\n      }\n    } else {\n      BitSetIterator it = new BitSetIterator(buffer, cardinality);\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n        out.writeShort((short) doc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}