{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    for (int i = 0; i < s.length; ++i) {\n      Token t = tf.next();\n      assertNotNull(t);\n      assertEquals(s[i], new String(t.termBuffer(), 0, t.termLength()));\n      assertEquals(startOffset[i], t.startOffset());\n      assertEquals(endOffset[i], t.endOffset());\n      assertEquals(posIncr[i], t.getPositionIncrement());\n    }\n    assertNull(tf.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","sourceNew":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","sourceOld":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    for (int i = 0; i < s.length; ++i) {\n      Token t = tf.next();\n      assertNotNull(t);\n      assertEquals(s[i], new String(t.termBuffer(), 0, t.termLength()));\n      assertEquals(startOffset[i], t.startOffset());\n      assertEquals(endOffset[i], t.endOffset());\n      assertEquals(posIncr[i], t.getPositionIncrement());\n    }\n    assertNull(tf.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","sourceNew":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","sourceOld":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}