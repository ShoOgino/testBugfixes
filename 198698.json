{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(Fieldable).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    if (f instanceof NumericField) {\n      final Number val = ((NumericField) f).numericValue();\n      if (val==null) return badFieldString(f);\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(Fieldable f) {\n    if (f instanceof NumericField) {\n      final Number val = ((NumericField) f).getNumericValue();\n      if (val==null) return badFieldString(f);\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final byte[] arr = f.getBinaryValue();\n      if (arr==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(arr);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(arr));\n        case LONG:\n          return toLong(arr);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(arr));\n        case DATE:\n          return new Date(toLong(arr));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    if (f.numeric()) {\n      final Number val = f.numericValue();\n      if (val==null) return badFieldString(f);\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    if (f instanceof NumericField) {\n      final Number val = ((NumericField) f).numericValue();\n      if (val==null) return badFieldString(f);\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    if (f.numeric()) {\n      final Number val = f.numericValue();\n      if (val==null) return badFieldString(f);\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(GeneralField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(GeneralField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(StorableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(StorableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the old BinaryField encoding is no longer supported\n      return badFieldString(f);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["86c3ff7c47b47e868bd4d7a89e629518c03eb040"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the old BinaryField encoding is no longer supported\n      return badFieldString(f);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86c3ff7c47b47e868bd4d7a89e629518c03eb040","date":1458748577,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n\n      if (f.fieldType().stored() == false && f.fieldType().docValuesType() == DocValuesType.NUMERIC ) {\n        long bits = val.longValue();\n        switch (type) {\n          case INTEGER:\n            return (int)bits;\n          case FLOAT:\n            return Float.intBitsToFloat((int)bits);\n          case LONG:\n            return bits;\n          case DOUBLE:\n            return Double.longBitsToDouble(bits);\n          case DATE:\n            return new Date(bits);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n        }\n      }\n\n      // normal stored case\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // multi-valued numeric docValues currently use SortedSet on the indexed terms.\n      BytesRef term = f.binaryValue();\n      switch (type) {\n        case INTEGER:\n          return LegacyNumericUtils.prefixCodedToInt(term);\n        case FLOAT:\n          return NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(term));\n        case LONG:\n          return LegacyNumericUtils.prefixCodedToLong(term);\n        case DOUBLE:\n          return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(term));\n        case DATE:\n          return new Date(LegacyNumericUtils.prefixCodedToLong(term));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the old BinaryField encoding is no longer supported\n      return badFieldString(f);\n    }\n  }\n\n","bugFix":["733eaf468f18297b1bcc51031353bdfdd1913bdf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n\n      if (f.fieldType().stored() == false && f.fieldType().docValuesType() == DocValuesType.NUMERIC ) {\n        long bits = val.longValue();\n        switch (type) {\n          case INTEGER:\n            return (int)bits;\n          case FLOAT:\n            return Float.intBitsToFloat((int)bits);\n          case LONG:\n            return bits;\n          case DOUBLE:\n            return Double.longBitsToDouble(bits);\n          case DATE:\n            return new Date(bits);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n        }\n      }\n\n      // normal stored case\n      return (type == NumberType.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // multi-valued numeric docValues currently use SortedSet on the indexed terms.\n      BytesRef term = f.binaryValue();\n      switch (type) {\n        case INTEGER:\n          return LegacyNumericUtils.prefixCodedToInt(term);\n        case FLOAT:\n          return NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(term));\n        case LONG:\n          return LegacyNumericUtils.prefixCodedToLong(term);\n        case DOUBLE:\n          return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(term));\n        case DATE:\n          return new Date(LegacyNumericUtils.prefixCodedToLong(term));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n\n      if (f.fieldType().stored() == false && f.fieldType().docValuesType() == DocValuesType.NUMERIC ) {\n        long bits = val.longValue();\n        switch (type) {\n          case INTEGER:\n            return (int)bits;\n          case FLOAT:\n            return Float.intBitsToFloat((int)bits);\n          case LONG:\n            return bits;\n          case DOUBLE:\n            return Double.longBitsToDouble(bits);\n          case DATE:\n            return new Date(bits);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n        }\n      }\n\n      // normal stored case\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // multi-valued numeric docValues currently use SortedSet on the indexed terms.\n      BytesRef term = f.binaryValue();\n      switch (type) {\n        case INTEGER:\n          return LegacyNumericUtils.prefixCodedToInt(term);\n        case FLOAT:\n          return NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(term));\n        case LONG:\n          return LegacyNumericUtils.prefixCodedToLong(term);\n        case DOUBLE:\n          return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(term));\n        case DATE:\n          return new Date(LegacyNumericUtils.prefixCodedToLong(term));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n\n      if (f.fieldType().stored() == false && f.fieldType().docValuesType() == DocValuesType.NUMERIC ) {\n        long bits = val.longValue();\n        switch (type) {\n          case INTEGER:\n            return (int)bits;\n          case FLOAT:\n            return Float.intBitsToFloat((int)bits);\n          case LONG:\n            return bits;\n          case DOUBLE:\n            return Double.longBitsToDouble(bits);\n          case DATE:\n            return new Date(bits);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n        }\n      }\n\n      // normal stored case\n      return (type == NumberType.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // multi-valued numeric docValues currently use SortedSet on the indexed terms.\n      BytesRef term = f.binaryValue();\n      switch (type) {\n        case INTEGER:\n          return LegacyNumericUtils.prefixCodedToInt(term);\n        case FLOAT:\n          return NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(term));\n        case LONG:\n          return LegacyNumericUtils.prefixCodedToLong(term);\n        case DOUBLE:\n          return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(term));\n        case DATE:\n          return new Date(LegacyNumericUtils.prefixCodedToLong(term));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n\n      if (f.fieldType().stored() == false && f.fieldType().docValuesType() == DocValuesType.NUMERIC ) {\n        long bits = val.longValue();\n        switch (type) {\n          case INTEGER:\n            return (int)bits;\n          case FLOAT:\n            return Float.intBitsToFloat((int)bits);\n          case LONG:\n            return bits;\n          case DOUBLE:\n            return Double.longBitsToDouble(bits);\n          case DATE:\n            return new Date(bits);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n        }\n      }\n\n      // normal stored case\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // multi-valued numeric docValues currently use SortedSet on the indexed terms.\n      BytesRef term = f.binaryValue();\n      switch (type) {\n        case INTEGER:\n          return LegacyNumericUtils.prefixCodedToInt(term);\n        case FLOAT:\n          return NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(term));\n        case LONG:\n          return LegacyNumericUtils.prefixCodedToLong(term);\n        case DOUBLE:\n          return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(term));\n        case DATE:\n          return new Date(LegacyNumericUtils.prefixCodedToLong(term));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["86c3ff7c47b47e868bd4d7a89e629518c03eb040"],"86c3ff7c47b47e868bd4d7a89e629518c03eb040":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["86c3ff7c47b47e868bd4d7a89e629518c03eb040","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"1d028314cced5858683a1bb4741423d0f934257b":["fa0f44f887719e97183771e977cfc4bfb485b766","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86c3ff7c47b47e868bd4d7a89e629518c03eb040":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"06584e6e98d592b34e1329b384182f368d2025e8":["fa0f44f887719e97183771e977cfc4bfb485b766"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"fa0f44f887719e97183771e977cfc4bfb485b766":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["86c3ff7c47b47e868bd4d7a89e629518c03eb040"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}