{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DistribStateManager#removeRecursively(String,boolean,boolean).mjava","commits":[{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DistribStateManager#removeRecursively(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove data recursively.\n   * @param root root path\n   * @param ignoreMissing ignore errors if root or any children path is missing\n   * @param includeRoot when true delete also the root path\n   */\n  default void removeRecursively(String root, boolean ignoreMissing, boolean includeRoot) throws NoSuchElementException, IOException, NotEmptyException, KeeperException, InterruptedException, BadVersionException {\n    List<String> tree;\n    try {\n      tree = listTree(root);\n    } catch (NoSuchElementException e) {\n      if (ignoreMissing) {\n        return;\n      } else {\n        throw e;\n      }\n    }\n    Collections.reverse(tree);\n    for (String p : tree) {\n      if (p.equals(\"/\")) {\n        continue;\n      }\n      if (p.equals(root) && !includeRoot) {\n        continue;\n      }\n      try {\n        removeData(p, -1);\n      } catch (NoSuchElementException e) {\n        if (!ignoreMissing) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014d96f9396e00db51d613291a3568fb75f058ad","date":1521025196,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/DistribStateManager#removeRecursively(String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DistribStateManager#removeRecursively(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Remove data recursively.\n   * @param root root path\n   * @param ignoreMissing ignore errors if root or any children path is missing\n   * @param includeRoot when true delete also the root path\n   */\n  default void removeRecursively(String root, boolean ignoreMissing, boolean includeRoot) throws NoSuchElementException, IOException, NotEmptyException, KeeperException, InterruptedException, BadVersionException {\n    List<String> tree;\n    try {\n      tree = listTree(root);\n    } catch (NoSuchElementException e) {\n      if (ignoreMissing) {\n        return;\n      } else {\n        throw e;\n      }\n    }\n    Collections.reverse(tree);\n    for (String p : tree) {\n      if (p.equals(\"/\")) {\n        continue;\n      }\n      if (p.equals(root) && !includeRoot) {\n        continue;\n      }\n      try {\n        removeData(p, -1);\n      } catch (NoSuchElementException e) {\n        if (!ignoreMissing) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove data recursively.\n   * @param root root path\n   * @param ignoreMissing ignore errors if root or any children path is missing\n   * @param includeRoot when true delete also the root path\n   */\n  default void removeRecursively(String root, boolean ignoreMissing, boolean includeRoot) throws NoSuchElementException, IOException, NotEmptyException, KeeperException, InterruptedException, BadVersionException {\n    List<String> tree;\n    try {\n      tree = listTree(root);\n    } catch (NoSuchElementException e) {\n      if (ignoreMissing) {\n        return;\n      } else {\n        throw e;\n      }\n    }\n    Collections.reverse(tree);\n    for (String p : tree) {\n      if (p.equals(\"/\")) {\n        continue;\n      }\n      if (p.equals(root) && !includeRoot) {\n        continue;\n      }\n      try {\n        removeData(p, -1);\n      } catch (NoSuchElementException e) {\n        if (!ignoreMissing) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"014d96f9396e00db51d613291a3568fb75f058ad":["01e3e55745c6667006f67aaa604466b9974425f4"],"01e3e55745c6667006f67aaa604466b9974425f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["014d96f9396e00db51d613291a3568fb75f058ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e3e55745c6667006f67aaa604466b9974425f4"],"014d96f9396e00db51d613291a3568fb75f058ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01e3e55745c6667006f67aaa604466b9974425f4":["014d96f9396e00db51d613291a3568fb75f058ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}