{"path":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","commits":[{"id":"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c","date":1110211682,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"/dev/null","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}