{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"    // Returns a ref\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    // Returns a ref\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","sourceOld":"    // Returns a ref\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @return \n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","sourceOld":"    // Returns a ref\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6b36d4f0afdb006498f433653ee214a61be4fa","date":1251387263,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @return \n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["961159f13aece73fbb30aea720e77a2237e8bafd"],"aa6b36d4f0afdb006498f433653ee214a61be4fa":["f33fc116e28d7704378c9dd333711753bd0c9706"],"961159f13aece73fbb30aea720e77a2237e8bafd":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa6b36d4f0afdb006498f433653ee214a61be4fa"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"aa6b36d4f0afdb006498f433653ee214a61be4fa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"961159f13aece73fbb30aea720e77a2237e8bafd":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}