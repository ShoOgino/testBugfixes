{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedDeletes,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedDeletes del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6483e4260c08168709c02238ae083a51519a28dd":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","6483e4260c08168709c02238ae083a51519a28dd"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}