{"path":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,SimpleFacetsCollector).mjava","sourceNew":"  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    counts = new int[taxoReader.getSize()];\n    count(fc.getMatchingDocs());\n  }\n\n","sourceOld":"  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, SimpleFacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    counts = new int[taxoReader.getSize()];\n    count(fc.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e499df4729e7162d5b39a70b0142e3186a029f","date":1385554050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","sourceNew":"  /** Create {@code TaxonomyFacetCounts}, which also\n   *  counts all facet labels.  Use this for a non-default\n   *  {@link OrdinalsReader}; otherwise use {@link\n   *  FastTaxonomyFacetCounts}. */\n  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    counts = new int[taxoReader.getSize()];\n    count(fc.getMatchingDocs());\n  }\n\n","sourceOld":"  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    counts = new int[taxoReader.getSize()];\n    count(fc.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1536855b62f453c22bb60258029b3b2a07b2532c","date":1385570079,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","sourceNew":"  /** Create {@code TaxonomyFacetCounts}, which also\n   *  counts all facet labels.  Use this for a non-default\n   *  {@link OrdinalsReader}; otherwise use {@link\n   *  FastTaxonomyFacetCounts}. */\n  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    count(fc.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code TaxonomyFacetCounts}, which also\n   *  counts all facet labels.  Use this for a non-default\n   *  {@link OrdinalsReader}; otherwise use {@link\n   *  FastTaxonomyFacetCounts}. */\n  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    counts = new int[taxoReader.getSize()];\n    count(fc.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetCounts#TaxonomyFacetCounts(OrdinalsReader,TaxonomyReader,FacetsConfig,FacetsCollector).mjava","sourceNew":"  /** Create {@code TaxonomyFacetCounts}, which also\n   *  counts all facet labels.  Use this for a non-default\n   *  {@link OrdinalsReader}; otherwise use {@link\n   *  FastTaxonomyFacetCounts}. */\n  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    count(fc.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code TaxonomyFacetCounts}, which also\n   *  counts all facet labels.  Use this for a non-default\n   *  {@link OrdinalsReader}; otherwise use {@link\n   *  FastTaxonomyFacetCounts}. */\n  public TaxonomyFacetCounts(OrdinalsReader ordinalsReader, TaxonomyReader taxoReader, FacetsConfig config, FacetsCollector fc) throws IOException {\n    super(ordinalsReader.getIndexFieldName(), taxoReader, config);\n    this.ordinalsReader = ordinalsReader;\n    count(fc.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6e499df4729e7162d5b39a70b0142e3186a029f":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["1536855b62f453c22bb60258029b3b2a07b2532c"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1536855b62f453c22bb60258029b3b2a07b2532c":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b6e499df4729e7162d5b39a70b0142e3186a029f":["1536855b62f453c22bb60258029b3b2a07b2532c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"1536855b62f453c22bb60258029b3b2a07b2532c":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}