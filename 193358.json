{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}