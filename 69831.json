{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(LuceneTestCase.getOnlyLeafReader(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAM-resident Directory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new ByteBuffersDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(LuceneTestCase.getOnlyLeafReader(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(LuceneTestCase.getOnlyLeafReader(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d77dafd89756a5161d244985903e3487ca109182"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}