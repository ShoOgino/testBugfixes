{"path":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a13babcd1e7e8ed620723df70b5cca8cb2e532","date":1282190002,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["45a13babcd1e7e8ed620723df70b5cca8cb2e532"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45a13babcd1e7e8ed620723df70b5cca8cb2e532":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["0883328ff2cc09b5c999d05c04e16530d819c627","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0883328ff2cc09b5c999d05c04e16530d819c627"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0883328ff2cc09b5c999d05c04e16530d819c627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0883328ff2cc09b5c999d05c04e16530d819c627"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"45a13babcd1e7e8ed620723df70b5cca8cb2e532":["0883328ff2cc09b5c999d05c04e16530d819c627"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["45a13babcd1e7e8ed620723df70b5cca8cb2e532","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}