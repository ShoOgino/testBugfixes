{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","commits":[{"id":"928e2ef3d862ccb69a41c8e0af4d8be43438fa78","date":1376947665,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField(\"dv\"));\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField(\"dv\"));\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"487204058e79506a6ddba0065cfff810bc15b06a","date":1378216488,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField(\"indexed\", \"dv\"));\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820c994610cafbde5892c00924bdf69fffaaf38f","date":1378227060,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField(\"indexed\", \"dv\"));\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestMissingVsFieldCache(LongProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestMissingVsFieldCache(LongProducer).mjava","sourceNew":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMissingVsFieldCache(LongProducer longs) throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = newStringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.next();\n      indexedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      Document doc = new Document();\n      doc.add(idField);\n      // 1/4 of the time we neglect to add the fields\n      if (random().nextInt(4) > 0) {\n        doc.add(indexedField);\n        doc.add(dvField);\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // 256 values\n    writer.forceMerge(numDocs / 256);\n\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      Bits expected = FieldCache.DEFAULT.getDocsWithField(r, \"indexed\");\n      Bits actual = FieldCache.DEFAULT.getDocsWithField(r, \"dv\");\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"487204058e79506a6ddba0065cfff810bc15b06a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"928e2ef3d862ccb69a41c8e0af4d8be43438fa78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"820c994610cafbde5892c00924bdf69fffaaf38f":["487204058e79506a6ddba0065cfff810bc15b06a"],"d12774649e77a6efccc3502c735c2893b52af6d6":["928e2ef3d862ccb69a41c8e0af4d8be43438fa78"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["820c994610cafbde5892c00924bdf69fffaaf38f"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12774649e77a6efccc3502c735c2893b52af6d6"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"487204058e79506a6ddba0065cfff810bc15b06a":["820c994610cafbde5892c00924bdf69fffaaf38f"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"928e2ef3d862ccb69a41c8e0af4d8be43438fa78":["d12774649e77a6efccc3502c735c2893b52af6d6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["928e2ef3d862ccb69a41c8e0af4d8be43438fa78","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"820c994610cafbde5892c00924bdf69fffaaf38f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d12774649e77a6efccc3502c735c2893b52af6d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["487204058e79506a6ddba0065cfff810bc15b06a","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}