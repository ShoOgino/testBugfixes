{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySet().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySet().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a CharArraySet as a source\n   */\n  public void testCopyCharArraySet() {\n    CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT, 10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(TEST_VERSION_CURRENT, setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a CharArraySet as a source\n   */\n  public void testCopyCharArraySet() {\n    CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT, 10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(TEST_VERSION_CURRENT, setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySet().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a CharArraySet as a source\n   */\n  public void testCopyCharArraySet() {\n    CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT, 10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(TEST_VERSION_CURRENT, setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a CharArraySet as a source\n   */\n  public void testCopyCharArraySet() {\n    CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT, 10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(TEST_VERSION_CURRENT, setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}