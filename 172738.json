{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","commits":[{"id":"22d8ccb67dfb925c5b95ceca63171670ad1bc3b7","date":1484389731,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getMatchingChildren().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a89f438a969ebb743e51ee48fae5ea83897bbc","date":1484475500,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":null,"sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getMatchingChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":null,"sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), true);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createWeight(scorerSearcher.rewrite(bq.build()), ScoreMode.COMPLETE, 1);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testMinShouldMatchMatches().mjava","sourceNew":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createWeight(scorerSearcher.rewrite(bq.build()), ScoreMode.COMPLETE, 1);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","sourceOld":"  public void testMinShouldMatchMatches() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(F2, \"lucene\")), Occur.SHOULD);\n    bq.add(new PhraseQuery(F2, \"search\", \"library\"), Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n\n    Weight w = scorerSearcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    Scorer s = w.scorer(reader.leaves().get(0));\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(2, s.getChildren().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"d9a89f438a969ebb743e51ee48fae5ea83897bbc":["22d8ccb67dfb925c5b95ceca63171670ad1bc3b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d9a89f438a969ebb743e51ee48fae5ea83897bbc"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"22d8ccb67dfb925c5b95ceca63171670ad1bc3b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2c9e07c6618087aa30ff83c3a54818165e76c3a8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"d9a89f438a969ebb743e51ee48fae5ea83897bbc":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d8ccb67dfb925c5b95ceca63171670ad1bc3b7"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"22d8ccb67dfb925c5b95ceca63171670ad1bc3b7":["d9a89f438a969ebb743e51ee48fae5ea83897bbc"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}