{"path":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","commits":[{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":1,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(String).mjava","sourceNew":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      OutputStream out = directory().createFile(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName = segment + \".f\" + number;\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite(String name) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      OutputStream out = directory().createFile(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName = segment + \".f\" + fieldInfos.fieldNumber(name);\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7","date":1092245915,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","sourceNew":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      OutputStream out = directory().createFile(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{ \n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      OutputStream out = directory().createFile(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName = segment + \".f\" + number;\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","sourceNew":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      IndexOutput out = directory().createOutput(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{ \n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      OutputStream out = directory().createFile(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{ \n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","sourceNew":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      IndexOutput out = directory().createOutput(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{\n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      IndexOutput out = directory().createOutput(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{ \n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","sourceNew":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n\n      String oldFileName = si.getNormFileName(this.number);\n      if (oldFileName != null) {\n        // Mark this file for deletion.  Note that we don't\n        // actually try to delete it until the new segments files is\n        // successfully written:\n        deleter.addPendingFile(oldFileName);\n      }\n\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      IndexOutput out = directory().createOutput(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{\n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["950f3c7592cb559e2534e5089c78833250e156a3"],"950f3c7592cb559e2534e5089c78833250e156a3":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["284c1d3c8b19931bf6f312fae7470487f5d9e580"]},"commit2Childs":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"950f3c7592cb559e2534e5089c78833250e156a3":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["950f3c7592cb559e2534e5089c78833250e156a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}