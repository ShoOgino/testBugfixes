{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1336abe0899b2984e5652903556c1925fbdca9f","date":1329580100,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        ((Field) f2).setBoost(2.0f);\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string\", new BytesRef(num), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2\", new BytesRef(num2), DocValues.Type.BYTES_VAR_SORTED));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string_fixed\", new BytesRef(numFixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new DocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), DocValues.Type.BYTES_FIXED_SORTED));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      }\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      if (supportsDocValues) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      }\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":["63bc3238545c6012bd44f5d294077997f236bc4e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (!f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      // nocommit shouldn't this be tracer_fixed?  how is\n      // this passing?\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    // nocommit\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      // nocommit shouldn't this be tracer_fixed?  how is\n      // this passing?\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    // nocommit\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    // nocommit back to newSearcher(true)? problem is this\n    // sometimes uses slow reader wrapper which does not\n    // provide DV 2.0\n    IndexSearcher searcher = newSearcher(reader, false);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47b9e6cdfa7e1fc15944550d1007780d96b4dcb6","date":1358785685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    // nocommit back to newSearcher(true)? problem is this\n    // sometimes uses slow reader wrapper which does not\n    // provide DV 2.0\n    IndexSearcher searcher = newSearcher(reader, false);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed), true));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      } else {\n        doc.add(new DerefBytesDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed), true));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n        indexStore,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(97))\n    );\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for (int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add (new Field (\"tracer\", num, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string\", new BytesRef(num)));\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField (\"string2\", num2, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2\", new BytesRef(num2)));\n      doc.add (new Field (\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add (new Field (\"fixed_tracer\", numFixed, onlyStored));\n      //doc.add (new Field (\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string_fixed\", new BytesRef(numFixed), true));\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField (\"string2_fixed\", num2Fixed, Field.Store.NO));\n      doc.add(new SortedBytesDocValuesField(\"string2_fixed\", new BytesRef(num2Fixed), true));\n      doc.add (new Field (\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument (doc);\n    }\n    //writer.forceMerge(1);\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    return newSearcher(reader);\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4e8cc373c801e54cec75daf9f52792cb4b17f536","04f07771a2a7dd3a395700665ed839c3dae2def2","5eae7c5ddae4b9692a6691d2d252ab6a4229457b","63bc3238545c6012bd44f5d294077997f236bc4e","28088b0a688977b79dec2cc9119cff2fb4aab7ee","57ae3024996ccdb3c36c42cb890e1efb37df4ce8","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":null,"sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#getFullStrings().mjava","sourceNew":null,"sourceOld":"  private IndexSearcher getFullStrings() throws IOException {\n    Directory indexStore = newDirectory();\n    dirs.add(indexStore);\n    IndexWriter writer = new IndexWriter(\n                                         indexStore,\n                                         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                         setMergePolicy(newLogMergePolicy(97)));\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    final int fixedLen = getRandomNumber(2, 8);\n    final int fixedLen2 = getRandomNumber(1, 4);\n    for(int i=0; i<NUM_STRINGS; i++) {\n      Document doc = new Document();\n      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);\n      doc.add(new Field(\"tracer\", num, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string\", num, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_dv\", new BytesRef(num)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_dv\", new BytesRef(num)));\n      }\n      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);\n      doc.add(new StringField(\"string2\", num2, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_dv\", new BytesRef(num2)));\n      }\n      doc.add(new Field(\"tracer2\", num2, onlyStored));\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      String numFixed = getRandomCharString(fixedLen, 48, 52);\n      doc.add(new Field(\"tracer_fixed\", numFixed, onlyStored));\n      //doc.add(new Field(\"contents\", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(new StringField(\"string_fixed\", numFixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string_fixed_dv\", new BytesRef(numFixed)));\n      }\n      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);\n      doc.add(new StringField(\"string2_fixed\", num2Fixed, Field.Store.NO));\n      if (dvStringSorted) {\n        doc.add(new SortedDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      } else {\n        doc.add(new BinaryDocValuesField(\"string2_fixed_dv\", new BytesRef(num2Fixed)));\n      }\n      doc.add(new Field(\"tracer2_fixed\", num2Fixed, onlyStored));\n\n      for(IndexableField f2 : doc.getFields()) {\n        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {\n          ((Field) f2).setBoost(2.0f);\n        }\n      }\n\n      writer.addDocument(doc);\n    }\n    //System.out.println(writer.getSegmentCount());\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    /*\n    for(int docID=0;docID<reader.maxDoc();docID++) {\n      StoredDocument doc = reader.document(docID);\n      String s = doc.get(\"tracer\");\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"string\", s)), NUM_STRINGS);\n      System.out.println(\"string=\" + s + \" has \" + hits.totalHits + \" docs\");\n      boolean found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n      s = doc.get(\"tracer2\");\n      hits = searcher.search(new TermQuery(new Term(\"string2\", s)), NUM_STRINGS);\n      System.out.println(\"string2=\" + s + \" has \" + hits.totalHits + \" docs\");\n      found = false;\n      for(int hit=0;!found && hit<hits.totalHits;hit++) {\n        if (hits.scoreDocs[hit].doc == docID) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(found);\n    }\n    */\n\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a3635dad24b0681f0088f2ef680456482cdb451"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3a3635dad24b0681f0088f2ef680456482cdb451"],"3a3635dad24b0681f0088f2ef680456482cdb451":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a3635dad24b0681f0088f2ef680456482cdb451","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1336abe0899b2984e5652903556c1925fbdca9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3a3635dad24b0681f0088f2ef680456482cdb451"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d1336abe0899b2984e5652903556c1925fbdca9f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["47b9e6cdfa7e1fc15944550d1007780d96b4dcb6"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"],"47b9e6cdfa7e1fc15944550d1007780d96b4dcb6":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"]},"commit2Childs":{"29f7cc7c185412da66c1d0089d9e75da01329a00":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d1336abe0899b2984e5652903556c1925fbdca9f"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3a3635dad24b0681f0088f2ef680456482cdb451":["29f7cc7c185412da66c1d0089d9e75da01329a00","8fd5be977c105554c6a7b68afcdbc511439723ab","d4d69c535930b5cce125cff868d40f6373dc27d4","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["47b9e6cdfa7e1fc15944550d1007780d96b4dcb6"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d1336abe0899b2984e5652903556c1925fbdca9f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a3635dad24b0681f0088f2ef680456482cdb451","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"47b9e6cdfa7e1fc15944550d1007780d96b4dcb6":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fd5be977c105554c6a7b68afcdbc511439723ab","95303ff3749680c743b9425f9cf99e6e4065e8a8","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}