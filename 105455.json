{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","commits":[{"id":"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","date":1310073081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"c26f00b574427b55127e869b935845554afde1fa":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}