{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f","b6ef1ac57615594df99b4d227449fa09de6c255f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["08932c793647a36953d1816b1060121f48820d3f","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["08932c793647a36953d1816b1060121f48820d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}