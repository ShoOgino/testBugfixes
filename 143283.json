{"path":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new FileReader(file));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c0a5252c6159c48f98b20a14f05297c36ba354","date":1578059239,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new FileReader(file));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d42d9137df31cd94969bed5087634c6751d97eed","date":1578059239,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88c63c47c168cb7f36e9b541fe0a3d3464c021b9","date":1590156506,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.setField(\"id\", id.toString());\n            doc.setField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              sendBatch(client, request, false /* normal batch */);\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        sendBatch(client, request, true /* last batch */);\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.addField(\"id\", id.toString());\n            doc.addField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              CLIO.out(\"Sending batch of 300 log records...\");\n              request.process(client);\n              CLIO.out(\"Batch sent\");\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        //Process last batch\n        CLIO.out(\"Sending last batch ...\");\n        request.process(client);\n        client.commit();\n        CLIO.out(\"Committed\");\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList<>();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.setField(\"id\", id.toString());\n            doc.setField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              sendBatch(client, request, false /* normal batch */);\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        sendBatch(client, request, true /* last batch */);\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    if(args.length != 2) {\n      CLIO.out(\"\");\n      CLIO.out(\"postlogs is a simple tool for indexing Solr logs.\");\n      CLIO.out(\"\");\n      CLIO.out(\"parameters:\");\n      CLIO.out(\"\");\n      CLIO.out(\"-- baseUrl: Example http://localhost:8983/solr/collection1\");\n      CLIO.out(\"-- rootDir: All files found at or below the root will be indexed.\");\n      CLIO.out(\"\");\n      CLIO.out(\"Sample syntax 1: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs/solr.log\");\n      CLIO.out(\"Sample syntax 2: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs\");\n      CLIO.out(\"\");\n      return;\n    }\n\n    String baseUrl = args[0];\n    String root = args[1];\n\n    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n    SolrClient client = null;\n    try {\n      client = builder.withBaseSolrUrl(baseUrl).build();\n      File rf = new File(root);\n      List<File> files = new ArrayList();\n      gatherFiles(rf, files);\n      int rec = 0;\n      UpdateRequest request = new UpdateRequest();\n\n      for (File file : files) {\n\n        LineNumberReader bufferedReader = null;\n\n        try {\n          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));\n          LogRecordReader recordReader = new LogRecordReader(bufferedReader);\n          SolrInputDocument doc = null;\n          String fileName = file.getName();\n          while (true) {\n            try {\n              doc = recordReader.readRecord();\n            } catch (Throwable t) {\n              CLIO.err(\"Error reading log record:\"+ bufferedReader.getLineNumber() +\" from file:\"+ fileName);\n              CLIO.err(t.getMessage());\n              continue;\n            }\n\n            if(doc == null) {\n              break;\n            }\n\n            rec++;\n            UUID id = UUID.randomUUID();\n            doc.setField(\"id\", id.toString());\n            doc.setField(\"file_s\", fileName);\n            request.add(doc);\n            if (rec == 300) {\n              sendBatch(client, request, false /* normal batch */);\n              request = new UpdateRequest();\n              rec = 0;\n            }\n          }\n        } finally {\n          bufferedReader.close();\n        }\n      }\n\n      if (rec > 0) {\n        sendBatch(client, request, true /* last batch */);\n      }\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c0a5252c6159c48f98b20a14f05297c36ba354":["2e38054de362483189e0fdd850b779ed766aa7aa"],"d42d9137df31cd94969bed5087634c6751d97eed":["60c0a5252c6159c48f98b20a14f05297c36ba354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["88c63c47c168cb7f36e9b541fe0a3d3464c021b9"],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d42d9137df31cd94969bed5087634c6751d97eed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"88c63c47c168cb7f36e9b541fe0a3d3464c021b9":["d42d9137df31cd94969bed5087634c6751d97eed"]},"commit2Childs":{"60c0a5252c6159c48f98b20a14f05297c36ba354":["d42d9137df31cd94969bed5087634c6751d97eed"],"d42d9137df31cd94969bed5087634c6751d97eed":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","88c63c47c168cb7f36e9b541fe0a3d3464c021b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["60c0a5252c6159c48f98b20a14f05297c36ba354"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"88c63c47c168cb7f36e9b541fe0a3d3464c021b9":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}