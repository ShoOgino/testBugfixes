{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/MultipleAdditiveTreesModel#explain(LeafReaderContext,int,float,List[Explanation]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/MultipleAdditiveTreesModel#explain(LeafReaderContext,int,float,List[Explanation]).mjava","pathOld":"/dev/null","sourceNew":"  // /////////////////////////////////////////\n  // produces a string that looks like:\n  // 40.0 = multipleadditivetreesmodel [ org.apache.solr.ltr.model.MultipleAdditiveTreesModel ]\n  // model applied to\n  // features, sum of:\n  // 50.0 = tree 0 | 'matchedTitle':1.0 > 0.500001, Go Right |\n  // 'this_feature_doesnt_exist' does not\n  // exist in FV, Go Left | val: 50.0\n  // -10.0 = tree 1 | val: -10.0\n  @Override\n  public Explanation explain(LeafReaderContext context, int doc,\n      float finalScore, List<Explanation> featureExplanations) {\n    final float[] fv = new float[featureExplanations.size()];\n    int index = 0;\n    for (final Explanation featureExplain : featureExplanations) {\n      fv[index] = featureExplain.getValue();\n      index++;\n    }\n\n    final List<Explanation> details = new ArrayList<>();\n    index = 0;\n\n    for (final RegressionTree t : trees) {\n      final float score = t.score(fv);\n      final Explanation p = Explanation.match(score, \"tree \" + index + \" | \"\n          + t.explain(fv));\n      details.add(p);\n      index++;\n    }\n\n    return Explanation.match(finalScore, toString()\n        + \" model applied to features, sum of:\", details);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/MultipleAdditiveTreesModel#explain(LeafReaderContext,int,float,List[Explanation]).mjava","pathOld":"/dev/null","sourceNew":"  // /////////////////////////////////////////\n  // produces a string that looks like:\n  // 40.0 = multipleadditivetreesmodel [ org.apache.solr.ltr.model.MultipleAdditiveTreesModel ]\n  // model applied to\n  // features, sum of:\n  // 50.0 = tree 0 | 'matchedTitle':1.0 > 0.500001, Go Right |\n  // 'this_feature_doesnt_exist' does not\n  // exist in FV, Go Left | val: 50.0\n  // -10.0 = tree 1 | val: -10.0\n  @Override\n  public Explanation explain(LeafReaderContext context, int doc,\n      float finalScore, List<Explanation> featureExplanations) {\n    final float[] fv = new float[featureExplanations.size()];\n    int index = 0;\n    for (final Explanation featureExplain : featureExplanations) {\n      fv[index] = featureExplain.getValue();\n      index++;\n    }\n\n    final List<Explanation> details = new ArrayList<>();\n    index = 0;\n\n    for (final RegressionTree t : trees) {\n      final float score = t.score(fv);\n      final Explanation p = Explanation.match(score, \"tree \" + index + \" | \"\n          + t.explain(fv));\n      details.add(p);\n      index++;\n    }\n\n    return Explanation.match(finalScore, toString()\n        + \" model applied to features, sum of:\", details);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/MultipleAdditiveTreesModel#explain(LeafReaderContext,int,float,List[Explanation]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/MultipleAdditiveTreesModel#explain(LeafReaderContext,int,float,List[Explanation]).mjava","sourceNew":"  // /////////////////////////////////////////\n  // produces a string that looks like:\n  // 40.0 = multipleadditivetreesmodel [ org.apache.solr.ltr.model.MultipleAdditiveTreesModel ]\n  // model applied to\n  // features, sum of:\n  // 50.0 = tree 0 | 'matchedTitle':1.0 > 0.500001, Go Right |\n  // 'this_feature_doesnt_exist' does not\n  // exist in FV, Go Left | val: 50.0\n  // -10.0 = tree 1 | val: -10.0\n  @Override\n  public Explanation explain(LeafReaderContext context, int doc,\n      float finalScore, List<Explanation> featureExplanations) {\n    final float[] fv = new float[featureExplanations.size()];\n    int index = 0;\n    for (final Explanation featureExplain : featureExplanations) {\n      fv[index] = featureExplain.getValue().floatValue();\n      index++;\n    }\n\n    final List<Explanation> details = new ArrayList<>();\n    index = 0;\n\n    for (final RegressionTree t : trees) {\n      final float score = t.score(fv);\n      final Explanation p = Explanation.match(score, \"tree \" + index + \" | \"\n          + t.explain(fv));\n      details.add(p);\n      index++;\n    }\n\n    return Explanation.match(finalScore, toString()\n        + \" model applied to features, sum of:\", details);\n  }\n\n","sourceOld":"  // /////////////////////////////////////////\n  // produces a string that looks like:\n  // 40.0 = multipleadditivetreesmodel [ org.apache.solr.ltr.model.MultipleAdditiveTreesModel ]\n  // model applied to\n  // features, sum of:\n  // 50.0 = tree 0 | 'matchedTitle':1.0 > 0.500001, Go Right |\n  // 'this_feature_doesnt_exist' does not\n  // exist in FV, Go Left | val: 50.0\n  // -10.0 = tree 1 | val: -10.0\n  @Override\n  public Explanation explain(LeafReaderContext context, int doc,\n      float finalScore, List<Explanation> featureExplanations) {\n    final float[] fv = new float[featureExplanations.size()];\n    int index = 0;\n    for (final Explanation featureExplain : featureExplanations) {\n      fv[index] = featureExplain.getValue();\n      index++;\n    }\n\n    final List<Explanation> details = new ArrayList<>();\n    index = 0;\n\n    for (final RegressionTree t : trees) {\n      final float score = t.score(fv);\n      final Explanation p = Explanation.match(score, \"tree \" + index + \" | \"\n          + t.explain(fv));\n      details.add(p);\n      index++;\n    }\n\n    return Explanation.match(finalScore, toString()\n        + \" model applied to features, sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}