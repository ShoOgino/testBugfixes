{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec()); // nocommit only simple-text supports sorting so far\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec()); // nocommit only simple-text supports sorting so far\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), getNumericDocValue(reader, \"foo\", topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"815972da4a13279b8e975d2e32ca450649d6c295","date":1462635959,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), getNumericDocValue(reader, \"foo\", topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    \n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    \n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(values.get(i).longValue(), MultiDocValues.getNumericValues(reader, \"foo\").get(topDocs.scoreDocs[0].doc));\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    \n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    \n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n    \n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testConcurrentUpdates().mjava","sourceNew":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits.value);\n      } else {\n        assertEquals(1, topDocs.totalHits.value);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // There is tricky logic to resolve deletes that happened while merging\n  public void testConcurrentUpdates() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Map<Integer, Long> values = new HashMap<>();\n\n    final int numDocs = atLeast(100);\n    Thread[] threads = new Thread[2];\n\n    final AtomicInteger updateCount = new AtomicInteger(atLeast(1000));\n    final CountDownLatch latch = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; ++i) {\n      Random r = new Random(random().nextLong());\n      threads[i] = new Thread(new UpdateRunnable(numDocs, r, latch, updateCount, w, values));\n    }\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    latch.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      final TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", Integer.toString(i))), 1);\n      if (values.containsKey(i) == false) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues dvs = MultiDocValues.getNumericValues(reader, \"foo\");\n        int docID = topDocs.scoreDocs[0].doc;\n        assertEquals(docID, dvs.advance(docID));\n        assertEquals(values.get(i).longValue(), dvs.longValue());\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"815972da4a13279b8e975d2e32ca450649d6c295":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","815972da4a13279b8e975d2e32ca450649d6c295"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","83788ad129a5154d5c6562c4e8ce3db48793aada"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["815972da4a13279b8e975d2e32ca450649d6c295"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"815972da4a13279b8e975d2e32ca450649d6c295":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}