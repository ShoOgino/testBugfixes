{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps#waitAddPendingCoreOps(String).mjava","commits":[{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9409650933cc688e77e565092a25e58adfc2e18d"]},"commit2Childs":{"9409650933cc688e77e565092a25e58adfc2e18d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}