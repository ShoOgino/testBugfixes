{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"/dev/null","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      ReaderCouple couple = refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6817596a5666fa3e3979682dea4a2bc8d70fc570","date":1227002271,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n  }\n\n","sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      ReaderCouple couple = refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performTestsWithExceptionInReopen(TestReopen).mjava","sourceNew":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","sourceOld":"  private void performTestsWithExceptionInReopen(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n\n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    try {\n      refreshReader(index1, test, 0, true);\n      fail(\"Expected exception not thrown.\");\n    } catch (Exception e) {\n      // expected exception\n    }\n    \n    // index2 should still be usable and unaffected by the failed reopen() call\n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    index1.close();\n    index2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6db660b56f04fdb2853d25cdee8ee0d36559a521"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}