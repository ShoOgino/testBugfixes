{"path":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    SortSpec sort = QueryParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    SortSpec sort = QueryParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req);\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    SortSpec sort = QueryParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79acb0e466faaab809d0bcd9d44bc446449d325e","date":1453293805,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cbaf0735458446c429df54ba816915e8a1f638","date":1476738812,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   * @deprecated Use the not misleadingly named getSortSpec() function instead.\n   */\n  @Deprecated\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    return getSortSpec(useGlobalParams);\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   * @deprecated Use the not misleadingly named getSortSpec() function instead.\n   */\n  @Deprecated\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    return getSortSpec(useGlobalParams);\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94f73754edacbaf85874797d34356b76b3c1312","date":1496425883,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   * @deprecated Use the not misleadingly named getSortSpec() function instead.\n   */\n  @Deprecated\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    return getSortSpec(useGlobalParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   * @deprecated Use the not misleadingly named getSortSpec() function instead.\n   */\n  @Deprecated\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    return getSortSpec(useGlobalParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   * @deprecated Use the not misleadingly named getSortSpec() function instead.\n   */\n  @Deprecated\n  public SortSpec getSort(boolean useGlobalParams) throws SyntaxError {\n    return getSortSpec(useGlobalParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94f73754edacbaf85874797d34356b76b3c1312":["07cbaf0735458446c429df54ba816915e8a1f638"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"07cbaf0735458446c429df54ba816915e8a1f638":["79acb0e466faaab809d0bcd9d44bc446449d325e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"28288370235ed02234a64753cdbf0c6ec096304a":["07cbaf0735458446c429df54ba816915e8a1f638","b94f73754edacbaf85874797d34356b76b3c1312"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["79acb0e466faaab809d0bcd9d44bc446449d325e","07cbaf0735458446c429df54ba816915e8a1f638"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["07cbaf0735458446c429df54ba816915e8a1f638","b94f73754edacbaf85874797d34356b76b3c1312"],"6c8dc56dbae186505066de8a78986cba31525ef0":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"79acb0e466faaab809d0bcd9d44bc446449d325e":["6c8dc56dbae186505066de8a78986cba31525ef0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b94f73754edacbaf85874797d34356b76b3c1312":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"07cbaf0735458446c429df54ba816915e8a1f638":["b94f73754edacbaf85874797d34356b76b3c1312","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"6c8dc56dbae186505066de8a78986cba31525ef0":["79acb0e466faaab809d0bcd9d44bc446449d325e"],"79acb0e466faaab809d0bcd9d44bc446449d325e":["07cbaf0735458446c429df54ba816915e8a1f638","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["6c8dc56dbae186505066de8a78986cba31525ef0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}