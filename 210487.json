{"path":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Directory[],boolean).mjava","sourceNew":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = new MockRAMDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","sourceOld":"  private void populateDirs(Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = new MockRAMDirectory();\n      populateDocs(dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","sourceNew":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory(random);\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","sourceOld":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = new MockRAMDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","sourceNew":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","sourceOld":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory(random);\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDirs(Random,Directory[],boolean).mjava","sourceNew":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","sourceOld":"  private void populateDirs(Random random, Directory[] dirs, boolean multipleCommits)\n      throws IOException {\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      populateDocs(random, dirs[i], multipleCommits);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n      verifyPayloadExists(dirs[i], \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}