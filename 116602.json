{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdaf00a5a262eeea242f74f74de712ceaa24eedf","date":1345126478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    byte fooNorms[] = (byte[]) slow.normValues(\"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) slow.normValues(\"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    byte fooNorms[] = (byte[]) slow.normValues(\"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) slow.normValues(\"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    byte fooNorms[] = (byte[]) slow.normValues(\"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) slow.normValues(\"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.simpleNormValues(\"foo\");\n    NumericDocValues barNorms = slow.simpleNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    byte fooNorms[] = (byte[]) slow.normValues(\"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) slow.normValues(\"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.simpleNormValues(\"foo\");\n    NumericDocValues barNorms = slow.simpleNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    byte fooNorms[] = (byte[]) slow.normValues(\"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) slow.normValues(\"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = new SlowCompositeReaderWrapper(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues fooNorms = slow.getNormValues(\"foo\");\n    NumericDocValues barNorms = slow.getNormValues(\"bar\");\n    for (int i = 0; i < slow.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","0837ab0472feecb3a54260729d845f839e1cbd72","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertFalse(fooNorms.get(i) == barNorms.get(i));\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n\n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n\n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n\n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits.value > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits.value > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    NumericDocValues barNorms = MultiDocValues.getNormValues(reader, \"bar\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(i, barNorms.nextDoc());\n      assertFalse(fooNorms.longValue() == barNorms.longValue());\n    }\n\n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","615370d2b876c3435773b5174df2e2242ad7981a"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"615370d2b876c3435773b5174df2e2242ad7981a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cdaf00a5a262eeea242f74f74de712ceaa24eedf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cdaf00a5a262eeea242f74f74de712ceaa24eedf","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["616c1830142ff5c1ddedec1ed898733b73c8e23b","cdaf00a5a262eeea242f74f74de712ceaa24eedf","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cdaf00a5a262eeea242f74f74de712ceaa24eedf":["616c1830142ff5c1ddedec1ed898733b73c8e23b","d4d69c535930b5cce125cff868d40f6373dc27d4","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}