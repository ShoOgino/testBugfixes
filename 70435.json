{"path":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#testBasics().mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#testBasics().mjava","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {-10.0, -10.0}, new double[] {9.1, 10.1}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {10.0, -10.0}, new double[] {20.0, 10.0}));\n    writer.addDocument(document);\n\n    // intersects (contains, crosses)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {-20.0, -20.0}, new double[] {30.0, 30.1}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {-11.1, -11.2}, new double[] {1.23, 11.5}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {12.33, 1.2}, new double[] {15.1, 29.9}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {-122.33, 1.2}, new double[] {-115.1, 29.9}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {Double.NEGATIVE_INFINITY, 1.2}, new double[] {-11.0, 29.9}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new DoubleRange(FIELD_NAME, new double[] {-11, -15}, new double[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(DoubleRange.newIntersectsQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(2, searcher.count(DoubleRange.newWithinQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(2, searcher.count(DoubleRange.newContainsQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(5, searcher.count(DoubleRange.newCrossesQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {-10.0, -10.0}, new double[] {9.1, 10.1}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {10.0, -10.0}, new double[] {20.0, 10.0}));\n    writer.addDocument(document);\n\n    // intersects (contains, crosses)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {-20.0, -20.0}, new double[] {30.0, 30.1}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {-11.1, -11.2}, new double[] {1.23, 11.5}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {12.33, 1.2}, new double[] {15.1, 29.9}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {-122.33, 1.2}, new double[] {-115.1, 29.9}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {Double.NEGATIVE_INFINITY, 1.2}, new double[] {-11.0, 29.9}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new DoubleRangeField(FIELD_NAME, new double[] {-11, -15}, new double[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(DoubleRangeField.newIntersectsQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(2, searcher.count(DoubleRangeField.newWithinQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(2, searcher.count(DoubleRangeField.newContainsQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n    assertEquals(5, searcher.count(DoubleRangeField.newCrossesQuery(FIELD_NAME,\n        new double[] {-11.0, -15.0}, new double[] {15.0, 20.0})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}