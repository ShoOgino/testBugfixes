{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testUpdatesAndResetRandom().mjava","commits":[{"id":"af08e9e692a7d133c6a60b1164563d53e13a1631","date":1544167492,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testUpdatesAndResetRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdatesAndResetRandom() {\n    NumericDocValuesFieldUpdates updates = new NumericDocValuesFieldUpdates(0, \"test\", 10);\n    int numUpdates = 10 + random().nextInt(100);\n    Integer[] values = new Integer[5];\n    for (int i = 0; i < 5; i++) {\n      values[i] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[i] == null) {\n        updates.reset(i);\n      } else {\n        updates.add(i, values[i]);\n      }\n    }\n    for (int i = 0; i < numUpdates; i++) {\n      int docId = random().nextInt(5);\n      values[docId] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[docId] == null) {\n        updates.reset(docId);\n      } else {\n        updates.add(docId, values[docId]);\n      }\n    }\n\n    updates.finish();\n    NumericDocValuesFieldUpdates.Iterator iterator = updates.iterator();\n    int idx = 0;\n    while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(idx, iterator.docID());\n      if (values[idx] == null) {\n        assertFalse(iterator.hasValue());\n      } else {\n        assertTrue(iterator.hasValue());\n        assertEquals(values[idx].longValue(), iterator.longValue());\n      }\n      idx++;\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d10066de45b1b0d13af2eaf9294225d47a3c452b","date":1544466028,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testUpdatesAndResetRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testUpdatesAndResetRandom().mjava","sourceNew":"  public void testUpdatesAndResetRandom() {\n    NumericDocValuesFieldUpdates updates = new NumericDocValuesFieldUpdates(0, \"test\", 10);\n    int numUpdates = 10 + random().nextInt(100);\n    Integer[] values = new Integer[5];\n    for (int i = 0; i < 5; i++) {\n      values[i] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[i] == null) {\n        updates.reset(i);\n      } else {\n        updates.add(i, values[i]);\n      }\n    }\n    for (int i = 0; i < numUpdates; i++) {\n      int docId = random().nextInt(5);\n      values[docId] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[docId] == null) {\n        updates.reset(docId);\n      } else {\n        updates.add(docId, values[docId]);\n      }\n    }\n\n    updates.finish();\n    NumericDocValuesFieldUpdates.Iterator iterator = updates.iterator();\n    int idx = 0;\n    while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(idx, iterator.docID());\n      if (values[idx] == null) {\n        assertFalse(iterator.hasValue());\n      } else {\n        assertTrue(iterator.hasValue());\n        assertEquals(values[idx].longValue(), iterator.longValue());\n      }\n      idx++;\n    }\n  }\n\n","sourceOld":"  public void testUpdatesAndResetRandom() {\n    NumericDocValuesFieldUpdates updates = new NumericDocValuesFieldUpdates(0, \"test\", 10);\n    int numUpdates = 10 + random().nextInt(100);\n    Integer[] values = new Integer[5];\n    for (int i = 0; i < 5; i++) {\n      values[i] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[i] == null) {\n        updates.reset(i);\n      } else {\n        updates.add(i, values[i]);\n      }\n    }\n    for (int i = 0; i < numUpdates; i++) {\n      int docId = random().nextInt(5);\n      values[docId] = random().nextBoolean() ? null : random().nextInt(100);\n      if (values[docId] == null) {\n        updates.reset(docId);\n      } else {\n        updates.add(docId, values[docId]);\n      }\n    }\n\n    updates.finish();\n    NumericDocValuesFieldUpdates.Iterator iterator = updates.iterator();\n    int idx = 0;\n    while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(idx, iterator.docID());\n      if (values[idx] == null) {\n        assertFalse(iterator.hasValue());\n      } else {\n        assertTrue(iterator.hasValue());\n        assertEquals(values[idx].longValue(), iterator.longValue());\n      }\n      idx++;\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d10066de45b1b0d13af2eaf9294225d47a3c452b":["af08e9e692a7d133c6a60b1164563d53e13a1631"],"af08e9e692a7d133c6a60b1164563d53e13a1631":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d10066de45b1b0d13af2eaf9294225d47a3c452b"]},"commit2Childs":{"d10066de45b1b0d13af2eaf9294225d47a3c452b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af08e9e692a7d133c6a60b1164563d53e13a1631":["d10066de45b1b0d13af2eaf9294225d47a3c452b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af08e9e692a7d133c6a60b1164563d53e13a1631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}