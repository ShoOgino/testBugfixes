{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","commits":[{"id":"9440b5b1eec7788a0edd10385e4d7a614d1024d7","date":1528992889,"type":1,"author":"user","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoChildDocs(String).mjava","sourceNew":"  private void checkTwoAnonymousChildDocs(String rawJsonStr, boolean anonChildDocs) throws Exception {\n    SolrQueryRequest req = req(\"commit\",\"true\", ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocs));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd;\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(0);\n    } else {\n      cd = (SolrInputDocument) (d.getField(\"_childDocuments_\")).getFirstValue();\n    }\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(1);\n    } else {\n      cd = (SolrInputDocument)((List)(d.getField(\"_childDocuments_\")).getValue()).get(1);\n    }\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","sourceOld":"  private void checkTwoChildDocs(String rawJsonStr) throws Exception {\n    SolrQueryRequest req = req(\"commit\",\"true\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd = d.getChildDocuments().get(0);\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    cd = d.getChildDocuments().get(1);\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTwoAnonymousChildDocs(String rawJsonStr, boolean anonChildDocs) throws Exception {\n    SolrQueryRequest req = req(\"commit\",\"true\", ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocs));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd;\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(0);\n    } else {\n      cd = (SolrInputDocument) (d.getField(\"_childDocuments_\")).getFirstValue();\n    }\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(1);\n    } else {\n      cd = (SolrInputDocument)((List)(d.getField(\"_childDocuments_\")).getValue()).get(1);\n    }\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTwoAnonymousChildDocs(String rawJsonStr, boolean anonChildDocs) throws Exception {\n    SolrQueryRequest req = req(\"commit\",\"true\", ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocs));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd;\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(0);\n    } else {\n      cd = (SolrInputDocument) (d.getField(\"_childDocuments_\")).getFirstValue();\n    }\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(1);\n    } else {\n      cd = (SolrInputDocument)((List)(d.getField(\"_childDocuments_\")).getValue()).get(1);\n    }\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"263caed1e020aa6ed422c9243c9b1759ab27e703","date":1546531139,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#checkTwoAnonymousChildDocs(String,boolean).mjava","sourceNew":"  // rawJsonStr has \"_childDocuments_\" key.  if anonChildDocs then we want to test with something else.\n  private void checkTwoAnonymousChildDocs(String rawJsonStr, boolean anonChildDocs) throws Exception {\n    if (!anonChildDocs) {\n      rawJsonStr = rawJsonStr.replaceAll(\"_childDocuments_\", \"childLabel\");\n    }\n    SolrQueryRequest req = req(\"commit\",\"true\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd;\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(0);\n    } else {\n      cd = (SolrInputDocument) (d.getField(\"childLabel\")).getFirstValue();\n    }\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(1);\n    } else {\n      cd = (SolrInputDocument)((List)(d.getField(\"childLabel\")).getValue()).get(1);\n    }\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","sourceOld":"  private void checkTwoAnonymousChildDocs(String rawJsonStr, boolean anonChildDocs) throws Exception {\n    SolrQueryRequest req = req(\"commit\",\"true\", ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocs));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(rawJsonStr), p);\n\n    assertEquals( 1, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n\n    SolrInputDocument cd;\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(0);\n    } else {\n      cd = (SolrInputDocument) (d.getField(\"_childDocuments_\")).getFirstValue();\n    }\n    SolrInputField cf = cd.getField( \"id\" );\n    assertEquals(\"2\", cf.getValue());\n\n    if (anonChildDocs) {\n      cd = d.getChildDocuments().get(1);\n    } else {\n      cd = (SolrInputDocument)((List)(d.getField(\"_childDocuments_\")).getValue()).get(1);\n    }\n    cf = cd.getField( \"id\" );\n    assertEquals(\"3\", cf.getValue());\n    cf = cd.getField( \"foo_i\" );\n    assertEquals(2, cf.getValueCount());\n\n    assertEquals(new Object[] {666L,777L}, cf.getValues().toArray());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"263caed1e020aa6ed422c9243c9b1759ab27e703":["9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["263caed1e020aa6ed422c9243c9b1759ab27e703"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","263caed1e020aa6ed422c9243c9b1759ab27e703","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9440b5b1eec7788a0edd10385e4d7a614d1024d7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"263caed1e020aa6ed422c9243c9b1759ab27e703":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}