{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermPositions tp = reader.termPositions();\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":null,"sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermPositions tp = reader.termPositions();\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}