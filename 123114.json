{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (SolrDispatchFilter.log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      SolrDispatchFilter.log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}