{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.SV#doSetNextReader(LeafReaderContext).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.SV#doSetNextReader(LeafReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#doSetNextReader(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = DocValues.getSorted(context.reader(), groupField);\n      facetFieldTermsIndex = DocValues.getSorted(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRefBuilder facetEndPrefix = new BytesRefBuilder();\n        facetEndPrefix.append(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix.get());\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = DocValues.getSorted(context.reader(), groupField);\n      facetFieldTermsIndex = DocValues.getSorted(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRefBuilder facetEndPrefix = new BytesRefBuilder();\n        facetEndPrefix.append(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix.get());\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.SV#doSetNextReader(LeafReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#doSetNextReader(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = DocValues.getSorted(context.reader(), groupField);\n      facetFieldTermsIndex = DocValues.getSorted(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRefBuilder facetEndPrefix = new BytesRefBuilder();\n        facetEndPrefix.append(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix.get());\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = DocValues.getSorted(context.reader(), groupField);\n      facetFieldTermsIndex = DocValues.getSorted(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRefBuilder facetEndPrefix = new BytesRefBuilder();\n        facetEndPrefix.append(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix.get());\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}