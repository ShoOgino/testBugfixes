{"path":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#docIdSetToCache(DocIdSet,LeafReader).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#docIdSetToCache(DocIdSet,LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator, org.apache.lucene.index.LeafReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n    if (docIdSet == null || docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return null;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#docIdSetToCache(DocIdSet,LeafReader).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator, org.apache.lucene.index.LeafReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n    if (docIdSet == null || docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return null;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#docIdSetToCache(DocIdSet,LeafReader).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator, org.apache.lucene.index.LeafReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n    if (docIdSet == null || docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return null;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}