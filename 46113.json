{"path":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","commits":[{"id":"aca9a18be9d7251531953284ee8d8012b022cbc7","date":1519116407,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    String configFile = getFile(\"conf/config.yml\").getAbsolutePath();\n\n    SolrCollectorConfig collectorConfig = new Yaml().loadAs(new FileReader(configFile), SolrCollectorConfig.class);\n\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, collectorConfig, 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6edfc2dfac665ac59cb5f5335512bea5456d1dc3","date":1519140363,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    String configFile = getFile(\"conf/config.yml\").getAbsolutePath();\n\n    SolrCollectorConfig collectorConfig = new Yaml().loadAs(new FileReader(configFile), SolrCollectorConfig.class);\n\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, collectorConfig, 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873efcdf87d1e2a7c3014c56779fec9967a3ec9f","date":1519279726,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    String configFile = getFile(\"conf/config.yml\").getAbsolutePath();\n\n    SolrCollectorConfig collectorConfig = new Yaml().loadAs(new BufferedReader(new InputStreamReader(new FileInputStream(configFile),\"UTF-8\")), SolrCollectorConfig.class);\n\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, collectorConfig, 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b857dd3d30acf3541d2bf24a619d81effc9c11d","date":1519436286,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    String configFile = getFile(\"conf/config.yml\").getAbsolutePath();\n\n    SolrCollectorConfig collectorConfig = new Yaml().loadAs(new BufferedReader(new InputStreamReader(new FileInputStream(configFile),\"UTF-8\")), SolrCollectorConfig.class);\n\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, collectorConfig, 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1a927b2bca4e3939de1ef05d142c13cee9c1245","date":1520231792,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, getFile(\"conf/solr-exporter-config.xml\").toPath(), 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTest#testExecute().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    // solr client\n    CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    int port;\n    ServerSocket socket = null;\n    try {\n      socket = new ServerSocket(0);\n      port = socket.getLocalPort();\n    } finally {\n      socket.close();\n    }\n\n    // index sample docs\n    File exampleDocsDir = new File(getFile(\"exampledocs\").getAbsolutePath());\n    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(\".xml\")));\n    for (File xml : xmlFiles) {\n      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n      req.addFile(xml, \"application/xml\");\n      cloudSolrClient.request(req, \"collection1\");\n    }\n    cloudSolrClient.commit(\"collection1\");\n\n    // start exporter\n    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, getFile(\"conf/solr-exporter-config.xml\").toPath(), 1);\n    try {\n      solrExporter.start();\n\n      URI uri = new URI(\"http://localhost:\" + String.valueOf(port) + \"/metrics\");\n\n      CloseableHttpClient httpclient = HttpClients.createDefault();\n      CloseableHttpResponse response = null;\n      try {\n        HttpGet request = new HttpGet(uri);\n        response = httpclient.execute(request);\n\n        int expectedHTTPStatusCode = HttpStatus.SC_OK;\n        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();\n        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);\n      } finally {\n        response.close();\n        httpclient.close();\n      }\n    } finally {\n      solrExporter.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"]},"commit2Childs":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}