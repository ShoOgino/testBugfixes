{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    // Should return the unfiltered TermsEnum:\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, true);\n    // Should return the unfiltered TermsEnum:\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    // and now another one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, true);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f25fe007b71f83b5488455d368e12201624af04","date":1427987888,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, true);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    // and now another one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, true);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    // Should return the unfiltered TermsEnum:\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, true);\n    // Should return the unfiltered TermsEnum:\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    // and now another one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, true);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, true);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n\n    // and now another one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, true);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4f25fe007b71f83b5488455d368e12201624af04":["3e8715d826e588419327562287d5d6a8040d63d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","4f25fe007b71f83b5488455d368e12201624af04"],"3e8715d826e588419327562287d5d6a8040d63d6":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f25fe007b71f83b5488455d368e12201624af04"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"4f25fe007b71f83b5488455d368e12201624af04":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["4f25fe007b71f83b5488455d368e12201624af04"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}