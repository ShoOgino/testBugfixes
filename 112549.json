{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testNestedFacetSimple().mjava","commits":[{"id":"890d9da8d20886190a080e375f93341a779474e4","date":1549505353,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testNestedFacetSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNestedFacetSimple() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-nested-cat-facet[]\n    final TermsFacetMap topCategoriesFacet = new TermsFacetMap(\"cat\").setLimit(3);\n    final TermsFacetMap topManufacturerFacet = new TermsFacetMap(\"manu_id_s\").setLimit(1);\n    topCategoriesFacet.withSubFacet(\"top_manufacturers\", topManufacturerFacet);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", topCategoriesFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-nested-cat-facet[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n\n    assertHasFacetWithBucketValues(topLevelFacetingData, \"categories\",\n        new FacetBucket(\"electronics\", 12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3));\n\n    // Check the top manufacturer for each category\n    List<BucketJsonFacet> catBuckets = topLevelFacetingData.getBucketBasedFacets(\"categories\").getBuckets();\n    assertHasFacetWithBucketValues(catBuckets.get(0), \"top_manufacturers\",\n        new FacetBucket(\"corsair\", 3));\n    assertHasFacetWithBucketValues(catBuckets.get(1), \"top_manufacturers\",\n        new FacetBucket(\"boa\", 1));\n    assertHasFacetWithBucketValues(catBuckets.get(2), \"top_manufacturers\",\n        new FacetBucket(\"corsair\", 3));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"890d9da8d20886190a080e375f93341a779474e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["890d9da8d20886190a080e375f93341a779474e4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["890d9da8d20886190a080e375f93341a779474e4"],"890d9da8d20886190a080e375f93341a779474e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}