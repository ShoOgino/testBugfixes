{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testMergedStatsOneSegmentWithoutPoints().mjava","commits":[{"id":"2b05a409e5eb9e8760959992d595ca2c67cc9638","date":1461750064,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testMergedStatsOneSegmentWithoutPoints().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergedStatsOneSegmentWithoutPoints() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null).setMergePolicy(NoMergePolicy.INSTANCE));\n    w.addDocument(new Document());\n    DirectoryReader.open(w).close();\n    Document doc = new Document();\n    doc.add(new IntPoint(\"field\", Integer.MIN_VALUE));\n    w.addDocument(doc);\n    IndexReader reader = DirectoryReader.open(w);\n\n    assertArrayEquals(new byte[4], PointValues.getMinPackedValue(reader, \"field\"));\n    assertArrayEquals(new byte[4], PointValues.getMaxPackedValue(reader, \"field\"));\n    assertEquals(1, PointValues.getDocCount(reader, \"field\"));\n    assertEquals(1, PointValues.size(reader, \"field\"));\n\n    assertNull(PointValues.getMinPackedValue(reader, \"field2\"));\n    assertNull(PointValues.getMaxPackedValue(reader, \"field2\"));\n    assertEquals(0, PointValues.getDocCount(reader, \"field2\"));\n    assertEquals(0, PointValues.size(reader, \"field2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testMergedStatsOneSegmentWithoutPoints().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testMergedStatsOneSegmentWithoutPoints().mjava","sourceNew":"  public void testMergedStatsOneSegmentWithoutPoints() throws IOException {\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null).setMergePolicy(NoMergePolicy.INSTANCE));\n    w.addDocument(new Document());\n    DirectoryReader.open(w).close();\n    Document doc = new Document();\n    doc.add(new IntPoint(\"field\", Integer.MIN_VALUE));\n    w.addDocument(doc);\n    IndexReader reader = DirectoryReader.open(w);\n\n    assertArrayEquals(new byte[4], PointValues.getMinPackedValue(reader, \"field\"));\n    assertArrayEquals(new byte[4], PointValues.getMaxPackedValue(reader, \"field\"));\n    assertEquals(1, PointValues.getDocCount(reader, \"field\"));\n    assertEquals(1, PointValues.size(reader, \"field\"));\n\n    assertNull(PointValues.getMinPackedValue(reader, \"field2\"));\n    assertNull(PointValues.getMaxPackedValue(reader, \"field2\"));\n    assertEquals(0, PointValues.getDocCount(reader, \"field2\"));\n    assertEquals(0, PointValues.size(reader, \"field2\"));\n  }\n\n","sourceOld":"  public void testMergedStatsOneSegmentWithoutPoints() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null).setMergePolicy(NoMergePolicy.INSTANCE));\n    w.addDocument(new Document());\n    DirectoryReader.open(w).close();\n    Document doc = new Document();\n    doc.add(new IntPoint(\"field\", Integer.MIN_VALUE));\n    w.addDocument(doc);\n    IndexReader reader = DirectoryReader.open(w);\n\n    assertArrayEquals(new byte[4], PointValues.getMinPackedValue(reader, \"field\"));\n    assertArrayEquals(new byte[4], PointValues.getMaxPackedValue(reader, \"field\"));\n    assertEquals(1, PointValues.getDocCount(reader, \"field\"));\n    assertEquals(1, PointValues.size(reader, \"field\"));\n\n    assertNull(PointValues.getMinPackedValue(reader, \"field2\"));\n    assertNull(PointValues.getMaxPackedValue(reader, \"field2\"));\n    assertEquals(0, PointValues.getDocCount(reader, \"field2\"));\n    assertEquals(0, PointValues.size(reader, \"field2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}