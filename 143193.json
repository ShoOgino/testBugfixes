{"path":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","commits":[{"id":"81ac83661cf5972c111e31e4249749b6506d5f18","date":1361930287,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","pathOld":"/dev/null","sourceNew":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    DefaultSimilarity d = new DefaultSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertEquals(\"norm 20\", 0.25F, sim.computeLengthNorm(20), 0.0F);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","sourceNew":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    ClassicSimilarity d = new ClassicSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertEquals(\"norm 20\", 0.25F, sim.computeLengthNorm(20), 0.0F);\n  }\n\n","sourceOld":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    DefaultSimilarity d = new DefaultSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertEquals(\"norm 20\", 0.25F, sim.computeLengthNorm(20), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","sourceNew":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    ClassicSimilarity d = new ClassicSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 computeNorm(sim, 1), computeNorm(sim, 7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 computeNorm(sim, 1), computeNorm(sim, 7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, computeNorm(sim, 3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, computeNorm(sim, 5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + computeNorm(sim, 6),\n               computeNorm(sim, 6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               computeNorm(sim, 7) < computeNorm(sim, 6));\n    assertEquals(\"norm 20\", 0.25F, computeNorm(sim, 20), 0.0F);\n  }\n\n","sourceOld":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    ClassicSimilarity d = new ClassicSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertEquals(\"norm 20\", 0.25F, sim.computeLengthNorm(20), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testBaselineParameters().mjava","sourceNew":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    ClassicSimilarity d = new ClassicSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 computeNorm(sim, 1), computeNorm(sim, 7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 computeNorm(sim, 1), computeNorm(sim, 7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, computeNorm(sim, 3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, computeNorm(sim, 5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + computeNorm(sim, 6),\n               computeNorm(sim, 6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               computeNorm(sim, 7) < computeNorm(sim, 6));\n    assertEquals(\"norm 20\", 0.25F, computeNorm(sim, 20), 0.0F);\n  }\n\n","sourceOld":"  /** baseline with parameters */\n  public void testBaselineParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_baseline\", \n                                            SweetSpotSimilarity.class);\n    \n    ClassicSimilarity d = new ClassicSimilarity();\n\n    // constant up to 6\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf i=\"+i, 1.5F, sim.tf(i), 0.0F);\n    }\n    // less then default sim above 6\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+sim.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 sim.tf(i) < d.tf(i));\n    }\n\n    // norms: plateau from 3-5\n    assertEquals(\"norm 1 == 7\", \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 2 == 6\",  \n                 sim.computeLengthNorm(1), sim.computeLengthNorm(7),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertEquals(\"norm 20\", 0.25F, sim.computeLengthNorm(20), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["81d0720146de53dd3a4a023d2a3d1089d86d748d","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81ac83661cf5972c111e31e4249749b6506d5f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["81ac83661cf5972c111e31e4249749b6506d5f18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81ac83661cf5972c111e31e4249749b6506d5f18"],"81ac83661cf5972c111e31e4249749b6506d5f18":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}