{"path":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      @Override\r\n      public SeekStatus seek(long ord) throws IOException {\r\n        assert(ord >= 0 && ord <= numOrd);\r\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\r\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\r\n        end = blockEnds[currentBlockNumber];\r\n        currentOrd = (int)ord;\r\n        return SeekStatus.FOUND;\r\n      }\r\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5637938a7dc36e7ff09a5d9398957bd46b15129a","date":1285538458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\r\n      public SeekStatus seek(long ord) throws IOException {\r\n        assert(ord >= 0 && ord <= numOrd);\r\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\r\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\r\n        end = blockEnds[currentBlockNumber];\r\n        currentOrd = (int)ord;\r\n        return SeekStatus.FOUND;\r\n      }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"224555f245128127dc8d161673eb9e867d67857c","date":1290782170,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillUsingLengthPrefix2(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["224555f245128127dc8d161673eb9e867d67857c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","224555f245128127dc8d161673eb9e867d67857c"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["224555f245128127dc8d161673eb9e867d67857c"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["224555f245128127dc8d161673eb9e867d67857c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5637938a7dc36e7ff09a5d9398957bd46b15129a","224555f245128127dc8d161673eb9e867d67857c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"224555f245128127dc8d161673eb9e867d67857c":["5637938a7dc36e7ff09a5d9398957bd46b15129a"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["3bb13258feba31ab676502787ab2e1779f129b7a","224555f245128127dc8d161673eb9e867d67857c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"224555f245128127dc8d161673eb9e867d67857c":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}