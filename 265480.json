{"path":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","commits":[{"id":"20349324eb18d1565d301e59be543989f38743d3","date":1258494398,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20349324eb18d1565d301e59be543989f38743d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["20349324eb18d1565d301e59be543989f38743d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"20349324eb18d1565d301e59be543989f38743d3":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["20349324eb18d1565d301e59be543989f38743d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}