{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","commits":[{"id":"603175ca08914b73fa328e1ac07c772f8103ecd0","date":1363642166,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, its value is <code>null</code>.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55","date":1363791725,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, its value is <code>null</code>.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a385683d8ce32386bb71e8c427cb78573debda2b","date":1363792009,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, its value is <code>null</code>.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1","date":1363793774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, its value is <code>null</code>.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"093e8fad7328aef756bbbf01ec3d5c42a7a62211","date":1363798585,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docids, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docids.length; j++) {\n        result[j] = fieldHighlights.get(docids[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ce1e2e30e484c40cc2c929c6f279a60e36e754b","date":1363798851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docids containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n\n      // Strip off the redundant field:\n      BytesRef terms[] = new BytesRef[fieldTerms.size()];\n      int termUpto = 0;\n      for(Term term : fieldTerms) {\n        terms[termUpto++] = term.bytes();\n      }\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n      Term terms[] = fieldTerms.toArray(new Term[fieldTerms.size()]);\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n\n      // Strip off the redundant field:\n      BytesRef terms[] = new BytesRef[fieldTerms.size()];\n      int termUpto = 0;\n      for(Term term : fieldTerms) {\n        terms[termUpto++] = term.bytes();\n      }\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], getBreakIterator(field), terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    BreakIterator bi = (BreakIterator)breakIterator.clone();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n\n      // Strip off the redundant field:\n      BytesRef terms[] = new BytesRef[fieldTerms.size()];\n      int termUpto = 0;\n      for(Term term : fieldTerms) {\n        terms[termUpto++] = term.bytes();\n      }\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], bi, terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8176b5c0894f97addb4b77198ec5684476b1b32","date":1365103218,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,int[],int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fieldsIn field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassagesIn The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fieldsIn[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassagesIn[]) throws IOException {\n    if (fieldsIn.length < 1) {\n      throw new IllegalArgumentException(\"fieldsIn must not be empty\");\n    }\n    if (fieldsIn.length != maxPassagesIn.length) {\n      throw new IllegalArgumentException(\"invalid number of maxPassagesIn\");\n    }\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    // Make our own copies because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n    final String fields[] = new String[fieldsIn.length];\n    System.arraycopy(fieldsIn, 0, fields, 0, fieldsIn.length);\n    final int maxPassages[] = new int[maxPassagesIn.length];\n    System.arraycopy(maxPassagesIn, 0, maxPassages, 0, maxPassagesIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    new SorterTemplate() {\n      String pivot;\n      \n      @Override\n      protected void swap(int i, int j) {\n        String tmp = fields[i];\n        fields[i] = fields[j];\n        fields[j] = tmp;\n        int tmp2 = maxPassages[i];\n        maxPassages[i] = maxPassages[j];\n        maxPassages[j] = tmp2;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return fields[i].compareTo(fields[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = fields[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(fields[j]);\n      }\n      \n    }.mergeSort(0, fields.length-1);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      int numPassages = maxPassages[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n\n      // Strip off the redundant field:\n      BytesRef terms[] = new BytesRef[fieldTerms.size()];\n      int termUpto = 0;\n      for(Term term : fieldTerms) {\n        terms[termUpto++] = term.bytes();\n      }\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], getBreakIterator(field), terms, docids, leaves, numPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields,\n   * for the provided int[] docids.\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param docidsIn containing the document IDs to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} from the field will\n   *         be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassages) throws IOException {\n    final IndexReader reader = searcher.getIndexReader();\n    query = rewrite(query);\n    SortedSet<Term> queryTerms = new TreeSet<Term>();\n    query.extractTerms(queryTerms);\n\n    IndexReaderContext readerContext = reader.getContext();\n    List<AtomicReaderContext> leaves = readerContext.leaves();\n\n    // Make our own copy because we sort in-place:\n    int[] docids = new int[docidsIn.length];\n    System.arraycopy(docidsIn, 0, docids, 0, docidsIn.length);\n\n    // sort for sequential io\n    Arrays.sort(docids);\n    Arrays.sort(fields);\n    \n    // pull stored data:\n    String[][] contents = loadFieldValues(searcher, fields, docids, maxLength);\n    \n    Map<String,String[]> highlights = new HashMap<String,String[]>();\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      Term floor = new Term(field, \"\");\n      Term ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n      SortedSet<Term> fieldTerms = queryTerms.subSet(floor, ceiling);\n      // TODO: should we have some reasonable defaults for term pruning? (e.g. stopwords)\n\n      // Strip off the redundant field:\n      BytesRef terms[] = new BytesRef[fieldTerms.size()];\n      int termUpto = 0;\n      for(Term term : fieldTerms) {\n        terms[termUpto++] = term.bytes();\n      }\n      Map<Integer,String> fieldHighlights = highlightField(field, contents[i], getBreakIterator(field), terms, docids, leaves, maxPassages);\n        \n      String[] result = new String[docids.length];\n      for (int j = 0; j < docidsIn.length; j++) {\n        result[j] = fieldHighlights.get(docidsIn[j]);\n      }\n      highlights.put(field, result);\n    }\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a385683d8ce32386bb71e8c427cb78573debda2b":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["157d49068cfc35be5fed366f40bc20cbcddea695"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4831dd345148fcd7c33877b449ade21fc45459d8":["3ce1e2e30e484c40cc2c929c6f279a60e36e754b"],"093e8fad7328aef756bbbf01ec3d5c42a7a62211":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ce1e2e30e484c40cc2c929c6f279a60e36e754b":["093e8fad7328aef756bbbf01ec3d5c42a7a62211"],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["603175ca08914b73fa328e1ac07c772f8103ecd0"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["a385683d8ce32386bb71e8c427cb78573debda2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8176b5c0894f97addb4b77198ec5684476b1b32"]},"commit2Childs":{"a385683d8ce32386bb71e8c427cb78573debda2b":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"093e8fad7328aef756bbbf01ec3d5c42a7a62211":["3ce1e2e30e484c40cc2c929c6f279a60e36e754b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["603175ca08914b73fa328e1ac07c772f8103ecd0"],"3ce1e2e30e484c40cc2c929c6f279a60e36e754b":["4831dd345148fcd7c33877b449ade21fc45459d8"],"157d49068cfc35be5fed366f40bc20cbcddea695":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["a385683d8ce32386bb71e8c427cb78573debda2b"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["093e8fad7328aef756bbbf01ec3d5c42a7a62211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}