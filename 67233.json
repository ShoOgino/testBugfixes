{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setRawBytesRef(BytesRef,long).mjava","commits":[{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setRawBytesRef(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the given {@link BytesRef} so that its content is equal to the\n   * {@code ref.length} bytes starting at {@code offset}. Most of the time this\n   * method will set pointers to internal data-structures. However, in case a\n   * value crosses a boundary, a fresh copy will be returned.\n   * On the contrary to {@link #setBytesRef(BytesRef, int)}, this does not\n   * expect the length to be encoded with the data.\n   */\n  public void setRawBytesRef(BytesRef ref, final long offset) {\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + ref.length <= BYTE_BLOCK_SIZE) {\n      ref.bytes = buffers[bufferIndex];\n      ref.offset = pos;\n    } else {\n      ref.bytes = new byte[ref.length];\n      ref.offset = 0;\n      readBytes(offset, ref.bytes, 0, ref.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setRawBytesRef(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the given {@link BytesRef} so that its content is equal to the\n   * {@code ref.length} bytes starting at {@code offset}. Most of the time this\n   * method will set pointers to internal data-structures. However, in case a\n   * value crosses a boundary, a fresh copy will be returned.\n   * On the contrary to {@link #setBytesRef(BytesRef, int)}, this does not\n   * expect the length to be encoded with the data.\n   */\n  public void setRawBytesRef(BytesRef ref, final long offset) {\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + ref.length <= BYTE_BLOCK_SIZE) {\n      ref.bytes = buffers[bufferIndex];\n      ref.offset = pos;\n    } else {\n      ref.bytes = new byte[ref.length];\n      ref.offset = 0;\n      readBytes(offset, ref.bytes, 0, ref.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setRawBytesRef(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the given {@link BytesRef} so that its content is equal to the\n   * {@code ref.length} bytes starting at {@code offset}. Most of the time this\n   * method will set pointers to internal data-structures. However, in case a\n   * value crosses a boundary, a fresh copy will be returned.\n   * On the contrary to {@link #setBytesRef(BytesRef, int)}, this does not\n   * expect the length to be encoded with the data.\n   */\n  public void setRawBytesRef(BytesRef ref, final long offset) {\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + ref.length <= BYTE_BLOCK_SIZE) {\n      ref.bytes = buffers[bufferIndex];\n      ref.offset = pos;\n    } else {\n      ref.bytes = new byte[ref.length];\n      ref.offset = 0;\n      readBytes(offset, ref.bytes, 0, ref.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}