{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1] (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1] (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aa8b576db3a2ef44791da3c24b9d0b61c236c11","date":1359387145,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1] (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1] (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number &gt;=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number >=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number &gt;=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    if (highFreqOccur == Occur.MUST_NOT) {\n      throw new IllegalArgumentException(\n          \"highFreqOccur should be MUST or SHOULD but was MUST_NOT\");\n    }\n    if (lowFreqOccur == Occur.MUST_NOT) {\n      throw new IllegalArgumentException(\n          \"lowFreqOccur should be MUST or SHOULD but was MUST_NOT\");\n    }\n    this.highFreqOccur = highFreqOccur;\n    this.lowFreqOccur = lowFreqOccur;\n    this.maxTermFrequency = maxTermFrequency;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number &gt;=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#CommonTermsQuery(Occur,Occur,float).mjava","sourceNew":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number &gt;=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    if (highFreqOccur == Occur.MUST_NOT) {\n      throw new IllegalArgumentException(\n          \"highFreqOccur should be MUST or SHOULD but was MUST_NOT\");\n    }\n    if (lowFreqOccur == Occur.MUST_NOT) {\n      throw new IllegalArgumentException(\n          \"lowFreqOccur should be MUST or SHOULD but was MUST_NOT\");\n    }\n    this.highFreqOccur = highFreqOccur;\n    this.lowFreqOccur = lowFreqOccur;\n    this.maxTermFrequency = maxTermFrequency;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CommonTermsQuery}\n   * \n   * @param highFreqOccur\n   *          {@link Occur} used for high frequency terms\n   * @param lowFreqOccur\n   *          {@link Occur} used for low frequency terms\n   * @param maxTermFrequency\n   *          a value in [0..1) (or absolute number &gt;=1) representing the\n   *          maximum threshold of a terms document frequency to be considered a\n   *          low frequency term.\n   * @throws IllegalArgumentException\n   *           if {@link Occur#MUST_NOT} is pass as lowFreqOccur or\n   *           highFreqOccur\n   */\n  public CommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur,\n      float maxTermFrequency) {\n    this(highFreqOccur, lowFreqOccur, maxTermFrequency, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"9aa8b576db3a2ef44791da3c24b9d0b61c236c11":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de522d9303bd67c8473a269a1319125d1f3700e0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b1eb427f2c6beed80d1724555fc1db003ccf3030","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["de522d9303bd67c8473a269a1319125d1f3700e0"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9aa8b576db3a2ef44791da3c24b9d0b61c236c11":["b1eb427f2c6beed80d1724555fc1db003ccf3030","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}