{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random.nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random.nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67e5fb3e1a3e5763eb7aabb2ee71d10e8617e699","67e5fb3e1a3e5763eb7aabb2ee71d10e8617e699","67e5fb3e1a3e5763eb7aabb2ee71d10e8617e699"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random.nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random.nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random.nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random.nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random.nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random.nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9411f5e8a82e9ad442310774346d645c9e336f54","date":1342705922,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableIndexingThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableIndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      int i = startI;\n      int numDeletes = 0;\n      int numAdds = 0;\n      \n      while (true && !stop) {\n        ++i;\n        \n        if (doDeletes && random().nextBoolean() && deletes.size() > 0) {\n          Integer delete = deletes.remove(0);\n          try {\n            numDeletes++;\n            controlClient.deleteById(Integer.toString(delete));\n            cloudClient.deleteById(Integer.toString(delete));\n          } catch (Exception e) {\n            System.err.println(\"REQUEST FAILED:\");\n            e.printStackTrace();\n            if (e instanceof SolrServerException) {\n              System.err.println(\"ROOT CAUSE:\");\n              ((SolrServerException) e).getRootCause().printStackTrace();\n            }\n            fails.incrementAndGet();\n          }\n        }\n        \n        try {\n          numAdds++;\n          indexr(id, i, i1, 50, tlong, 50, t1,\n              \"to come to the aid of their country.\");\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        \n        if (doDeletes && random().nextBoolean()) {\n          deletes.add(i);\n        }\n        \n      }\n      \n      System.err.println(\"added docs:\" + numAdds + \" with \" + fails + \" fails\"\n          + \" deletes:\" + numDeletes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9411f5e8a82e9ad442310774346d645c9e336f54"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9411f5e8a82e9ad442310774346d645c9e336f54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9411f5e8a82e9ad442310774346d645c9e336f54":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["9411f5e8a82e9ad442310774346d645c9e336f54"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9411f5e8a82e9ad442310774346d645c9e336f54":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2c30e4c1cee08b3b229a77991882594fe7250b66"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","9411f5e8a82e9ad442310774346d645c9e336f54"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}