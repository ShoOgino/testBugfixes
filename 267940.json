{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","commits":[{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayload() throws IOException {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","sourceNew":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":"  public void testPayload() throws IOException {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","sourceNew":"  public void testPayload() throws IOException {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","sourceNew":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":"  public void testPayload() throws IOException {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","sourceNew":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    List<Api> apis =  apiBag.registerObject(new ApiTest());\n\n    ValidatingJsonMap spec = apis.get(0).getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","sourceOld":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    AnnotatedApi api = new AnnotatedApi(new ApiTest());\n    apiBag.register(api, Collections.emptyMap());\n\n    ValidatingJsonMap spec = api.getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9","date":1593520826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testPayload().mjava","sourceNew":"  public void testPayload() throws IOException {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    List<Api> apis =  apiBag.registerObject(new ApiTest());\n\n    ValidatingJsonMap spec = apis.get(0).getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n    apiBag.registerObject(new C());\n    rsp = v2ApiInvoke(apiBag, \"/path1\", \"POST\", new ModifiableSolrParams(),\n            new ByteArrayInputStream(\"{\\\"package\\\":\\\"mypkg\\\", \\\"version\\\": \\\"1.0\\\", \\\"files\\\" : [\\\"a.jar\\\", \\\"b.jar\\\"]}\".getBytes(UTF_8)));\n    assertEquals(\"mypkg\", rsp.getValues()._getStr(\"payload/package\", null));\n    assertEquals(\"1.0\", rsp.getValues()._getStr(\"payload/version\", null));\n  }\n\n","sourceOld":"  public void testPayload() {\n    String json = \"{package:pkg1, version: '0.1', files  :[a.jar, b.jar]}\";\n    Utils.fromJSONString(json);\n\n    ApiBag apiBag = new ApiBag(false);\n    List<Api> apis =  apiBag.registerObject(new ApiTest());\n\n    ValidatingJsonMap spec = apis.get(0).getSpec();\n\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"POST\", spec._getStr(\"/methods[0]\",null) );\n    assertEquals(\"/cluster/package\", spec._getStr(\"/url/paths[0]\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/package/type\",null) );\n    assertEquals(\"array\", spec._getStr(\"/commands/add/properties/files/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/add/properties/files/items/type\",null) );\n    assertEquals(\"string\", spec._getStr(\"/commands/delete/items/type\",null) );\n    SolrQueryResponse rsp = v2ApiInvoke(apiBag, \"/cluster/package\", \"POST\", new ModifiableSolrParams(),\n        new ByteArrayInputStream(\"{add:{package:mypkg, version: '1.0', files : [a.jar, b.jar]}}\".getBytes(UTF_8)));\n\n\n    AddVersion addversion = (AddVersion) rsp.getValues().get(\"add\");\n    assertEquals(\"mypkg\", addversion.pkg);\n    assertEquals(\"1.0\", addversion.version);\n    assertEquals(\"a.jar\", addversion.files.get(0));\n    assertEquals(\"b.jar\", addversion.files.get(1));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4505d603fb135c5279b5c6b1fc375feeeff582f1"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["0cdbfc1e5714aafb41cabb055936a38ba4db5362","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}