{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery,Sort,int,int,boolean).mjava","commits":[{"id":"5f8965baea012c1e38682d0220c6c4a98b9207b8","date":1363627518,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery,Sort,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the TopGroups for the specified BlockJoinQuery.\n   *  The groupValue of each GroupDocs will be the parent docID for that group.\n   *  The number of documents within each group\n   *  equals to the total number of matched child documents for that group.\n   *  Returns null if no groups matched.\n   *\n   * @param query Search query\n   * @param withinGroupSort Sort criteria within groups\n   * @param offset Parent docs offset\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for specified query\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopGroups<Integer> getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset,\n                                                         int withinGroupOffset, boolean fillSortFields)\n    throws IOException {\n\n    return getTopGroups(query, withinGroupSort, offset, Integer.MAX_VALUE, withinGroupOffset, fillSortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery,Sort,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the TopGroups for the specified BlockJoinQuery.\n   *  The groupValue of each GroupDocs will be the parent docID for that group.\n   *  The number of documents within each group\n   *  equals to the total number of matched child documents for that group.\n   *  Returns null if no groups matched.\n   *\n   * @param query Search query\n   * @param withinGroupSort Sort criteria within groups\n   * @param offset Parent docs offset\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for specified query\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopGroups<Integer> getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset,\n                                                         int withinGroupOffset, boolean fillSortFields)\n    throws IOException {\n\n    return getTopGroups(query, withinGroupSort, offset, Integer.MAX_VALUE, withinGroupOffset, fillSortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery,Sort,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the TopGroups for the specified BlockJoinQuery.\n   *  The groupValue of each GroupDocs will be the parent docID for that group.\n   *  The number of documents within each group\n   *  equals to the total number of matched child documents for that group.\n   *  Returns null if no groups matched.\n   *\n   * @param query Search query\n   * @param withinGroupSort Sort criteria within groups\n   * @param offset Parent docs offset\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for specified query\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopGroups<Integer> getTopGroupsWithAllChildDocs(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset,\n                                                         int withinGroupOffset, boolean fillSortFields)\n    throws IOException {\n\n    return getTopGroups(query, withinGroupSort, offset, Integer.MAX_VALUE, withinGroupOffset, fillSortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f8965baea012c1e38682d0220c6c4a98b9207b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5f8965baea012c1e38682d0220c6c4a98b9207b8","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"]},"commit2Childs":{"5f8965baea012c1e38682d0220c6c4a98b9207b8":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}