{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final FieldInfo fieldInfo = readerContext.reader().getFieldInfos().fieldInfo(field);\n\n    // To be sorted or not to be sorted, that is the question\n    // TODO: do it cleaner?\n    if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n      final BinaryDocValues binaryValues = DocValues.getBinary(readerContext.reader(), field);\n      return new FunctionValues() {\n        int lastDocID = -1;\n\n        private BytesRef getValueForDoc(int doc) throws IOException {\n          if (doc < lastDocID) {\n            throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n          }\n          lastDocID = doc;\n          int curDocID = binaryValues.docID();\n          if (doc > curDocID) {\n            curDocID = binaryValues.advance(doc);\n          }\n          if (doc == curDocID) {\n            return binaryValues.binaryValue();\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return getValueForDoc(doc) != null;\n        }\n\n        @Override\n        public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n          BytesRef value = getValueForDoc(doc);\n          if (value == null || value.length == 0) {\n            return false;\n          } else {\n            target.copyBytes(value);\n            return true;\n          }\n        }\n\n        public String strVal(int doc) throws IOException {\n          final BytesRefBuilder bytes = new BytesRefBuilder();\n          return bytesVal(doc, bytes)\n              ? bytes.get().utf8ToString()\n              : null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          return strVal(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return description() + '=' + strVal(doc);\n        }\n\n        @Override\n        public ValueFiller getValueFiller() {\n          return new ValueFiller() {\n            private final MutableValueStr mval = new MutableValueStr();\n\n            @Override\n            public MutableValue getValue() {\n              return mval;\n            }\n\n            @Override\n            public void fillValue(int doc) throws IOException {\n              BytesRef value = getValueForDoc(doc);\n              mval.exists = value != null;\n              mval.value.clear();\n              if (value != null) {\n                mval.value.copyBytes(value);\n              }\n            }\n          };\n        }\n\n      };\n    } else {\n      return new DocTermsIndexDocValues(this, readerContext, field) {\n\n        @Override\n        protected String toTerm(String readableValue) {\n          return readableValue;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          return strVal(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return description() + '=' + strVal(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FieldInfo fieldInfo = readerContext.reader().getFieldInfos().fieldInfo(field);\n\n    // To be sorted or not to be sorted, that is the question\n    // TODO: do it cleaner?\n    if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n      final BinaryDocValues binaryValues = DocValues.getBinary(readerContext.reader(), field);\n      return new FunctionValues() {\n        int lastDocID = -1;\n\n        private BytesRef getValueForDoc(int doc) throws IOException {\n          if (doc < lastDocID) {\n            throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n          }\n          lastDocID = doc;\n          int curDocID = binaryValues.docID();\n          if (doc > curDocID) {\n            curDocID = binaryValues.advance(doc);\n          }\n          if (doc == curDocID) {\n            return binaryValues.binaryValue();\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return getValueForDoc(doc) != null;\n        }\n\n        @Override\n        public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n          BytesRef value = getValueForDoc(doc);\n          if (value == null || value.length == 0) {\n            return false;\n          } else {\n            target.copyBytes(value);\n            return true;\n          }\n        }\n\n        public String strVal(int doc) throws IOException {\n          final BytesRefBuilder bytes = new BytesRefBuilder();\n          return bytesVal(doc, bytes)\n              ? bytes.get().utf8ToString()\n              : null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          return strVal(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return description() + '=' + strVal(doc);\n        }\n\n        @Override\n        public ValueFiller getValueFiller() {\n          return new ValueFiller() {\n            private final MutableValueStr mval = new MutableValueStr();\n\n            @Override\n            public MutableValue getValue() {\n              return mval;\n            }\n\n            @Override\n            public void fillValue(int doc) throws IOException {\n              BytesRef value = getValueForDoc(doc);\n              mval.exists = value != null;\n              mval.value.clear();\n              if (value != null) {\n                mval.value.copyBytes(value);\n              }\n            }\n          };\n        }\n\n      };\n    } else {\n      return new DocTermsIndexDocValues(this, readerContext, field) {\n\n        @Override\n        protected String toTerm(String readableValue) {\n          return readableValue;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          return strVal(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return description() + '=' + strVal(doc);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}