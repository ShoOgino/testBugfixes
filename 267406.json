{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.getUniqueTermCount() != -1 && rightTerms.getUniqueTermCount() != -1) {\n      assertEquals(info, leftTerms.getUniqueTermCount(), rightTerms.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.getUniqueTermCount() != -1 && rightTerms.getUniqueTermCount() != -1) {\n      assertEquals(info, leftTerms.getUniqueTermCount(), rightTerms.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.getUniqueTermCount() != -1 && rightTerms.getUniqueTermCount() != -1) {\n      assertEquals(info, leftTerms.getUniqueTermCount(), rightTerms.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.getUniqueTermCount() != -1 && rightTerms.getUniqueTermCount() != -1) {\n      assertEquals(info, leftTerms.getUniqueTermCount(), rightTerms.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5a238fc456663f685a9db1ed8d680e348bb45171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","51c8450b3b616b6777f722ff4083c0bf946381a2"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}