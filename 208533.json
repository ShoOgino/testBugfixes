{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","commits":[{"id":"934b4ca72f2233e78e1bbe05032587866628d906","date":1396635055,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        synchronized (cleanupQueue) {\n          File [] everything = new File [cleanupQueue.size()];\n          for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n            everything[i] = cleanupQueue.removeLast();\n          }\n\n          // Will throw an IOException on un-removable files.\n          try {\n            TestUtil.rm(everything);\n          } catch (IOException e) {\n            Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n            if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n              System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                  + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                  + e.getMessage());\n              return;\n            }\n            throw e;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        synchronized (cleanupQueue) {\n          File [] everything = new File [cleanupQueue.size()];\n          for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n            everything[i] = cleanupQueue.removeLast();\n          }\n\n          // Will throw an IOException on un-removable files.\n          try {\n            TestUtil.rm(everything);\n          } catch (IOException e) {\n            Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n            if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n              System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                  + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                  + e.getMessage());\n              return;\n            }\n            throw e;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d46e85f140f3f95fdd200dac5ba641339dd171d9","date":1396694312,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","sourceNew":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        synchronized (cleanupQueue) {\n          File [] everything = new File [cleanupQueue.size()];\n          for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n            everything[i] = cleanupQueue.removeLast();\n          }\n\n          // Will throw an IOException on un-removable files.\n          try {\n            TestUtil.rm(everything);\n          } catch (IOException e) {\n            Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n            if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n              System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                  + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                  + e.getMessage());\n              return;\n            }\n            throw e;\n          }\n        }\n      } else {\n        synchronized (cleanupQueue) {\n          if (tempDirBase != null) {\n            System.err.println(\"NOTE: leaving temporary files on disk at: \" +\n                tempDirBase.getAbsolutePath());\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        synchronized (cleanupQueue) {\n          File [] everything = new File [cleanupQueue.size()];\n          for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n            everything[i] = cleanupQueue.removeLast();\n          }\n\n          // Will throw an IOException on un-removable files.\n          try {\n            TestUtil.rm(everything);\n          } catch (IOException e) {\n            Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n            if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n              System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                  + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                  + e.getMessage());\n              return;\n            }\n            throw e;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b","date":1396698322,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","sourceNew":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      try {\n        if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n          synchronized (cleanupQueue) {\n            File [] everything = new File [cleanupQueue.size()];\n            for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n              everything[i] = cleanupQueue.removeLast();\n            }\n  \n            // Will throw an IOException on un-removable files.\n            try {\n              TestUtil.rm(everything);\n            } catch (IOException e) {\n              Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n              if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n                System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                    + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                    + e.getMessage());\n                return;\n              }\n              throw e;\n            }\n          }\n        } else {\n          synchronized (cleanupQueue) {\n            if (tempDirBase != null) {\n              System.err.println(\"NOTE: leaving temporary files on disk at: \" +\n                  tempDirBase.getAbsolutePath());\n            }\n          }\n        }\n      } finally {\n        tempDirBase = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        synchronized (cleanupQueue) {\n          File [] everything = new File [cleanupQueue.size()];\n          for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n            everything[i] = cleanupQueue.removeLast();\n          }\n\n          // Will throw an IOException on un-removable files.\n          try {\n            TestUtil.rm(everything);\n          } catch (IOException e) {\n            Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n            if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n              System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                  + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                  + e.getMessage());\n              return;\n            }\n            throw e;\n          }\n        }\n      } else {\n        synchronized (cleanupQueue) {\n          if (tempDirBase != null) {\n            System.err.println(\"NOTE: leaving temporary files on disk at: \" +\n                tempDirBase.getAbsolutePath());\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c","date":1397143885,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","sourceNew":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      // Drain cleanup queue and clear it.\n      final File [] everything;\n      final String tempDirBasePath;\n      synchronized (cleanupQueue) {\n        tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n        tempDirBase = null;\n\n        Collections.reverse(cleanupQueue);\n        everything = new File [cleanupQueue.size()];\n        cleanupQueue.toArray(everything);\n        cleanupQueue.clear();\n      }\n\n      // Only check and throw an IOException on un-removable files if the test\n      // was successful. Otherwise just report the path of temporary files\n      // and leave them there.\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        try {\n          TestUtil.rm(everything);\n        } catch (IOException e) {\n          Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n          if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n            System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                + e.getMessage());\n            return;\n          }\n          throw e;\n        }\n      } else {\n        if (tempDirBasePath != null) {\n          System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      try {\n        if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n          synchronized (cleanupQueue) {\n            File [] everything = new File [cleanupQueue.size()];\n            for (int i = 0; !cleanupQueue.isEmpty(); i++) {\n              everything[i] = cleanupQueue.removeLast();\n            }\n  \n            // Will throw an IOException on un-removable files.\n            try {\n              TestUtil.rm(everything);\n            } catch (IOException e) {\n              Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n              if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n                System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                    + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                    + e.getMessage());\n                return;\n              }\n              throw e;\n            }\n          }\n        } else {\n          synchronized (cleanupQueue) {\n            if (tempDirBase != null) {\n              System.err.println(\"NOTE: leaving temporary files on disk at: \" +\n                  tempDirBase.getAbsolutePath());\n            }\n          }\n        }\n      } finally {\n        tempDirBase = null;\n      }\n    }\n\n","bugFix":["934b4ca72f2233e78e1bbe05032587866628d906","20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      // Drain cleanup queue and clear it.\n      final File [] everything;\n      final String tempDirBasePath;\n      synchronized (cleanupQueue) {\n        tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n        tempDirBase = null;\n\n        Collections.reverse(cleanupQueue);\n        everything = new File [cleanupQueue.size()];\n        cleanupQueue.toArray(everything);\n        cleanupQueue.clear();\n      }\n\n      // Only check and throw an IOException on un-removable files if the test\n      // was successful. Otherwise just report the path of temporary files\n      // and leave them there.\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        try {\n          TestUtil.rm(everything);\n        } catch (IOException e) {\n          Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n          if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n            System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                + e.getMessage());\n            return;\n          }\n          throw e;\n        }\n      } else {\n        if (tempDirBasePath != null) {\n          System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.TemporaryFilesCleanupRule#afterAlways(List[Throwable]).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void afterAlways(List<Throwable> errors) throws Throwable {\n      // Drain cleanup queue and clear it.\n      final File [] everything;\n      final String tempDirBasePath;\n      synchronized (cleanupQueue) {\n        tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n        tempDirBase = null;\n\n        Collections.reverse(cleanupQueue);\n        everything = new File [cleanupQueue.size()];\n        cleanupQueue.toArray(everything);\n        cleanupQueue.clear();\n      }\n\n      // Only check and throw an IOException on un-removable files if the test\n      // was successful. Otherwise just report the path of temporary files\n      // and leave them there.\n      if (LuceneTestCase.suiteFailureMarker.wasSuccessful()) {\n        try {\n          TestUtil.rm(everything);\n        } catch (IOException e) {\n          Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n          if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n            System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n                + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n                + e.getMessage());\n            return;\n          }\n          throw e;\n        }\n      } else {\n        if (tempDirBasePath != null) {\n          System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934b4ca72f2233e78e1bbe05032587866628d906":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934b4ca72f2233e78e1bbe05032587866628d906"],"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c":["20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b":["d46e85f140f3f95fdd200dac5ba641339dd171d9"],"b7605579001505896d48b07160075a5c8b8e128e":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"],"d46e85f140f3f95fdd200dac5ba641339dd171d9":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"]},"commit2Childs":{"934b4ca72f2233e78e1bbe05032587866628d906":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["d46e85f140f3f95fdd200dac5ba641339dd171d9"],"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934b4ca72f2233e78e1bbe05032587866628d906","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"d46e85f140f3f95fdd200dac5ba641339dd171d9":["20d3bf82455b40c52ea28f4b65a6f4fdfda17d4b"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}