{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Edge[],int,int).mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Edge[],int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#createTree(Edge[],int,int).mjava","sourceNew":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Edge[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(Edge[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Edge[],int,int).mjava","sourceNew":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"e4fccad460342b1af30cb328cc8297751a218d78":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4fccad460342b1af30cb328cc8297751a218d78"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}