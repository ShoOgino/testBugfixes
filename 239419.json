{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","date":1362244723,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      LightAutomaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenateLight(automaton, BasicAutomata.makeCharLight(factory.getMarkerChar()));\n        automaton = SpecialOperations.reverse(automaton);\n        // nocommit why did i have to insert det here?  reverse didn't det before\n        automaton = BasicOperations.determinize(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        LightAutomaton falsePositives = BasicOperations.concatenateLight(\n            BasicAutomata.makeCharLight(factory.getMarkerChar()),\n            BasicAutomata.makeAnyStringLight());\n        // subtract these away\n        automaton = BasicOperations.minusLight(automaton, falsePositives);\n        // nocommit and do i need to det here?\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91969cc03a4f4b731d4a2ba991fdc9f1119a104e","date":1402602795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      LightAutomaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenateLight(automaton, BasicAutomata.makeCharLight(factory.getMarkerChar()));\n        automaton = SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        LightAutomaton falsePositives = BasicOperations.concatenateLight(\n            BasicAutomata.makeCharLight(factory.getMarkerChar()),\n            BasicAutomata.makeAnyStringLight());\n        // subtract these away\n        automaton = BasicOperations.minusLight(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      LightAutomaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenateLight(automaton, BasicAutomata.makeCharLight(factory.getMarkerChar()));\n        automaton = SpecialOperations.reverse(automaton);\n        // nocommit why did i have to insert det here?  reverse didn't det before\n        automaton = BasicOperations.determinize(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        LightAutomaton falsePositives = BasicOperations.concatenateLight(\n            BasicAutomata.makeCharLight(factory.getMarkerChar()),\n            BasicAutomata.makeAnyStringLight());\n        // subtract these away\n        automaton = BasicOperations.minusLight(automaton, falsePositives);\n        // nocommit and do i need to det here?\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      LightAutomaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenateLight(automaton, BasicAutomata.makeCharLight(factory.getMarkerChar()));\n        automaton = SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        LightAutomaton falsePositives = BasicOperations.concatenateLight(\n            BasicAutomata.makeCharLight(factory.getMarkerChar()),\n            BasicAutomata.makeAnyStringLight());\n        // subtract these away\n        automaton = BasicOperations.minusLight(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        // '*:*' and '*' -> MatchAllDocsQuery\n        return newMatchAllDocsQuery();\n      } else {\n        // 'foo:*' -> empty prefix query\n        return getPrefixQuery(field, \"\");\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        // '*:*' and '*' -> MatchAllDocsQuery\n        return newMatchAllDocsQuery();\n      } else {\n        // 'foo:*' -> empty prefix query\n        return getPrefixQuery(field, \"\");\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        // '*:*' and '*' -> MatchAllDocsQuery\n        return newMatchAllDocsQuery();\n      } else {\n        // 'foo:*' -> empty prefix query\n        return getPrefixQuery(field, \"\");\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        // '*:*' and '*' -> MatchAllDocsQuery\n        return newMatchAllDocsQuery();\n      } else {\n        // 'foo:*' -> empty prefix query\n        return getPrefixQuery(field, \"\");\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        // '*:*' and '*' -> MatchAllDocsQuery\n        return newMatchAllDocsQuery();\n      } else {\n        // 'foo:*' -> existenceQuery\n        return getExistenceQuery(field);\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(termStr)) {\n      if (\"*\".equals(field) || getExplicitField() == null) {\n        return newMatchAllDocsQuery();\n      }\n    }\n\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = Operations.concatenate(automaton, Automata.makeChar(factory.getMarkerChar()));\n        automaton = Operations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = Operations.concatenate(\n            Automata.makeChar(factory.getMarkerChar()),\n            Automata.makeAnyString());\n        // subtract these away\n        automaton = Operations.minus(automaton, falsePositives, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so it's completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"91969cc03a4f4b731d4a2ba991fdc9f1119a104e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["2dfdf766e55e943d942055d7de53c7ad6bc45283","0c81907bd971f786e378654d32b80da32b0e950d"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"0c81907bd971f786e378654d32b80da32b0e950d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["91969cc03a4f4b731d4a2ba991fdc9f1119a104e"],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["3cdb67100dc016748799a77218aa409478372d79"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c84485629d80d203608e8975a1139de9933cc38":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","0c81907bd971f786e378654d32b80da32b0e950d"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["91969cc03a4f4b731d4a2ba991fdc9f1119a104e"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"91969cc03a4f4b731d4a2ba991fdc9f1119a104e":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}