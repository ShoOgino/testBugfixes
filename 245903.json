{"path":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","commits":[{"id":"2148dc6e2b0f2117ae887c0397378d86567916b0","date":1368393817,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<Query>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<BooleanClause>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    return newq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46574f1283bd72a3f5d401f2e93b1d24c905c73","date":1369742953,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<Query>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<BooleanClause>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","sourceOld":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<Query>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<BooleanClause>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    return newq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","sourceOld":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<Query>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<BooleanClause>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","sourceOld":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br/>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","bugFix":["2148dc6e2b0f2117ae887c0397378d86567916b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery.Builder newqb = new BooleanQuery.Builder();\n\n    for (BooleanClause clause : obq) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(clause);\n        should.add(bq.build());\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newqb.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newqb.add(c);\n    }\n    Query newq = newqb.build();\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","sourceOld":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery newq = new BooleanQuery();\n\n    for (BooleanClause clause : obq.getClauses()) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(clause);\n        should.add(bq);\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newq.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newq.add(c);\n    }\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/MaxScoreQParser#parse().mjava","sourceNew":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    float boost = 1f;\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    if (q instanceof BooleanQuery == false) {\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery.Builder newqb = new BooleanQuery.Builder();\n\n    for (BooleanClause clause : obq) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(clause);\n        should.add(bq.build());\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newqb.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newqb.add(c);\n    }\n    Query newq = newqb.build();\n    if (boost != 1f) {\n      newq = new BoostQuery(newq, boost);\n    }\n    return newq;\n  }\n\n","sourceOld":"  /**\n   * Parses the query exactly like the Lucene parser does, but\n   * delegates all SHOULD clauses to DisjunctionMaxQuery with\n   * meaning only the clause with the max score will contribute\n   * to the overall score, unless the tie parameter is specified.\n   * <br>\n   * The max() is only calculated from the SHOULD clauses.\n   * Any MUST clauses will be passed through as separate\n   * BooleanClauses and thus always contribute to the score.\n   * @return the resulting Query\n   * @throws org.apache.solr.search.SyntaxError if parsing fails\n   */\n  @Override\n  public Query parse() throws SyntaxError {\n    Query q = super.parse();\n    if (!(q instanceof BooleanQuery)) {\n      return q;\n    }\n    BooleanQuery obq = (BooleanQuery)q;\n    Collection<Query> should = new ArrayList<>();\n    Collection<BooleanClause> prohibOrReq = new ArrayList<>();\n    BooleanQuery.Builder newqb = new BooleanQuery.Builder();\n\n    for (BooleanClause clause : obq) {\n      if(clause.isProhibited() || clause.isRequired()) {\n        prohibOrReq.add(clause);\n      } else {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(clause);\n        should.add(bq.build());\n      }\n    }\n    if (should.size() > 0) {\n      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);\n      newqb.add(dmq, BooleanClause.Occur.SHOULD);\n    }\n    for(BooleanClause c : prohibOrReq) {\n      newqb.add(c);\n    }\n    Query newq = newqb.build();\n    newq.setBoost(obq.getBoost());\n    return newq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["2148dc6e2b0f2117ae887c0397378d86567916b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2148dc6e2b0f2117ae887c0397378d86567916b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2148dc6e2b0f2117ae887c0397378d86567916b0"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2148dc6e2b0f2117ae887c0397378d86567916b0":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}