{"path":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    for (int mode = 0; mode < 2; mode++) {\n      boolean old = (mode==0);\n      \n      ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null, old);\n  \n      Hits hits = searcher.search(query, chain);\n      assertEquals(MAX, hits.length());\n  \n      chain = new ChainedFilter(new Filter[] {bobFilter});\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"bob\", hits.doc(0).get(\"owner\"));\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"sue\", hits.doc(0).get(\"owner\"));\n    }\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    for (int mode = 0; mode < 2; mode++) {\n      boolean old = (mode==0);\n      \n      ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null, old);\n  \n      Hits hits = searcher.search(query, chain);\n      assertEquals(MAX, hits.length());\n  \n      chain = new ChainedFilter(new Filter[] {bobFilter});\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"bob\", hits.doc(0).get(\"owner\"));\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"sue\", hits.doc(0).get(\"owner\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    for (int mode = 0; mode < 2; mode++) {\n      boolean old = (mode==0);\n      \n      ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null, old);\n  \n      int numHits = searcher.search(query, chain, 1000).totalHits;\n      assertEquals(MAX, numHits);\n  \n      chain = new ChainedFilter(new Filter[] {bobFilter});\n      numHits = searcher.search(query, chain, 1000).totalHits;\n      assertEquals(MAX / 2, numHits);\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND}, old);\n      TopDocs hits = searcher.search(query, chain, 1000);\n      numHits = hits.totalHits;\n      assertEquals(MAX / 2, numHits);\n      assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT}, old);\n      hits = searcher.search(query, chain, 1000);\n      numHits = hits.totalHits;\n      assertEquals(MAX / 2, numHits);\n      assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    }\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    for (int mode = 0; mode < 2; mode++) {\n      boolean old = (mode==0);\n      \n      ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null, old);\n  \n      Hits hits = searcher.search(query, chain);\n      assertEquals(MAX, hits.length());\n  \n      chain = new ChainedFilter(new Filter[] {bobFilter});\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"bob\", hits.doc(0).get(\"owner\"));\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT}, old);\n      hits = searcher.search(query, chain);\n      assertEquals(MAX / 2, hits.length());\n      assertEquals(\"sue\", hits.doc(0).get(\"owner\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    for (int mode = 0; mode < 2; mode++) {\n      boolean old = (mode==0);\n      \n      ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null, old);\n  \n      int numHits = searcher.search(query, chain, 1000).totalHits;\n      assertEquals(MAX, numHits);\n  \n      chain = new ChainedFilter(new Filter[] {bobFilter});\n      numHits = searcher.search(query, chain, 1000).totalHits;\n      assertEquals(MAX / 2, numHits);\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND}, old);\n      TopDocs hits = searcher.search(query, chain, 1000);\n      numHits = hits.totalHits;\n      assertEquals(MAX / 2, numHits);\n      assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n      \n      chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT}, old);\n      hits = searcher.search(query, chain, 1000);\n      numHits = hits.totalHits;\n      assertEquals(MAX / 2, numHits);\n      assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}