{"path":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","commits":[{"id":"44f454868e9b8acdf5a05cb2349e0d878aaf851a","date":1363219866,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"A5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CopyFieldTest#testExplicitSourceGlob().mjava","sourceNew":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitSourceGlob()\n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    \n    assertTrue(\"schema should contain explicit field 'sku1'\", schema.getFields().containsKey(\"sku1\"));\n    assertTrue(\"schema should contain explicit field 'sku2'\", schema.getFields().containsKey(\"sku2\"));\n    assertNull(\"'sku*' should not be (or match) a dynamic field\", schema.getDynamicPattern(\"sku*\"));\n    \n    assertTrue(\"schema should contain dynamic field '*_s'\", schema.getDynamicPattern(\"*_s\").equals(\"*_s\"));\n\n    final String subsetPattern = \"*_dest_sub_s\";\n    final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern);\n    assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",\n               dynamicPattern1.equals(\"*_s\"));\n    \n    final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\";\n    assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s)); // Should not be an explicit field\n    final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s);\n    assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",\n               dynamicPattern2.equals(\"*_s\"));\n    \n    assertU(adoc(\"id\", \"5\", \"sku1\", \"10-1839ACX-93\", \"sku2\", \"AAM46\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"text:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to text\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to dynamic dest *_s\", req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/int[@name='id'][.='5']\"\n        ,\"//result/doc[1]/arr[@name='sku1']/str[.='10-1839ACX-93']\"\n    );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"1_dest_sub_s:10-1839ACX-93\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\", req\n        ,\"//*[@numFound='1']\");\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dest_sub_no_ast_s:AAM46\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\", req\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"44f454868e9b8acdf5a05cb2349e0d878aaf851a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2106271e380c198349e0f6eac0395bb462913fab"],"28288370235ed02234a64753cdbf0c6ec096304a":["2106271e380c198349e0f6eac0395bb462913fab","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2106271e380c198349e0f6eac0395bb462913fab","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"08970e5b8411182a29412c177eff67ec1110095b":["44f454868e9b8acdf5a05cb2349e0d878aaf851a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2106271e380c198349e0f6eac0395bb462913fab"],"44f454868e9b8acdf5a05cb2349e0d878aaf851a":["08970e5b8411182a29412c177eff67ec1110095b"],"2106271e380c198349e0f6eac0395bb462913fab":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44f454868e9b8acdf5a05cb2349e0d878aaf851a"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}