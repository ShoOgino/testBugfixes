{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactoryTest[TestCommonGramsQueryFilterFactory]#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsQueryFilterFactoryTest#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    CommonGramsQueryFilterFactory factory = (CommonGramsQueryFilterFactory) tokenFilterFactory(\"CommonGramsQuery\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    CommonGramsQueryFilterFactory factory = (CommonGramsQueryFilterFactory) tokenFilterFactory(\"CommonGramsQuery\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = whitespaceMockTokenizer(\"testing the factory\");\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    CommonGramsQueryFilterFactory factory = (CommonGramsQueryFilterFactory) tokenFilterFactory(\"CommonGramsQuery\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","280bf88d9ed3d9923e393961b594d9553970e4fd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}