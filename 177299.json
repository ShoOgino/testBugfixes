{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}