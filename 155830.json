{"path":"backwards/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}