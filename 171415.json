{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":0,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode rangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode lowerNode = (ParametricQueryNode) rangeNode.getLowerBound();\n      ParametricQueryNode upperNode = (ParametricQueryNode) rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode rangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode lowerNode = (FieldQueryNode) rangeNode.getLowerBound();\n      FieldQueryNode upperNode = (FieldQueryNode) rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode rangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode lowerNode = (ParametricQueryNode) rangeNode.getLowerBound();\n      ParametricQueryNode upperNode = (ParametricQueryNode) rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode rangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode lowerNode = rangeNode.getLowerBound();\n      FieldQueryNode upperNode = rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode rangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode lowerNode = (FieldQueryNode) rangeNode.getLowerBound();\n      FieldQueryNode upperNode = (FieldQueryNode) rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode rangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode lowerNode = rangeNode.getLowerBound();\n      FieldQueryNode upperNode = rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode rangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode lowerNode = rangeNode.getLowerBound();\n      FieldQueryNode upperNode = rangeNode.getUpperBound();\n      CharSequence lowerText = lowerNode.getText();\n      CharSequence upperText = upperNode.getText();\n      \n      if (OPEN_RANGE_TOKEN.equals(upperNode.getTextAsString())\n          && (!(upperText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) upperText)\n              .wasEscaped(0))) {\n        upperText = \"\";\n      }\n      \n      if (OPEN_RANGE_TOKEN.equals(lowerNode.getTextAsString())\n          && (!(lowerText instanceof UnescapedCharSequence) || !((UnescapedCharSequence) lowerText)\n              .wasEscaped(0))) {\n        lowerText = \"\";\n      }\n      \n      lowerNode.setText(lowerText);\n      upperNode.setText(upperText);\n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}