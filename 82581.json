{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new PointVectorStrategy(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new BBoxStrategy(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new PointVectorStrategy(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new BBoxStrategy(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new PointVectorStrategy(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new BBoxStrategy(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new PointVectorStrategy(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new BBoxStrategy(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new PointVectorStrategy(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new BBoxStrategy(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":["6bc1e76fdb8a9952244528f098da956d2f52acec","28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/DistanceStrategyTest#parameters().mjava","sourceNew":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","sourceOld":"  @ParametersFactory(argumentFormatting = \"strategy=%s\")\n  public static Iterable<Object[]> parameters() {\n    List<Object[]> ctorArgs = new ArrayList<>();\n\n    SpatialContext ctx = SpatialContext.GEO;\n    SpatialPrefixTree grid;\n    SpatialStrategy strategy;\n\n    grid = new QuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_quad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new GeohashPrefixTree(ctx,12);\n    strategy = new TermQueryPrefixTreeStrategy(grid, \"termquery_geohash\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    grid = new PackedQuadPrefixTree(ctx,25);\n    strategy = new RecursivePrefixTreeStrategy(grid, \"recursive_packedquad\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = PointVectorStrategy.newInstance(ctx, \"pointvector\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n//  Can't test this without un-inverting since PVS legacy config didn't have docValues.\n//    However, note that Solr's tests use UninvertingReader and thus test this.\n//    strategy = PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\");\n//    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newInstance(ctx, \"bbox\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    strategy = new SerializedDVStrategy(ctx, \"serialized\");\n    ctorArgs.add(new Object[]{strategy.getFieldName(), strategy});\n\n    return ctorArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["af2638813028b254a88b418ebeafb541afb49653"],"a178ac3dec643551e66363c457a9074f55545f86":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"af2638813028b254a88b418ebeafb541afb49653":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}