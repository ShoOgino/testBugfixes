{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","sourceNew":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (AtomicReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (AtomicReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","sourceNew":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (AtomicReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (AtomicReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOldVersions().mjava","sourceNew":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (LeafReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Test that we didn't forget to bump the current Constants.LUCENE_MAIN_VERSION.\n   * This is important so that we can determine which version of lucene wrote the segment.\n   */\n  public void testOldVersions() throws Exception {\n    // first create a little index with the current code and get the version\n    Directory currentDir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);\n    riw.addDocument(new Document());\n    riw.close();\n    DirectoryReader ir = DirectoryReader.open(currentDir);\n    SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();\n    Version currentVersion = air.getSegmentInfo().info.getVersion();\n    assertNotNull(currentVersion); // only 3.0 segments can have a null version\n    ir.close();\n    currentDir.close();\n    \n    // now check all the old indexes, their version should be < the current version\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      DirectoryReader r = DirectoryReader.open(dir);\n      for (AtomicReaderContext context : r.leaves()) {\n        air = (SegmentReader) context.reader();\n        Version oldVersion = air.getSegmentInfo().info.getVersion();\n        assertNotNull(oldVersion); // only 3.0 segments can have a null version\n        assertTrue(\"current Version.LATEST is <= an old index: did you forget to bump it?!\",\n                   currentVersion.onOrAfter(oldVersion));\n      }\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}