{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20459fa16fd43975af90f1c6ba6894eb74800065","date":1341839561,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // not a date\n        Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n        if (analyzer != null) {\n          // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n          part1 = analyzer.normalize(lower.getFieldAsString(), part1).utf8ToString();\n          part2 = analyzer.normalize(lower.getFieldAsString(), part2).utf8ToString();\n          lower.setText(part1);\n          upper.setText(part2);\n        }\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // not a date\n        Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n        if (analyzer != null) {\n          // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n          part1 = analyzer.normalize(lower.getFieldAsString(), part1).utf8ToString();\n          part2 = analyzer.normalize(lower.getFieldAsString(), part2).utf8ToString();\n          lower.setText(part1);\n          upper.setText(part2);\n        }\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      TimeZone timeZone = getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);\n      \n      if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(timeZone, locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20459fa16fd43975af90f1c6ba6894eb74800065":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","20459fa16fd43975af90f1c6ba6894eb74800065"],"ea4107f60b9f95623c16025c9c247412ff809092":["2acf500f78aa12b92e371fd89c719291986b6b90"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2acf500f78aa12b92e371fd89c719291986b6b90","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","20459fa16fd43975af90f1c6ba6894eb74800065","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"20459fa16fd43975af90f1c6ba6894eb74800065":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46d8ada1fff8d18cb197c38c7983225162599948"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}