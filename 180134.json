{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.getCategoryPath().toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.getCategoryPath().toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.getCategoryPath().toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.getCategoryPath().toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.numResults);\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.getNumResults());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[FacetLabel,Integer],List[FacetResult]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<FacetLabel, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.numResults);\n    }\n  }\n\n","sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.numResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertCountsAndCardinality(Map[CategoryPath,Integer],List[FacetResult]).mjava","sourceNew":null,"sourceOld":"  /** Validate counts for returned facets, and that there are not too many results */\n  protected static void assertCountsAndCardinality(Map<CategoryPath, Integer> facetCountsTruth, List<FacetResult> facetResults) throws Exception {\n    for (FacetResult fr : facetResults) {\n      FacetResultNode topResNode = fr.getFacetResultNode();\n      FacetRequest freq = fr.getFacetRequest();\n      if (VERBOSE) {\n        System.out.println(freq.categoryPath.toString()+ \"\\t\\t\" + topResNode);\n      }\n      assertCountsAndCardinality(facetCountsTruth, topResNode, freq.numResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}