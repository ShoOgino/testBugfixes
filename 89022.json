{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","sourceNew":"  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","sourceNew":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","sourceNew":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333, 1333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","sourceNew":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333, 1333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanExactNested().mjava","sourceNew":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333, 1333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanExactNested() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {near1, near2},\n                                            0, true);\n\n    checkHits(query, new int[] {333, 1333});\n\n    assertTrue(searcher.explain(query, 333).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","150488c1317972164a9a824be05b1ba2ba0fc68c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}