{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","commits":[{"id":"34127d6b305c3e200d697bfcb58e639d65250c6f","date":1457034866,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminResponse rsp = new CollectionAdminRequest.Create()\n        .setCollectionName(\"deleteshard_test\")\n        .setRouterName(\"implicit\")\n        .setShards(\"a,b,c\")\n        .setReplicationFactor(1)\n        .setConfigName(\"conf1\")\n        .process(cloudClient);\n\n    // Get replica details\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"a\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    assertEquals(3, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n\n    // Delete shard 'a'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"a\")\n        .process(cloudClient);\n\n    assertEquals(2, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n\n    leader = cloudClient.getZkStateReader().getLeaderRetry(\"deleteshard_test\", \"b\");\n    baseUrl = (String) leader.get(\"base_url\");\n    core = (String) leader.get(\"core\");\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    // Delete shard 'b'\n    new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(\"deleteshard_test\")\n        .setShardName(\"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cloudClient);\n\n    assertEquals(1, cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"deleteshard_test\").size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 3, 3);\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n    \n    waitForState(\"Expected 'a' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"a\") == null;\n    });\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected 'b' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"b\") == null;\n    });\n    \n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#testDirectoryCleanupAfterDeleteShard().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 3, 3);\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n    \n    waitForState(\"Expected 'a' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"a\") == null;\n    });\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected 'b' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"b\") == null;\n    });\n    \n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testDirectoryCleanupAfterDeleteShard() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"deleteshard_test\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 3, 3);\n\n    // Get replica details\n    Replica leader = getCollectionState(collection).getLeader(\"a\");\n\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory doesn't exist\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    assertEquals(3, getCollectionState(collection).getActiveSlices().size());\n\n    // Delete shard 'a'\n    CollectionAdminRequest.deleteShard(collection, \"a\").process(cluster.getSolrClient());\n    \n    waitForState(\"Expected 'a' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"a\") == null;\n    });\n\n    assertEquals(2, getCollectionState(collection).getActiveSlices().size());\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertFalse(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n\n    leader = getCollectionState(collection).getLeader(\"b\");\n    coreStatus = getCoreStatus(leader);\n\n    // Delete shard 'b'\n    CollectionAdminRequest.deleteShard(collection, \"b\")\n        .setDeleteDataDir(false)\n        .setDeleteInstanceDir(false)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected 'b' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"b\") == null;\n    });\n    \n    assertEquals(1, getCollectionState(collection).getActiveSlices().size());\n    assertTrue(\"Instance directory still exists\", FileUtils.fileExists(coreStatus.getInstanceDirectory()));\n    assertTrue(\"Data directory still exists\", FileUtils.fileExists(coreStatus.getDataDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34127d6b305c3e200d697bfcb58e639d65250c6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34127d6b305c3e200d697bfcb58e639d65250c6f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34127d6b305c3e200d697bfcb58e639d65250c6f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}