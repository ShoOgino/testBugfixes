{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#addCollectionsWatch().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addCollectionsWatch().mjava","pathOld":"/dev/null","sourceNew":"  /* \n   * Watch for collections so we can add watches for its shard leaders.\n   */\n  private void addCollectionsWatch() throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    \n    List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n      @Override\n      public void process(WatchedEvent event) {\n        try {\n          List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, this, true);\n          collectionsChanged(collections);\n        } catch (KeeperException e) {\n            if (e.code() == Code.CONNECTIONLOSS || e.code() == Code.SESSIONEXPIRED) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.warn(\"\", e);\n        }\n      }\n    }, true);\n    \n    collectionsChanged(collections);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addCollectionsWatch().mjava","pathOld":"/dev/null","sourceNew":"  /* \n   * Watch for collections so we can add watches for its shard leaders.\n   */\n  private void addCollectionsWatch() throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    \n    List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n      @Override\n      public void process(WatchedEvent event) {\n        try {\n          List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, this, true);\n          collectionsChanged(collections);\n        } catch (KeeperException e) {\n            if (e.code() == Code.CONNECTIONLOSS || e.code() == Code.SESSIONEXPIRED) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.warn(\"\", e);\n        }\n      }\n    }, true);\n    \n    collectionsChanged(collections);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addCollectionsWatch().mjava","pathOld":"/dev/null","sourceNew":"  /* \n   * Watch for collections so we can add watches for its shard leaders.\n   */\n  private void addCollectionsWatch() throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    \n    List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n      @Override\n      public void process(WatchedEvent event) {\n        try {\n          List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, this, true);\n          collectionsChanged(collections);\n        } catch (KeeperException e) {\n            if (e.code() == Code.CONNECTIONLOSS || e.code() == Code.SESSIONEXPIRED) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.warn(\"\", e);\n        }\n      }\n    }, true);\n    \n    collectionsChanged(collections);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#addCollectionsWatch().mjava","sourceNew":null,"sourceOld":"  /* \n   * Watch for collections so we can add watches for its shard leaders.\n   */\n  private void addCollectionsWatch() throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    \n    List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n      @Override\n      public void process(WatchedEvent event) {\n        try {\n          List<String> collections = zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, this, true);\n          collectionsChanged(collections);\n        } catch (KeeperException e) {\n            if (e.code() == Code.CONNECTIONLOSS || e.code() == Code.SESSIONEXPIRED) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.warn(\"\", e);\n        }\n      }\n    }, true);\n    \n    collectionsChanged(collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a5093a9e893633cc091cf2f729d7863671c2b715","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}