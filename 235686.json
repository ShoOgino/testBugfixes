{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      LightAutomaton a2 = new LightAutomaton();\n      a2.createState();\n      // TODO: can we somehow do this w/o a full copy here?\n      a2.copy(a1);\n\n      for (int p : initials) {\n        if (p != 0) {\n          a2.addEpsilon(0, p+1);\n        }\n      }\n      \n      a2.finish();\n      return a2;\n    } else {\n      return a1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      LightAutomaton a2 = new LightAutomaton();\n      a2.createState();\n      // TODO: can we somehow do this w/o a full copy here?\n      a2.copy(a1);\n\n      for (int p : initials) {\n        a2.addEpsilon(0, p+1);\n      }\n      \n      a2.finish();\n      return a2;\n    } else {\n      return a1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      LightAutomaton a2 = new LightAutomaton();\n      a2.createState();\n      // TODO: can we somehow do this w/o a full copy here?\n      a2.copy(a1);\n\n      for (int p : initials) {\n        if (p != 0) {\n          a2.addEpsilon(0, p+1);\n        }\n      }\n      \n      a2.finish();\n      return a2;\n    } else {\n      return a1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finish();\n    }\n\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      LightAutomaton a2 = new LightAutomaton();\n      a2.createState();\n      // TODO: can we somehow do this w/o a full copy here?\n      a2.copy(a1);\n\n      for (int p : initials) {\n        a2.addEpsilon(0, p+1);\n      }\n      \n      a2.finish();\n      return a2;\n    } else {\n      return a1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finish();\n    }\n\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeInterval(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeIntervalLight(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    Automaton.Builder builder = new Automaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    between(builder, x, y, 0, initials, digits <= 0);\n\n    Automaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static LightAutomaton makeIntervalLight(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    betweenLight(builder, x, y, 0, initials, digits <= 0);\n\n    LightAutomaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}