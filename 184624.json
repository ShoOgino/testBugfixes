{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity(true));\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      try {\n      assertEquals(td1, td2);\n      } catch (AssertionError e) {\n        System.out.println(query);\n        throw e;\n      }\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2","date":1451490354,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity(true));\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      assertEquals(td1, td2);\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity(true));\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      try {\n      assertEquals(td1, td2);\n      } catch (AssertionError e) {\n        System.out.println(query);\n        throw e;\n      }\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity());\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      assertEquals(td1, td2);\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity(true));\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      assertEquals(td1, td2);\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity());\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      assertEquals(td1, td2);\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField f = new TextField(\"body\", \"a b c\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"\");\n    w.addDocument(doc);\n    f.setStringValue(\"a b\");\n    w.addDocument(doc);\n    f.setStringValue(\"b c\");\n    w.addDocument(doc);\n    f.setStringValue(\"a\");\n    w.addDocument(doc);\n    f.setStringValue(\"c\");\n    w.addDocument(doc);\n    final int numRandomDocs = atLeast(3);\n    for (int i = 0; i < numRandomDocs; ++i) {\n      final int numTerms = random().nextInt(20);\n      StringBuilder text = new StringBuilder();\n      for (int j = 0; j < numTerms; ++j) {\n        text.append((char) ('a' + random().nextInt(4))).append(' ');\n      }\n      f.setStringValue(text.toString());\n      w.addDocument(doc);\n    }\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher1 = newSearcher(reader);\n    final IndexSearcher searcher2 = new IndexSearcher(reader) {\n      @Override\n      public Query rewrite(Query original) throws IOException {\n        // no-op: disable rewriting\n        return original;\n      }\n    };\n    searcher2.setSimilarity(searcher1.getSimilarity(true));\n\n    final int iters = atLeast(1000);\n    for (int i = 0; i < iters; ++i) {\n      Query query = randomQuery();\n      final TopDocs td1 = searcher1.search(query, 100);\n      final TopDocs td2 = searcher2.search(query, 100);\n      assertEquals(td1, td2);\n    }\n\n    searcher1.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"680a38a4d00fb0c8f5deb0ff76dabdfdf5afc5b2":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}