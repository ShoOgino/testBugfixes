{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","commits":[{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta, info.name));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta, info.name));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta, info.name));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta, info.name));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23e44daeaa8b89694d10df5999956c8e14a7dd09","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}