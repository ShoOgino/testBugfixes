{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttp2SolrClient#doRequest(String,Req,Rsp,boolean,boolean,RetryListener).mjava","commits":[{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttp2SolrClient#doRequest(String,Req,Rsp,boolean,boolean,RetryListener).mjava","pathOld":"/dev/null","sourceNew":"  private Cancellable doRequest(String baseUrl, Req req, Rsp rsp, boolean isNonRetryable,\n                         boolean isZombie, RetryListener listener) {\n    rsp.server = baseUrl;\n    req.getRequest().setBasePath(baseUrl);\n    return ((Http2SolrClient)getClient(baseUrl)).asyncRequest(req.getRequest(), null, new AsyncListener<>() {\n      @Override\n      public void onSuccess(NamedList<Object> result) {\n        rsp.rsp = result;\n        if (isZombie) {\n          zombieServers.remove(baseUrl);\n        }\n        listener.onSuccess(rsp);\n      }\n\n      @Override\n      public void onFailure(Throwable oe) {\n        try {\n          throw (Exception) oe;\n        } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n          listener.onFailure(e, false);\n        } catch (SolrException e) {\n          // we retry on 404 or 403 or 503 or 500\n          // unless it's an update - then we only retry on connect exception\n          if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n            listener.onFailure((!isZombie) ? addZombie(baseUrl, e) : e, true);\n          } else {\n            // Server is alive but the request was likely malformed or invalid\n            if (isZombie) {\n              zombieServers.remove(baseUrl);\n            }\n            listener.onFailure(e, false);\n          }\n        } catch (SocketException e) {\n          if (!isNonRetryable || e instanceof ConnectException) {\n            listener.onFailure((!isZombie) ? addZombie(baseUrl, e) : e, true);\n          } else {\n            listener.onFailure(e, false);\n          }\n        } catch (SocketTimeoutException e) {\n          if (!isNonRetryable) {\n            listener.onFailure((!isZombie) ? addZombie(baseUrl, e) : e, true);\n          } else {\n            listener.onFailure(e, false);\n          }\n        } catch (SolrServerException e) {\n          Throwable rootCause = e.getRootCause();\n          if (!isNonRetryable && rootCause instanceof IOException) {\n            listener.onFailure((!isZombie) ? addZombie(baseUrl, e) : e, true);\n          } else if (isNonRetryable && rootCause instanceof ConnectException) {\n            listener.onFailure((!isZombie) ? addZombie(baseUrl, e) : e, true);\n          } else {\n            listener.onFailure(e, false);\n          }\n        } catch (Exception e) {\n          listener.onFailure(new SolrServerException(e), false);\n        }\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}