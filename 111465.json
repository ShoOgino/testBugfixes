{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#checkReader(AtomicReader,boolean).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}