{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testCloseInnerReader().mjava","commits":[{"id":"48180ea0d6210cab36e06798b916a39e0607713b","date":1367051483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testCloseInnerReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloseInnerReader() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    assertEquals(1, ir1.getSequentialSubReaders().get(0).getRefCount());\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    IndexReader psub = pr.getSequentialSubReaders().get(0);\n    assertEquals(1, psub.getRefCount());\n\n    ir1.close();\n\n    assertEquals(\"refCount of synthetic subreader should be unchanged\", 1, psub.getRefCount());\n    try {\n      psub.document(0);\n      fail(\"Subreader should be already closed because inner reader was closed!\");\n    } catch (AlreadyClosedException e) {\n      // pass\n    }\n    \n    try {\n      pr.document(0);\n      fail(\"ParallelCompositeReader should be already closed because inner reader was closed!\");\n    } catch (AlreadyClosedException e) {\n      // pass\n    }\n    \n    // noop:\n    pr.close();\n    assertEquals(0, psub.getRefCount());\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testCloseInnerReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testCloseInnerReader().mjava","sourceNew":"  public void testCloseInnerReader() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    assertEquals(1, ir1.getSequentialSubReaders().get(0).getRefCount());\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    IndexReader psub = pr.getSequentialSubReaders().get(0);\n    assertEquals(1, psub.getRefCount());\n\n    ir1.close();\n\n    assertEquals(\"refCount of synthetic subreader should be unchanged\", 1, psub.getRefCount());\n    expectThrows(AlreadyClosedException.class, () -> {\n      psub.document(0);\n    });\n    \n    expectThrows(AlreadyClosedException.class, () -> {\n      pr.document(0);\n    });\n    \n    // noop:\n    pr.close();\n    assertEquals(0, psub.getRefCount());\n    dir1.close();\n  }\n\n","sourceOld":"  public void testCloseInnerReader() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    assertEquals(1, ir1.getSequentialSubReaders().get(0).getRefCount());\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    IndexReader psub = pr.getSequentialSubReaders().get(0);\n    assertEquals(1, psub.getRefCount());\n\n    ir1.close();\n\n    assertEquals(\"refCount of synthetic subreader should be unchanged\", 1, psub.getRefCount());\n    try {\n      psub.document(0);\n      fail(\"Subreader should be already closed because inner reader was closed!\");\n    } catch (AlreadyClosedException e) {\n      // pass\n    }\n    \n    try {\n      pr.document(0);\n      fail(\"ParallelCompositeReader should be already closed because inner reader was closed!\");\n    } catch (AlreadyClosedException e) {\n      // pass\n    }\n    \n    // noop:\n    pr.close();\n    assertEquals(0, psub.getRefCount());\n    dir1.close();\n  }\n\n","bugFix":["48180ea0d6210cab36e06798b916a39e0607713b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48180ea0d6210cab36e06798b916a39e0607713b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["48180ea0d6210cab36e06798b916a39e0607713b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"48180ea0d6210cab36e06798b916a39e0607713b":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48180ea0d6210cab36e06798b916a39e0607713b"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}