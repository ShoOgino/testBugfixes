{"path":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","commits":[{"id":"9cd756794a4a9e33f786119818f9d56162965cf8","date":1412591300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertTrue(ds2.isCacheable()); // since we wrapped a FixedBitSet\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertTrue(ds2.isCacheable()); // since we wrapped a FixedBitSet\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","sourceNew":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertTrue(ds2.isCacheable()); // since we wrapped a FixedBitSet\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNotDocIdSet#assertEquals(int,BitSet,NotDocIdSet).mjava","sourceNew":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void assertEquals(int numBits, BitSet ds1, NotDocIdSet ds2)\n      throws IOException {\n    super.assertEquals(numBits, ds1, ds2);\n    final Bits bits2 = ds2.bits();\n    assertTrue(ds2.isCacheable()); // since we wrapped a FixedBitSet\n    assertNotNull(bits2); // since we wrapped a FixedBitSet\n    assertEquals(numBits, bits2.length());\n    for (int i = 0; i < numBits; ++i) {\n      assertEquals(ds1.get(i), bits2.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9cd756794a4a9e33f786119818f9d56162965cf8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"9cd756794a4a9e33f786119818f9d56162965cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cd756794a4a9e33f786119818f9d56162965cf8"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["9cd756794a4a9e33f786119818f9d56162965cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9cd756794a4a9e33f786119818f9d56162965cf8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"55980207f1977bd1463465de1659b821347e2fa8":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cd756794a4a9e33f786119818f9d56162965cf8","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}