{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void preRegisterSetup(SolrCore core, CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN);\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    try {\n      joinElection(collection, coreZkNodeName, shardId, ourProps, core);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (IOException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n      \n      waitForLeaderToSeeDownState(cd, coreZkNodeName);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor).mjava","sourceNew":"  public void preRegisterSetup(SolrCore core, CoreDescriptor cd, boolean waitForNotLive) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN);\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    try {\n      joinElection(collection, coreZkNodeName, shardId, ourProps, core);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (IOException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n      \n    waitForLeaderToSeeDownState(cd, coreZkNodeName, waitForNotLive);\n    \n  }\n\n","sourceOld":"  public void preRegisterSetup(SolrCore core, CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN);\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    try {\n      joinElection(collection, coreZkNodeName, shardId, ourProps, core);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (IOException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n      \n      waitForLeaderToSeeDownState(cd, coreZkNodeName);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  public void preRegisterSetup(SolrCore core, CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN);\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    try {\n      joinElection(collection, coreZkNodeName, shardId, ourProps, core);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (IOException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n      \n      waitForLeaderToSeeDownState(cd, coreZkNodeName);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","6b834dd353486678973f4157b3ba402ac3a7ca88"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b834dd353486678973f4157b3ba402ac3a7ca88"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6b834dd353486678973f4157b3ba402ac3a7ca88":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6b834dd353486678973f4157b3ba402ac3a7ca88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}