{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","pathOld":"/dev/null","sourceNew":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery expected = new BooleanQuery(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0.setBoost(5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1.setBoost(10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected, parser.parse(\"foo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","sourceNew":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.setDisableCoord(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0.setBoost(5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1.setBoost(10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","sourceOld":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery expected = new BooleanQuery(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0.setBoost(5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1.setBoost(10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected, parser.parse(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","sourceNew":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.setDisableCoord(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0 = new BoostQuery(field0, 5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1 = new BoostQuery(field1, 10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","sourceOld":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.setDisableCoord(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0.setBoost(5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1.setBoost(10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","sourceNew":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0 = new BoostQuery(field0, 5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1 = new BoostQuery(field1, 10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","sourceOld":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.setDisableCoord(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0 = new BoostQuery(field0, 5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1 = new BoostQuery(field1, 10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testWeightedTerm().mjava","sourceNew":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0 = new BoostQuery(field0, 5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1 = new BoostQuery(field1, 10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","sourceOld":"  /** test a term with field weights */\n  public void testWeightedTerm() throws Exception {\n    Map<String,Float> weights = new LinkedHashMap<>();\n    weights.put(\"field0\", 5f);\n    weights.put(\"field1\", 10f);\n\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.setDisableCoord(true);\n    Query field0 = new TermQuery(new Term(\"field0\", \"foo\"));\n    field0 = new BoostQuery(field0, 5f);\n    expected.add(field0, Occur.SHOULD);\n    Query field1 = new TermQuery(new Term(\"field1\", \"foo\"));\n    field1 = new BoostQuery(field1, 10f);\n    expected.add(field1, Occur.SHOULD);\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SimpleQueryParser parser = new SimpleQueryParser(analyzer, weights);\n    assertEquals(expected.build(), parser.parse(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}