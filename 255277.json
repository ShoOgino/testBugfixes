{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"]},"commit2Childs":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}