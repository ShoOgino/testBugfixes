{"path":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27e851527ef490dd0b790e19b7c62602b5778eb1","date":1337344101,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_si\")\n        , \"//lst[@name='grouped']/lst[@name='group_si']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":["2412c4674552a5817279bbd349d3a84807919375"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_si\")\n        , \"//lst[@name='grouped']/lst[@name='group_si']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"group_si\")\n            ,\"//lst[@name='grouped']/lst[@name='group_si']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 2]\"\n\n            ,\"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_i\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\")\n        , \"//lst[@name='grouped']/lst[@name='group_i']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_si\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_si\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_si\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_si\")\n        , \"//lst[@name='grouped']/lst[@name='group_si']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\", \"id_i\", \"1\", \"name\", \"author1\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"2\", \"id_i\", \"2\", \"name\", \"author1\", \"title\", \"the title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"3\", \"id_i\", \"3\", \"name\", \"author2\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"4\", \"id_i\", \"4\", \"name\", \"author2\", \"title\", \"title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"5\", \"id_i\", \"5\", \"name\", \"author3\", \"title\", \"the title of a title\", \"group_i\", \"1\")));\n    assertU(commit());\n\n    // function based query for predictable scores not affect by similarity\n    assertQ(req(\"q\",\"{!func}id_i\", \"group\", \"true\", \"group.field\",\"name\", \"fl\", \"id, score\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author3']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='5']\"\n            \n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='2']\"\n\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\")\n        , \"//lst[@name='grouped']/lst[@name='group_i']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\", \"group_i\", \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //       ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\")\n        , \"//lst[@name='grouped']/lst[@name='group_i']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1313c74c6d619d0d98d1284bc17513c9a4b40345","date":1562035273,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basic().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\", \"id_i\", \"1\", \"name\", \"author1\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"2\", \"id_i\", \"2\", \"name\", \"author1\", \"title\", \"the title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"3\", \"id_i\", \"3\", \"name\", \"author2\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"4\", \"id_i\", \"4\", \"name\", \"author2\", \"title\", \"title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"5\", \"id_i\", \"5\", \"name\", \"author3\", \"title\", \"the title of a title\", \"group_i\", \"1\")));\n    assertU(commit());\n\n    // function based query for predictable scores not affect by similarity\n    assertQ(req(\"q\",\"{!func}id_i\", \"group\", \"true\", \"group.field\",\"name\", \"fl\", \"id, score\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author3']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='5']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='2']\"\n\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\")\n        , \"//lst[@name='grouped']/lst[@name='group_i']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n\n    SolrException exception = expectThrows(SolrException.class, () -> {\n      h.query(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\", \"group.offset\", \"-1\"));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"'group.offset' parameter cannot be negative\", exception.getMessage());\n\n    // for group.main=true and group.format=simple, group.offset is not consumed\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\",\n        \"group.offset\", \"-1\", \"group.format\", \"simple\"));\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\",\n        \"group.offset\", \"-1\", \"group.main\", \"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basic() {\n    assertU(add(doc(\"id\", \"1\", \"id_i\", \"1\", \"name\", \"author1\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"2\", \"id_i\", \"2\", \"name\", \"author1\", \"title\", \"the title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"3\", \"id_i\", \"3\", \"name\", \"author2\", \"title\", \"a book title\", \"group_i\", \"1\")));\n    assertU(add(doc(\"id\", \"4\", \"id_i\", \"4\", \"name\", \"author2\", \"title\", \"title\", \"group_i\", \"2\")));\n    assertU(add(doc(\"id\", \"5\", \"id_i\", \"5\", \"name\", \"author3\", \"title\", \"the title of a title\", \"group_i\", \"1\")));\n    assertU(commit());\n\n    // function based query for predictable scores not affect by similarity\n    assertQ(req(\"q\",\"{!func}id_i\", \"group\", \"true\", \"group.field\",\"name\", \"fl\", \"id, score\")\n            ,\"//lst[@name='grouped']/lst[@name='name']\"\n            ,\"*[count(//arr[@name='groups']/lst) = 3]\"\n\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author3']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='5']\"\n            \n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='2']\"\n\n            );\n\n    assertQ(req(\"q\", \"title:title\", \"group\", \"true\", \"group.field\", \"group_i\")\n        , \"//lst[@name='grouped']/lst[@name='group_i']\"\n        , \"*[count(//arr[@name='groups']/lst) = 2]\"\n\n        , \"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']\"\n        , \"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n        , \"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n        , \"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']\"\n        , \"//arr[@name='groups']/lst[2]/result[@numFound='3']\"\n        , \"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27e851527ef490dd0b790e19b7c62602b5778eb1":["c26f00b574427b55127e869b935845554afde1fa"],"1313c74c6d619d0d98d1284bc17513c9a4b40345":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["2106271e380c198349e0f6eac0395bb462913fab"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["27e851527ef490dd0b790e19b7c62602b5778eb1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef0d8a69209261514c5739c770bba706c2308450":["c26f00b574427b55127e869b935845554afde1fa","27e851527ef490dd0b790e19b7c62602b5778eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1313c74c6d619d0d98d1284bc17513c9a4b40345"]},"commit2Childs":{"27e851527ef490dd0b790e19b7c62602b5778eb1":["2106271e380c198349e0f6eac0395bb462913fab","ef0d8a69209261514c5739c770bba706c2308450"],"1313c74c6d619d0d98d1284bc17513c9a4b40345":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["27e851527ef490dd0b790e19b7c62602b5778eb1","ef0d8a69209261514c5739c770bba706c2308450"],"2106271e380c198349e0f6eac0395bb462913fab":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}