{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.start(), spans.end(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.start(), spans.end(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.start(), spans.end(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.start(), spans.end(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4409879b1445c56c3834b823720d47c08c409c5","date":1428086307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(docID(), fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(docID(),\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(docID(), fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(docID(),\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(doc,\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73561ba4c64c1aea2ba4b3873f80b9b2a2946816","date":1438618499,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        scratch.bytes = thePayload;\n        scratch.offset = 0;\n        scratch.length = thePayload.length;\n        payloadScore = function.currentScore(docID(), fieldName, start, end,\n            payloadsSeen, payloadScore, docScorer.computePayloadFactor(docID(),\n                spans.startPosition(), spans.endPosition(), scratch));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["f4409879b1445c56c3834b823720d47c08c409c5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4409879b1445c56c3834b823720d47c08c409c5":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","f4409879b1445c56c3834b823720d47c08c409c5"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"]},"commit2Childs":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4409879b1445c56c3834b823720d47c08c409c5":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["f4409879b1445c56c3834b823720d47c08c409c5","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}