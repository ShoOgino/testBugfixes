{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, new BytesRef(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, new BytesRef(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, new BytesRef(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, new BytesRef(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, new BytesRef(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6e919043fa85ee891123768dd655a98edbbf63c":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"e6e919043fa85ee891123768dd655a98edbbf63c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["e6e919043fa85ee891123768dd655a98edbbf63c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}