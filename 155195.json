{"path":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","commits":[{"id":"2562fab31a7b144e6187859bfa09e363dc6de268","date":1170358826,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 5;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<15; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<15; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    Thread.sleep( 500 );\n    assertQ(\"should find one\", req(\"id:B1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07bdb5b401400fcaa3377478d9effd5c8164029a","date":1170475144,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    assertQ(\"should find one\", req(\"id:B1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 5;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<15; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<15; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    Thread.sleep( 500 );\n    assertQ(\"should find one\", req(\"id:B1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c","date":1170711122,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    assertQ(\"should find one\", req(\"id:B1\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c99d95b0b616799770db2542d6eb9a3338198fb4","date":1182798614,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ebb9596c0284cb6ad749a68ec2708df9a3d9573","date":1186625528,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 500 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 500 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69b02622fdb25e982f5c9e346906142f1448a1bd","date":1186627562,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a16a21ce0db3df902bcea143bbf027dcbdd44437","date":1188947139,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":["0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08","date":1201672558,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount() );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    assertTrue(trigger.waitForCommit(10000));\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.autoCommitCount );\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    // blocks until commit is complete\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    Thread.sleep( 1000 );\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a2f3c483b63773778e9014efe6581a5fb6ee40","date":1207170256,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n    // Now add some more\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:B1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount() );\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    assertTrue(trigger.waitForCommit(10000));\n\n    // add request will block if commit has already started or completed\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"B15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    \n    assertQ(\"should find one\", req(\"id:B14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"should find none\", req(\"id:B15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a8645b10693962a3b9984a15c27ce1e790565b","date":1207594786,"type":5,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"69b02622fdb25e982f5c9e346906142f1448a1bd":["3ebb9596c0284cb6ad749a68ec2708df9a3d9573"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08":["6d6338c87060be5f66757a94945975f3bbd377a9"],"c8a8645b10693962a3b9984a15c27ce1e790565b":["00a2f3c483b63773778e9014efe6581a5fb6ee40"],"3ebb9596c0284cb6ad749a68ec2708df9a3d9573":["c99d95b0b616799770db2542d6eb9a3338198fb4"],"00a2f3c483b63773778e9014efe6581a5fb6ee40":["4f79ef2b5b190ea507e4b1204ad05c6ac6592f08"],"a16a21ce0db3df902bcea143bbf027dcbdd44437":["69b02622fdb25e982f5c9e346906142f1448a1bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c":["07bdb5b401400fcaa3377478d9effd5c8164029a"],"2562fab31a7b144e6187859bfa09e363dc6de268":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c99d95b0b616799770db2542d6eb9a3338198fb4":["0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c"],"07bdb5b401400fcaa3377478d9effd5c8164029a":["2562fab31a7b144e6187859bfa09e363dc6de268"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["4f79ef2b5b190ea507e4b1204ad05c6ac6592f08"],"69b02622fdb25e982f5c9e346906142f1448a1bd":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2562fab31a7b144e6187859bfa09e363dc6de268"],"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08":["00a2f3c483b63773778e9014efe6581a5fb6ee40"],"3ebb9596c0284cb6ad749a68ec2708df9a3d9573":["69b02622fdb25e982f5c9e346906142f1448a1bd"],"c8a8645b10693962a3b9984a15c27ce1e790565b":[],"a16a21ce0db3df902bcea143bbf027dcbdd44437":["6d6338c87060be5f66757a94945975f3bbd377a9"],"00a2f3c483b63773778e9014efe6581a5fb6ee40":["c8a8645b10693962a3b9984a15c27ce1e790565b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c":["c99d95b0b616799770db2542d6eb9a3338198fb4"],"2562fab31a7b144e6187859bfa09e363dc6de268":["07bdb5b401400fcaa3377478d9effd5c8164029a"],"c99d95b0b616799770db2542d6eb9a3338198fb4":["3ebb9596c0284cb6ad749a68ec2708df9a3d9573"],"07bdb5b401400fcaa3377478d9effd5c8164029a":["0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c8a8645b10693962a3b9984a15c27ce1e790565b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}