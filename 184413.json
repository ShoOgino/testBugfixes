{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    //if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    //if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    //if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    //if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    //if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}