{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PointInRectQuery#PointInRectQuery(String,double,double,double,double).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PointInRectQuery#PointInRectQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DimensionalPointInRectQuery#DimensionalPointInRectQuery(String,double,double,double,double).mjava","sourceNew":"  /** Matches all points &gt;= minLon, minLat (inclusive) and &lt; maxLon, maxLat (exclusive). */ \n  public PointInRectQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    this.field = field;\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** Matches all points &gt;= minLon, minLat (inclusive) and &lt; maxLon, maxLat (exclusive). */ \n  public DimensionalPointInRectQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    this.field = field;\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInRectQuery#PointInRectQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a bounding box.\n   * <p>\n   * The box may cross over the dateline.\n   */\n  public static Query newBoxQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    \n    byte[][] lower = encode(minLat, minLon);\n    byte[][] upper = encode(maxLat, maxLon);\n    // Crosses date line: we just rewrite into OR of two bboxes, with longitude as an open range:\n    if (maxLon < minLon) {\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      byte[][] leftOpen = new byte[2][];\n      leftOpen[0] = lower[0];\n      // leave longitude open (null)\n      Query left = newBoxInternal(field, leftOpen, upper);\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      byte[][] rightOpen = new byte[2][];\n      rightOpen[0] = upper[0];\n      // leave longitude open (null)\n      Query right = newBoxInternal(field, lower, rightOpen);\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return new ConstantScoreQuery(q.build());\n    } else {\n      return newBoxInternal(field, lower, upper);\n    }\n  }\n\n","sourceOld":"  /** Matches all points &gt;= minLon, minLat (inclusive) and &lt; maxLon, maxLat (exclusive). */ \n  public PointInRectQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    this.field = field;\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9","606ea169579957651185909e7264798e99e714f9","1800b996d8677670482a071dcb7a48b08c423ace","1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInRectQuery#PointInRectQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a bounding box.\n   * <p>\n   * The box may cross over the dateline.\n   */\n  public static Query newBoxQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    \n    byte[][] lower = encode(minLat, minLon);\n    byte[][] upper = encode(maxLat, maxLon);\n    // Crosses date line: we just rewrite into OR of two bboxes, with longitude as an open range:\n    if (maxLon < minLon) {\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      byte[][] leftOpen = new byte[2][];\n      leftOpen[0] = lower[0];\n      // leave longitude open (null)\n      Query left = newBoxInternal(field, leftOpen, upper);\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      byte[][] rightOpen = new byte[2][];\n      rightOpen[0] = upper[0];\n      // leave longitude open (null)\n      Query right = newBoxInternal(field, lower, rightOpen);\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return new ConstantScoreQuery(q.build());\n    } else {\n      return newBoxInternal(field, lower, upper);\n    }\n  }\n\n","sourceOld":"  /** Matches all points &gt;= minLon, minLat (inclusive) and &lt; maxLon, maxLat (exclusive). */ \n  public PointInRectQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    this.field = field;\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"minLat=\" + minLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"maxLat=\" + maxLat + \" is not a valid latitude\");\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"minLon=\" + minLon + \" is not a valid longitude\");\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"maxLon=\" + maxLon + \" is not a valid longitude\");\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}