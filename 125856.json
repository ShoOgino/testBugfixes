{"path":"src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","commits":[{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet files = new HashSet();\n    if (includeSegmentsFile) {\n      files.add(getCurrentSegmentFileName());\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      files.add(getCurrentSegmentFileName());\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet files = new HashSet();\n    if (includeSegmentsFile) {\n      files.add(getCurrentSegmentFileName());\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      files.add(getCurrentSegmentFileName());\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      files.add(getCurrentSegmentFileName());\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f44610301174bfb430443d89a88dc1c502feea1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["0f44610301174bfb430443d89a88dc1c502feea1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"0f44610301174bfb430443d89a88dc1c502feea1":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f44610301174bfb430443d89a88dc1c502feea1"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}