{"path":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","commits":[{"id":"13ba39c40de7bda3b305a362bceb7a788e31df23","date":1075988755,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefaults() {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    Token token = null;\n    try {\n      while ((token = stream.next()) != null)\n      {\n        assertTrue(inValidTokens.contains(token.termText()) == false);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89550d25407cfe6619fc426d7602304f48a0f861","date":1120080682,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    Token token = null;\n    while ((token = stream.next()) != null) {\n      assertFalse(inValidTokens.contains(token.termText()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    Token token = null;\n    try {\n      while ((token = stream.next()) != null)\n      {\n        assertTrue(inValidTokens.contains(token.termText()) == false);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    final Token reusableToken = new Token();\n    for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n      assertFalse(inValidTokens.contains(nextToken.term()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    Token token = null;\n    while ((token = stream.next()) != null) {\n      assertFalse(inValidTokens.contains(token.termText()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    final Token reusableToken = new Token();\n    for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n      assertFalse(inValidTokens.contains(nextToken.term()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":null,"sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["89550d25407cfe6619fc426d7602304f48a0f861"],"89550d25407cfe6619fc426d7602304f48a0f861":["13ba39c40de7bda3b305a362bceb7a788e31df23"],"13ba39c40de7bda3b305a362bceb7a788e31df23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"89550d25407cfe6619fc426d7602304f48a0f861":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"13ba39c40de7bda3b305a362bceb7a788e31df23":["89550d25407cfe6619fc426d7602304f48a0f861"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13ba39c40de7bda3b305a362bceb7a788e31df23"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}