{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          result = termsEnum.docFreq();\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","sourceNew":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      result = reader.docFreq(field, term);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          result = termsEnum.docFreq();\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","sourceNew":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      result = reader.docFreq(field, term);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          result = termsEnum.docFreq();\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getDocFreq(IndexReader,String,BytesRef).mjava","sourceNew":null,"sourceOld":"  private static int getDocFreq(IndexReader reader, String field, BytesRef term) {\n    int result = 1;\n    try {\n      result = reader.docFreq(field, term);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3cc749c053615f5871f3b95715fe292f34e70a53","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0e3c1c21aac8ecf75706605133012833585c7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}