{"path":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","commits":[{"id":"4eb734dc106080869b1e7a65b9a7275b16ffb8b1","date":1041906561,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name)\n  {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++)\n    {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e471b4e6ba118157929336dab998d9290232326b","date":1041914960,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name)\n  {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++)\n    {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc59af24137a8855e59731feeea3c95c72c35542","date":1041955743,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   * UnStored fields' values cannot be returned by this method.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   * UnStored fields' values cannot be returned by this method.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0eacdfc94f700086189bb44f7f73ed9cfd85c75","date":1095252623,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Field field = (Field)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    Field[] namedFields = getFields(name);\n    if (namedFields == null)\n      return null;\n    String[] values = new String[namedFields.length];\n    for (int i = 0; i < namedFields.length; i++) {\n      values[i] = namedFields[i].stringValue();\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Field field = (Field)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"661128e262718a7dc418602b138db3abe96c9efc","date":1151001452,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values or <code>null</code>\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f01f28d422fb8f120bbdfd69b63e199d848415f","date":1205492908,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values or <code>null</code>\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values or <code>null</code>\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return null;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf6c7bd2a2227ed1883f39804a356e29a7949a2","date":1205753506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   *\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values or <code>null</code>\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70c362dc47e16ef90835bd9d78415bdceefbd7e","date":1254561360,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List<String> result = new ArrayList<String>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List result = new ArrayList();\n    for (int i = 0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List<String> result = new ArrayList<String>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List<String> result = new ArrayList<String>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return (String[])result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Document#getValues(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an array of values of the field specified as the method parameter.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   * @param name the name of the field\n   * @return a <code>String[]</code> of field values\n   */\n  public final String[] getValues(String name) {\n    List<String> result = new ArrayList<String>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (!field.isBinary()))\n        result.add(field.stringValue());\n    }\n    \n    if (result.size() == 0)\n      return NO_STRINGS;\n    \n    return result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f01f28d422fb8f120bbdfd69b63e199d848415f":["661128e262718a7dc418602b138db3abe96c9efc"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["bc59af24137a8855e59731feeea3c95c72c35542"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"bc59af24137a8855e59731feeea3c95c72c35542":["e471b4e6ba118157929336dab998d9290232326b"],"661128e262718a7dc418602b138db3abe96c9efc":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"4eb734dc106080869b1e7a65b9a7275b16ffb8b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"e471b4e6ba118157929336dab998d9290232326b":["4eb734dc106080869b1e7a65b9a7275b16ffb8b1"]},"commit2Childs":{"3f01f28d422fb8f120bbdfd69b63e199d848415f":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["661128e262718a7dc418602b138db3abe96c9efc"],"bc59af24137a8855e59731feeea3c95c72c35542":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"661128e262718a7dc418602b138db3abe96c9efc":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"4eb734dc106080869b1e7a65b9a7275b16ffb8b1":["e471b4e6ba118157929336dab998d9290232326b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4eb734dc106080869b1e7a65b9a7275b16ffb8b1"],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"e471b4e6ba118157929336dab998d9290232326b":["bc59af24137a8855e59731feeea3c95c72c35542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}