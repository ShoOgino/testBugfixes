{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","pathOld":"/dev/null","sourceNew":"  public static int getCharType(char ch) {\n    // 最多的是汉字\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // 最前面的其它的都是标点符号了\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // 全角字符区域\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","sourceNew":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","sourceOld":"  public static int getCharType(char ch) {\n    // 最多的是汉字\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // 最前面的其它的都是标点符号了\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // 全角字符区域\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","sourceNew":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","sourceOld":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}