{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","commits":[{"id":"6b496a51639fc02b2ff28d1b029b37e42f6c7627","date":1347885256,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, Character.BYTES)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, Character.BYTES)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b496a51639fc02b2ff28d1b029b37e42f6c7627":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"419a8f52c6635419beb951255cacbbb281044c57":["6b496a51639fc02b2ff28d1b029b37e42f6c7627","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["6b496a51639fc02b2ff28d1b029b37e42f6c7627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b496a51639fc02b2ff28d1b029b37e42f6c7627"],"6b496a51639fc02b2ff28d1b029b37e42f6c7627":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}