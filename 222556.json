{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  @SuppressWarnings(\"deprecation\")\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  @SuppressWarnings(\"deprecation\")\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomIntBetween(0, intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}