{"path":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getReversedWildcardFilterFactory(FieldType).mjava","commits":[{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"/dev/null","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac == null && leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac == null && leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":["514639c56678b2a4a73464fcf16103c7a22857ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":null,"sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac == null && leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["f15795b2193a8dd132f374975d4243687bee9351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["f15795b2193a8dd132f374975d4243687bee9351","3cdb67100dc016748799a77218aa409478372d79"],"f15795b2193a8dd132f374975d4243687bee9351":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdb67100dc016748799a77218aa409478372d79"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f15795b2193a8dd132f374975d4243687bee9351"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f15795b2193a8dd132f374975d4243687bee9351":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}