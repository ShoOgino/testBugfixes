{"path":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","commits":[{"id":"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a","date":1399822162,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821","71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10d98d3c84fcfdd2089a56054f4cf7186a57265d","date":1400053445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abc07c8978acf0345f72aa643295788b6816b481","date":1422539230,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n        doTestRanges(is, start, end, query, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        Query query = DocValuesRangeQuery.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true);\n        doTestRanges(is, start, end, query, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n        doTestRanges(is, start, end, query, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        doTestRanges(is, start, end, lowerVal, upperVal, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        Query query = DocValuesRangeQuery.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true);\n        doTestRanges(is, start, end, query, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(20);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        doTestRanges(is, start, end, lowerVal, upperVal, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(Locale.getDefault()); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    CollationDocValuesField collationField = new CollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    \n    try {\n      for (int i = 0; i < numChecks; i++) {\n        String start = TestUtil.randomSimpleString(random());\n        String end = TestUtil.randomSimpleString(random());\n        BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n        BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n        doTestRanges(is, start, end, lowerVal, upperVal, collator);\n      }\n    } finally {\n      ir.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["9274621789ce990dbfef455dabdf026bb3184821"],"9274621789ce990dbfef455dabdf026bb3184821":["9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["abc07c8978acf0345f72aa643295788b6816b481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"abc07c8978acf0345f72aa643295788b6816b481":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9274621789ce990dbfef455dabdf026bb3184821":["10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d0ef034a4f10871667ae75181537775ddcf8ade4","56572ec06f1407c066d6b7399413178b33176cd8"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","9222ff3275c9f12c3ed1b874004083b8f7fc8e7a","56572ec06f1407c066d6b7399413178b33176cd8"],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["9274621789ce990dbfef455dabdf026bb3184821"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["abc07c8978acf0345f72aa643295788b6816b481"],"abc07c8978acf0345f72aa643295788b6816b481":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["71da933d30aea361ccc224d6544c451cbf49916d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}