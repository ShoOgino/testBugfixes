{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws ParseException {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req,\n                                              String[] queries) throws SyntaxError {\n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}