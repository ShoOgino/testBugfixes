{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","commits":[{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized String nextOrError(Exception previousEx) throws SolrServerException {\n      String suffix = \"\";\n      if (previousEx == null) {\n        suffix = \":\" + zombieServers.keySet();\n      }\n      if (isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        throw new SolrServerException(\"Time allowed to handle this request exceeded\"+suffix, previousEx);\n      }\n      if (serverStr == null) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request\"+suffix, previousEx);\n      }\n      numServersTried++;\n      if (req.getNumServersToTry() != null && numServersTried > req.getNumServersToTry()) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+req.getNumServersToTry()+suffix, previousEx);\n      }\n      String rs = serverStr;\n      fetchNext();\n      return rs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12e79584a91ef8739111fcaf1b2af0e941e1b4e8","date":1597999264,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","sourceNew":"    public synchronized String nextOrError(Exception previousEx) throws SolrServerException {\n      String suffix = \"\";\n      if (previousEx == null) {\n        suffix = \":\" + zombieServers.keySet();\n      }\n      // Skipping check time exceeded for the first request\n      if (previousEx != null && isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        throw new SolrServerException(\"Time allowed to handle this request exceeded\"+suffix, previousEx);\n      }\n      if (serverStr == null) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request\"+suffix, previousEx);\n      }\n      numServersTried++;\n      if (req.getNumServersToTry() != null && numServersTried > req.getNumServersToTry()) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+req.getNumServersToTry()+suffix, previousEx);\n      }\n      String rs = serverStr;\n      fetchNext();\n      return rs;\n    }\n\n","sourceOld":"    public synchronized String nextOrError(Exception previousEx) throws SolrServerException {\n      String suffix = \"\";\n      if (previousEx == null) {\n        suffix = \":\" + zombieServers.keySet();\n      }\n      if (isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        throw new SolrServerException(\"Time allowed to handle this request exceeded\"+suffix, previousEx);\n      }\n      if (serverStr == null) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request\"+suffix, previousEx);\n      }\n      numServersTried++;\n      if (req.getNumServersToTry() != null && numServersTried > req.getNumServersToTry()) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+req.getNumServersToTry()+suffix, previousEx);\n      }\n      String rs = serverStr;\n      fetchNext();\n      return rs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d216659e18ce2cbb5d83018b4d881e15f55a880","date":1598238673,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient.ServerIterator#nextOrError(Exception).mjava","sourceNew":"    public synchronized String nextOrError(Exception previousEx) throws SolrServerException {\n      String suffix = \"\";\n      if (previousEx == null) {\n        suffix = \":\" + zombieServers.keySet();\n      }\n      // Skipping check time exceeded for the first request\n      if (numServersTried > 0 && isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        throw new SolrServerException(\"Time allowed to handle this request exceeded\"+suffix, previousEx);\n      }\n      if (serverStr == null) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request\"+suffix, previousEx);\n      }\n      numServersTried++;\n      if (req.getNumServersToTry() != null && numServersTried > req.getNumServersToTry()) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+req.getNumServersToTry()+suffix, previousEx);\n      }\n      String rs = serverStr;\n      fetchNext();\n      return rs;\n    }\n\n","sourceOld":"    public synchronized String nextOrError(Exception previousEx) throws SolrServerException {\n      String suffix = \"\";\n      if (previousEx == null) {\n        suffix = \":\" + zombieServers.keySet();\n      }\n      // Skipping check time exceeded for the first request\n      if (previousEx != null && isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        throw new SolrServerException(\"Time allowed to handle this request exceeded\"+suffix, previousEx);\n      }\n      if (serverStr == null) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request\"+suffix, previousEx);\n      }\n      numServersTried++;\n      if (req.getNumServersToTry() != null && numServersTried > req.getNumServersToTry()) {\n        throw new SolrServerException(\"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+req.getNumServersToTry()+suffix, previousEx);\n      }\n      String rs = serverStr;\n      fetchNext();\n      return rs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12e79584a91ef8739111fcaf1b2af0e941e1b4e8":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"8d216659e18ce2cbb5d83018b4d881e15f55a880":["12e79584a91ef8739111fcaf1b2af0e941e1b4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d216659e18ce2cbb5d83018b4d881e15f55a880"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["12e79584a91ef8739111fcaf1b2af0e941e1b4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"12e79584a91ef8739111fcaf1b2af0e941e1b4e8":["8d216659e18ce2cbb5d83018b4d881e15f55a880"],"8d216659e18ce2cbb5d83018b4d881e15f55a880":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}