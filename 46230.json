{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","commits":[{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","pathOld":"/dev/null","sourceNew":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      try {\n        Class cl = Class.forName(pluginClassName);\n        authenticationPlugin = (AuthenticationPlugin) cl.newInstance();\n      } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = authenticationPlugin.getDefaultConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory)getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d329438a855e5e92ab749a3f6702afed73750dc","date":1436744948,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","sourceNew":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = authenticationPlugin.getDefaultConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory)getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    }\n  }\n\n","sourceOld":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      try {\n        Class cl = Class.forName(pluginClassName);\n        authenticationPlugin = (AuthenticationPlugin) cl.newInstance();\n      } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = authenticationPlugin.getDefaultConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory)getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","sourceNew":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin);\n    }\n  }\n\n","sourceOld":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = authenticationPlugin.getDefaultConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory)getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin);\n    }\n  }\n\n","bugFix":null,"bugIntro":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["3d329438a855e5e92ab749a3f6702afed73750dc"],"3d329438a855e5e92ab749a3f6702afed73750dc":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdcb86c29922edae9a14852e636303bc52df094"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["3d329438a855e5e92ab749a3f6702afed73750dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["6bdcb86c29922edae9a14852e636303bc52df094"],"3d329438a855e5e92ab749a3f6702afed73750dc":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}