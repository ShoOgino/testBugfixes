{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsFormat.DOC_CODEC,\n                            Lucene41PostingsFormat.VERSION_START,\n                            Lucene41PostingsFormat.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsFormat.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsFormat.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsFormat.DOC_CODEC,\n                            Lucene41PostingsFormat.VERSION_START,\n                            Lucene41PostingsFormat.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsFormat.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsFormat.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsFormat.DOC_CODEC,\n                            Lucene41PostingsFormat.VERSION_START,\n                            Lucene41PostingsFormat.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsFormat.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsFormat.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}