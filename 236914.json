{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    BytesRef term = getAnalyzer().normalize(field, termStr);\n    Term t = new Term(field, term);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    BytesRef term = getAnalyzer().normalize(field, termStr);\n    Term t = new Term(field, term);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase(locale);\n    }\n    Term t = new Term(field, termStr);\n    return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec57145e34263e28da6b82568e35471f7d67df69"],"ea4107f60b9f95623c16025c9c247412ff809092":["2acf500f78aa12b92e371fd89c719291986b6b90"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2acf500f78aa12b92e371fd89c719291986b6b90","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46d8ada1fff8d18cb197c38c7983225162599948"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}