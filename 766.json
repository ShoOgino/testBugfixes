{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2, randomBoolean());//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2, randomBoolean());//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2, randomBoolean());//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2, randomBoolean());//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2, randomBoolean());//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9d3854546d75fdc5a4c3b13d0c67b6b331185945","112d77ac8d3e10a362516ad834c9a11d35c94234"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["0521546db127e358ced1772a9d696dbdd255b203"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0521546db127e358ced1772a9d696dbdd255b203":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}