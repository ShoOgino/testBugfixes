{"path":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","commits":[{"id":"5c2cf5832e0f01230bc2c4886e16887a0d1f3341","date":1301042882,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.add(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.add(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.add(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["e92442af786151ee55bc283eb472f629e3c7b52b","2e8d7ba2175f47e280231533f7d3016249cea88b"],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e92442af786151ee55bc283eb472f629e3c7b52b":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["e92442af786151ee55bc283eb472f629e3c7b52b","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["e92442af786151ee55bc283eb472f629e3c7b52b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"e92442af786151ee55bc283eb472f629e3c7b52b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}