{"path":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","commits":[{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand();\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand();\n    cmd.fromCommitted = cmd.fromPending = true; // TODO? enable this?\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","pathOld":"/dev/null","sourceNew":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b15db2edd4d6bec35a41e44d8f1afe6384a905","date":1305144174,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","sourceNew":null,"sourceOld":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["70ad682703b8585f5d0a637efec044d57ec05efb","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","19b15db2edd4d6bec35a41e44d8f1afe6384a905","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}