{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      // TODO: if empty boolean query return NullQuery?\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      // TODO: if empty boolean query return NullQuery?\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      // TODO: if empty boolean query return NullQuery?\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      Query result = super.rewrite(reader, query);\n      assert result instanceof BooleanQuery;\n      // TODO: if empty boolean query return NullQuery?\n      if (!((BooleanQuery) result).clauses().isEmpty()) {\n        // strip the scores off\n        result = new ConstantScoreQuery(new QueryWrapperFilter(result));\n        result.setBoost(query.getBoost());\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["744486748bc5bee772100e49230e5bca39bac99a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}