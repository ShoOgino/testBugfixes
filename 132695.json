{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = ((AtomicReaderContext)context).docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(ReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = ((AtomicReaderContext)context).docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de104801794a8b5bc33d6587f9865645141dfbf0","date":1294751779,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = ((AtomicReaderContext)context).docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"de104801794a8b5bc33d6587f9865645141dfbf0":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de104801794a8b5bc33d6587f9865645141dfbf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["de104801794a8b5bc33d6587f9865645141dfbf0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de104801794a8b5bc33d6587f9865645141dfbf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de104801794a8b5bc33d6587f9865645141dfbf0":["29ef99d61cda9641b6250bf9567329a6e65f901d","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["de104801794a8b5bc33d6587f9865645141dfbf0"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["6620df8541b174097b1133a4fc370adb2e570524"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}