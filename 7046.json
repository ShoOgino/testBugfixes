{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.shutdown();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.shutdown();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.shutdown();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.shutdown();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.shutdown();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.shutdown();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.shutdown();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.shutdown();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    try (DirectoryReader r = DirectoryReader.open(dirs[1])) {\n      TestUtil.addIndexesSlowly(writer, r);\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = DirectoryReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":["1123ce2cdec6831731a4eea0f7c3367b30e9788c","e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    try (DirectoryReader r = DirectoryReader.open(dirs[1])) {\n      TestUtil.addIndexesSlowly(writer, r);\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.getDocStats().numDocs);\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    try (DirectoryReader r = DirectoryReader.open(dirs[1])) {\n      TestUtil.addIndexesSlowly(writer, r);\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}