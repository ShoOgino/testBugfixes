{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(zkStateReader).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(zkStateReader).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(dataProvider).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(dataProvider).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(zkStateReader).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(zkStateReader).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae70f2df00762dfce0455c0e39381848762662e5","date":1539113410,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(dataProvider).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(dataProvider).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties(), collectionName);\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties(), collectionName);\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties());\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#setShardLeader(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection: {}\", collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties(), collectionName);\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","sourceOld":"  public ZkWriteCommand setShardLeader(ClusterState clusterState, ZkNodeProps message) {\n    StringBuilder sb = new StringBuilder();\n    String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n    String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n    sb.append(baseUrl);\n    if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n    sb.append(coreName == null ? \"\" : coreName);\n    if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n    String leaderUrl = sb.length() > 0 ? sb.toString() : null;\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollectionOrNull(collectionName);\n\n    if (coll == null) {\n      log.error(\"Could not mark shard leader for non existing collection:\" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Slice> slices = coll.getSlicesMap();\n    Slice slice = slices.get(sliceName);\n\n    Replica oldLeader = slice.getLeader();\n    final Map<String, Replica> newReplicas = new LinkedHashMap<>();\n    for (Replica replica : slice.getReplicas()) {\n      // TODO: this should only be calculated once and cached somewhere?\n      String coreURL = ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP), replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).unsetLeader(replica);\n      } else if (coreURL.equals(leaderUrl)) {\n        replica = new ReplicaMutator(cloudManager).setLeader(replica);\n      }\n\n      newReplicas.put(replica.getName(), replica);\n    }\n\n    Map<String, Object> newSliceProps = slice.shallowCopy();\n    newSliceProps.put(Slice.REPLICAS, newReplicas);\n    slice = new Slice(slice.getName(), newReplicas, slice.getProperties(), collectionName);\n    return new ZkWriteCommand(collectionName, CollectionMutator.updateSlice(collectionName, coll, slice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["ae70f2df00762dfce0455c0e39381848762662e5","6681d02f2302c363be938426e68f8dfd090cc1bf"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4abf821a41a2fdca2a1dea148999931d22e20529"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["ae70f2df00762dfce0455c0e39381848762662e5"],"ae70f2df00762dfce0455c0e39381848762662e5":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"4abf821a41a2fdca2a1dea148999931d22e20529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["ae70f2df00762dfce0455c0e39381848762662e5"],"ae70f2df00762dfce0455c0e39381848762662e5":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}