{"path":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","commits":[{"id":"7313a9540ff291178aa787bab4a0467caeea59a2","date":1330587303,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","pathOld":"/dev/null","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7313a9540ff291178aa787bab4a0467caeea59a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["7313a9540ff291178aa787bab4a0467caeea59a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7313a9540ff291178aa787bab4a0467caeea59a2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7313a9540ff291178aa787bab4a0467caeea59a2":["de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}