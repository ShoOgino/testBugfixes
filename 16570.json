{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/LegacyDocValuesIterables#sortedNumericToValues(DocValuesProducer,FieldInfo).mjava","commits":[{"id":"701377879d61cf6e2de072d11c76089338c0c3b2","date":1542374674,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/LegacyDocValuesIterables#sortedNumericToValues(DocValuesProducer,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#sortedNumericToValues(DocValuesProducer,FieldInfo).mjava","sourceNew":"  /** Converts all concatenated values (in docID order) from {@link SortedNumericDocValues} into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> sortedNumericToValues(final DocValuesProducer valuesProducer, final FieldInfo fieldInfo) {\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final SortedNumericDocValues values;\n        try {\n          values = valuesProducer.getSortedNumeric(fieldInfo);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n\n        return new Iterator<Number>() {\n          private boolean nextIsSet;\n          private int nextCount;\n          private int upto;\n          private long nextValue;\n\n          private void setNext() {\n            try {\n              if (nextIsSet == false) {\n                if (upto == nextCount) {\n                  values.nextDoc();\n                  if (values.docID() == NO_MORE_DOCS) {\n                    nextCount = 0;\n                    nextIsSet = false;\n                    return;\n                  } else {\n                    nextCount = values.docValueCount();\n                  }\n                  upto = 0;\n                }\n                nextValue = values.nextValue();\n                upto++;\n                nextIsSet = true;\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n          \n          @Override\n          public boolean hasNext() {\n            setNext();\n            return nextCount != 0;\n          }\n\n          @Override\n          public Number next() {\n            setNext();\n            assert nextCount != 0;\n            nextIsSet = false;\n            return nextValue;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts all concatenated values (in docID order) from {@link SortedNumericDocValues} into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link SortedDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> sortedNumericToValues(final DocValuesProducer valuesProducer, final FieldInfo fieldInfo) {\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final SortedNumericDocValues values;\n        try {\n          values = valuesProducer.getSortedNumeric(fieldInfo);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n\n        return new Iterator<Number>() {\n          private boolean nextIsSet;\n          private int nextCount;\n          private int upto;\n          private long nextValue;\n\n          private void setNext() {\n            try {\n              if (nextIsSet == false) {\n                if (upto == nextCount) {\n                  values.nextDoc();\n                  if (values.docID() == NO_MORE_DOCS) {\n                    nextCount = 0;\n                    nextIsSet = false;\n                    return;\n                  } else {\n                    nextCount = values.docValueCount();\n                  }\n                  upto = 0;\n                }\n                nextValue = values.nextValue();\n                upto++;\n                nextIsSet = true;\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n          \n          @Override\n          public boolean hasNext() {\n            setNext();\n            return nextCount != 0;\n          }\n\n          @Override\n          public Number next() {\n            setNext();\n            assert nextCount != 0;\n            nextIsSet = false;\n            return nextValue;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"701377879d61cf6e2de072d11c76089338c0c3b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["701377879d61cf6e2de072d11c76089338c0c3b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["701377879d61cf6e2de072d11c76089338c0c3b2"],"701377879d61cf6e2de072d11c76089338c0c3b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}