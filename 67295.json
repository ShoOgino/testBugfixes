{"path":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","commits":[{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41","date":1491555560,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : Math.max(0, previousValue + modifier * termFreqLocal));\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : Math.max(0, previousValue + modifier * termFreqLocal));\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f47bd829c0cc2c9959c321f4b5ffba15e58fa41"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0f47bd829c0cc2c9959c321f4b5ffba15e58fa41","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}