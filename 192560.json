{"path":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","commits":[{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38061899d760e06a12fe186bc1f09ca9ff0e64a6","date":1376491296,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n\n    components.setReader(r);\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName, r);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    } else {\n      components.setReader(r);\n    }\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n\n    components.setReader(r);\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Returns a TokenStream suitable for <code>fieldName</code>, tokenizing\n   * the contents of <code>text</code>.\n   * <p>\n   * This method uses {@link #createComponents(String)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components after resetting them\n   * through {@link TokenStreamComponents#setReader(Reader)}.\n   * <p>\n   * <b>NOTE:</b> After calling this method, the consumer must follow the \n   * workflow described in {@link TokenStream} to properly consume its contents.\n   * See the {@link org.apache.lucene.analysis Analysis package documentation} for\n   * some examples demonstrating this.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param text the String the streams source reads from\n   * @return TokenStream for iterating the analyzed content of <code>reader</code>\n   * @throws AlreadyClosedException if the Analyzer is closed.\n   * @throws IOException if an i/o error occurs (may rarely happen for strings).\n   * @see #tokenStream(String, Reader)\n   */\n  public final TokenStream tokenStream(final String fieldName, final String text) throws IOException {\n    TokenStreamComponents components = reuseStrategy.getReusableComponents(this, fieldName);\n    @SuppressWarnings(\"resource\") final ReusableStringReader strReader = \n        (components == null || components.reusableStringReader == null) ?\n        new ReusableStringReader() : components.reusableStringReader;\n    strReader.setValue(text);\n    final Reader r = initReader(fieldName, strReader);\n    if (components == null) {\n      components = createComponents(fieldName);\n      reuseStrategy.setReusableComponents(this, fieldName, components);\n    }\n\n    components.setReader(r);\n    components.reusableStringReader = strReader;\n    return components.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38061899d760e06a12fe186bc1f09ca9ff0e64a6":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c83d6c4335f31cae14f625a222bc842f20073dcd"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["38061899d760e06a12fe186bc1f09ca9ff0e64a6"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","38061899d760e06a12fe186bc1f09ca9ff0e64a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e859719dc778fb66d3d21e7be08cd408fc2bde98"]},"commit2Childs":{"38061899d760e06a12fe186bc1f09ca9ff0e64a6":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["38061899d760e06a12fe186bc1f09ca9ff0e64a6","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}