{"path":"lucene/src/java/org/apache/lucene/document/ValuesField#[T-extends-AbstractField]_set(T,Values).mjava","commits":[{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/ValuesField#[T-extends-AbstractField]_set(T,Values).mjava","pathOld":"/dev/null","sourceNew":"  public static <T extends AbstractField> T set(T field, Values type) {\n    if (field instanceof ValuesField)\n      return field;\n    final ValuesField valField = new ValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/ValuesField#[T-extends-AbstractField]_set(T,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/ValuesField#[T-extends-AbstractField]_set(T,Values).mjava","sourceNew":"  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof ValuesField)\n      return field;\n    final ValuesField valField = new ValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  public static <T extends AbstractField> T set(T field, Values type) {\n    if (field instanceof ValuesField)\n      return field;\n    final ValuesField valField = new ValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}