{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  public static void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#postDecorateResponse(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Put status, QTime, and possibly request handler and params, in the response header\n   */\n  public static void postDecorateResponse\n  (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime = (int) (req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if (exception != null) {\n      if (exception instanceof SolrException)\n        status = ((SolrException) exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\", status);\n    responseHeader.add(\"QTime\", qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\", status);\n      rsp.getToLog().add(\"QTime\", qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if (null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false)) {\n      responseHeader.add(\"handler\", handler.getName());\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get(CommonParams.HEADER_ECHO_PARAMS, null);\n    if (ep != null) {\n      EchoParamStyle echoParams = EchoParamStyle.get(ep);\n      if (echoParams == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\");\n      }\n      if (echoParams == EchoParamStyle.EXPLICIT) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if (echoParams == EchoParamStyle.ALL) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  /** Put status, QTime, and possibly request handler and params, in the response header */\n  public static void postDecorateResponse\n      (SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    NamedList<Object> responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(req.getRequestTimer().getTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n\n    if (rsp.getToLog().size() > 0) {\n      rsp.getToLog().add(\"status\",status);\n      rsp.getToLog().add(\"QTime\",qtime);\n    }\n\n    SolrParams params = req.getParams();\n    if( null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n\n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS\n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","9aea0485ecacb6734c17da2d02569816c23a69c1"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"da41004e1997059b4d0549fbeb56bf0858d14689":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["da41004e1997059b4d0549fbeb56bf0858d14689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96e0d4494fe54b31c7f0151f3a632124ab806351":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da41004e1997059b4d0549fbeb56bf0858d14689":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","da41004e1997059b4d0549fbeb56bf0858d14689"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","96e0d4494fe54b31c7f0151f3a632124ab806351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}