{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    this.closeLogReaders();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c04e9f4a7593565ed9314e589f7bd7056ec79b9a","date":1504114170,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df00ac20ec618ed997bacca597432d686193362d","date":1504183645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrjNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    @SuppressWarnings({\"rawtypes\"})\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#stateUpdate().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Inform the replicator manager of a change of state, and tell him to update its own state.\n   * </p>\n   * <p>\n   * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the\n   * scheduled thread poll.\n   * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop\n   * the thread pool.\n   * </p>\n   * <p>\n   * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.\n   * </p>\n   */\n  @Override\n  public synchronized void stateUpdate() {\n    if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {\n      if (replicatorStates.size() > 0)  {\n        this.bootstrapExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),\n            new SolrNamedThreadFactory(\"cdcr-bootstrap-status\"));\n      }\n      this.initLogReaders();\n      this.scheduler.start();\n      return;\n    }\n\n    this.scheduler.shutdown();\n    if (bootstrapExecutor != null)  {\n      IOUtils.closeQuietly(bootstrapStatusRunnable);\n      ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);\n    }\n    this.closeLogReaders();\n    @SuppressWarnings({\"rawtypes\"})\n    Callable callable = core.getSolrCoreState().getCdcrBootstrapCallable();\n    if (callable != null)  {\n      CdcrRequestHandler.BootstrapCallable bootstrapCallable = (CdcrRequestHandler.BootstrapCallable) callable;\n      IOUtils.closeQuietly(bootstrapCallable);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df00ac20ec618ed997bacca597432d686193362d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","c04e9f4a7593565ed9314e589f7bd7056ec79b9a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","df00ac20ec618ed997bacca597432d686193362d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["df00ac20ec618ed997bacca597432d686193362d"],"c04e9f4a7593565ed9314e589f7bd7056ec79b9a":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"df00ac20ec618ed997bacca597432d686193362d":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"c04e9f4a7593565ed9314e589f7bd7056ec79b9a":["df00ac20ec618ed997bacca597432d686193362d"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["df00ac20ec618ed997bacca597432d686193362d","3a7809d1d753b67f48b1a706e17034bf8b624ea3","c04e9f4a7593565ed9314e589f7bd7056ec79b9a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}