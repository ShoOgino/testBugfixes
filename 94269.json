{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","pathOld":"/dev/null","sourceNew":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    // if we need an extra slot for the \"missing\" bucket, and it wasn't able to be tacked onto the beginning,\n    // then lets add room for it at the end.\n    maxSlots = (freq.missing && startTermIndex != -1) ? nTerms + 1 : nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots;\n      maxSlots++;\n    } else {\n      allBucketsSlot = -1;\n    }\n    createAccs(nDocs, maxSlots);\n    setSortAcc(maxSlots);\n    prepareForCollection();\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","pathOld":"/dev/null","sourceNew":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    // if we need an extra slot for the \"missing\" bucket, and it wasn't able to be tacked onto the beginning,\n    // then lets add room for it at the end.\n    maxSlots = (freq.missing && startTermIndex != -1) ? nTerms + 1 : nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots;\n      maxSlots++;\n    } else {\n      allBucketsSlot = -1;\n    }\n    createAccs(nDocs, maxSlots);\n    setSortAcc(maxSlots);\n    prepareForCollection();\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n    if (freq.missing) {\n      missingSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    if (freq.missing) {\n      // TODO: optimize case when missingSlot can be contiguous with other slots\n      missingAcc = new SpecialSlotAcc(fcontext, collectAcc, missingSlot, otherAccs, 1);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    // if we need an extra slot for the \"missing\" bucket, and it wasn't able to be tacked onto the beginning,\n    // then lets add room for it at the end.\n    maxSlots = (freq.missing && startTermIndex != -1) ? nTerms + 1 : nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots;\n      maxSlots++;\n    } else {\n      allBucketsSlot = -1;\n    }\n    createAccs(nDocs, maxSlots);\n    setSortAcc(maxSlots);\n    prepareForCollection();\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"168f749bbf9022a1ba5fea29c54baa1c00883d1d","date":1437587676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n    if (freq.missing) {\n      missingSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    if (freq.missing) {\n      // TODO: optimize case when missingSlot can be contiguous with other slots\n      missingAcc = new SpecialSlotAcc(fcontext, collectAcc, missingSlot, otherAccs, 1);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#getFieldCacheCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#getFieldCacheCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArray#getFieldCacheCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFCBase[FacetField]#getFieldCacheCounts().mjava","sourceNew":null,"sourceOld":"  public SimpleOrderedMap<Object> getFieldCacheCounts() throws IOException {\n    String prefix = freq.prefix;\n    if (prefix == null || prefix.length() == 0) {\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n\n    findStartAndEndOrds();\n\n    maxSlots = nTerms;\n\n    if (freq.allBuckets) {\n      allBucketsSlot = maxSlots++;\n    }\n\n    createCollectAcc(nDocs, maxSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n\n    collectDocs();\n\n    return findTopSlots();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}