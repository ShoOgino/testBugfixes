{"path":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","date":1557431147,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", true);\n\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62facbbf49f5753b766d5d66140d1881c73e352f","date":1557682606,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", true);\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", true);\n\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b137ac261d96fa4d6176349645cfc0f68b9ba1e1","date":1558626214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", false);\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", true);\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testBasicReindexing\", false);\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testBasicReindexing().mjava","sourceNew":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testBasicReindexing() throws Exception {\n    final String sourceCollection = \"basicReindexing\";\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    final String targetCollection = \"basicReindexingTarget\";\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    CollectionAdminResponse rsp = req.process(solrClient);\n    assertNotNull(rsp.toString(), rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS));\n    Map<String, Object> status = (Map<String, Object>)rsp.getResponse().get(ReindexCollectionCmd.REINDEX_STATUS);\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"inputDocs\")).longValue());\n    assertEquals(status.toString(), (long)NUM_DOCS, ((Number)status.get(\"processedDocs\")).longValue());\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n\n    // verify the target docs exist\n    QueryResponse queryResponse = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, queryResponse.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3821108e77348b1cdb6baf5422727f926ba7af61"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"62facbbf49f5753b766d5d66140d1881c73e352f":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["3821108e77348b1cdb6baf5422727f926ba7af61"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"62facbbf49f5753b766d5d66140d1881c73e352f":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}