{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0de3540b8ac649ce50485c5f17cd9bc45a93af15","date":1343126226,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre class=\"prettyprint\">\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre class=\"prettyprint\">\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else {\n      reThrow(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre class=\"prettyprint\">\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre class=\"prettyprint\">\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else {\n      reThrow(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["8471c0f357621e859602d44e1af230581b739319"],"8471c0f357621e859602d44e1af230581b739319":["0de3540b8ac649ce50485c5f17cd9bc45a93af15"],"0de3540b8ac649ce50485c5f17cd9bc45a93af15":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0de3540b8ac649ce50485c5f17cd9bc45a93af15"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0de3540b8ac649ce50485c5f17cd9bc45a93af15"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0de3540b8ac649ce50485c5f17cd9bc45a93af15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"8471c0f357621e859602d44e1af230581b739319":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"0de3540b8ac649ce50485c5f17cd9bc45a93af15":["8471c0f357621e859602d44e1af230581b739319","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0de3540b8ac649ce50485c5f17cd9bc45a93af15","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}