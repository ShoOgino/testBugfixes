{"path":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","pathOld":"src/demo/org/apache/lucene/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n      \n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n    \n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n\t  System.out.println(\"deleting \" +\n\t\t\t     HTMLDocument.uid2url(uidIter.term().text()));\n\t  reader.delete(uidIter.term());\n\t  uidIter.next();\n\t}\n\tdeleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n      \n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n    \n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n\t  System.out.println(\"deleting \" +\n\t\t\t     HTMLDocument.uid2url(uidIter.term().text()));\n\t  reader.delete(uidIter.term());\n\t  uidIter.next();\n\t}\n\tdeleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51507f02c43eb5af1a493ce4c8e071bb20350b9a","date":1072630976,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n\t  System.out.println(\"deleting \" +\n\t\t\t     HTMLDocument.uid2url(uidIter.term().text()));\n\t  reader.delete(uidIter.term());\n\t  uidIter.next();\n\t}\n\tdeleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n      \n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n    \n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n\t  System.out.println(\"deleting \" +\n\t\t\t     HTMLDocument.uid2url(uidIter.term().text()));\n\t  reader.delete(uidIter.term());\n\t  uidIter.next();\n\t}\n\tdeleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708045cfc1d52936bd128b0062cadc083066235","date":1114985064,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.delete(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n\t  System.out.println(\"deleting \" +\n\t\t\t     HTMLDocument.uid2url(uidIter.term().text()));\n\t  reader.delete(uidIter.term());\n\t  uidIter.next();\n\t}\n\tdeleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.delete(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6880911c836817ac2521251b88f85d02c450ecb","date":1251223725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(new File(index)), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(index);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa700f486925d2ca49ef079eb9209fc07cdffa4","date":1251322093,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(new File(index)), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"f6880911c836817ac2521251b88f85d02c450ecb":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["e708045cfc1d52936bd128b0062cadc083066235"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["f6880911c836817ac2521251b88f85d02c450ecb"],"e708045cfc1d52936bd128b0062cadc083066235":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"]},"commit2Childs":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["e708045cfc1d52936bd128b0062cadc083066235"],"f6880911c836817ac2521251b88f85d02c450ecb":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["f6880911c836817ac2521251b88f85d02c450ecb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e708045cfc1d52936bd128b0062cadc083066235":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}