{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#countSecurityMetrics(MiniSolrCloudCluster,String,List[String]).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#countSecurityMetrics(MiniSolrCloudCluster,String,List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#countAuthMetrics(String).mjava","sourceNew":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param cluster the MiniSolrCloudCluster to fetch metrics from\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   * @param keys what keys to examine\n   */\n  Map<String,Long> countSecurityMetrics(MiniSolrCloudCluster cluster, String prefix, List<String> keys) {\n    List<Map<String, Metric>> metrics = new ArrayList<>();\n    cluster.getJettySolrRunners().forEach(r -> {\n      MetricRegistry registry = r.getCoreContainer().getMetricManager().registry(\"solr.node\");\n      assertNotNull(registry);\n      metrics.add(registry.getMetrics());\n    });\n\n    Map<String,Long> counts = new HashMap<>();\n    keys.forEach(k -> {\n      counts.put(k, sumCount(prefix, k, metrics));\n    });\n    return counts;\n  } \n\n","sourceOld":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  Map<String,Long> countAuthMetrics(String prefix) {\n    List<Map<String, Metric>> metrics = new ArrayList<>();\n    cluster.getJettySolrRunners().forEach(r -> {\n      MetricRegistry registry = r.getCoreContainer().getMetricManager().registry(\"solr.node\");\n      assertNotNull(registry);\n      metrics.add(registry.getMetrics());\n    });\n\n    Map<String,Long> counts = new HashMap<>();\n    AUTH_METRICS_KEYS.forEach(k -> {\n      counts.put(k, sumCount(prefix, k, metrics));\n    });\n    return counts;\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}