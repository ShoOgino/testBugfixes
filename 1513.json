{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRef term = new BytesRef();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term);\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRef term = new BytesRef();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term);\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identity conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identity conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identity conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identiy conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#convertFieldValueUsingType(SchemaField,Object).mjava","sourceNew":null,"sourceOld":"    /**\n     * Inspects a raw field value (which may come from a doc in the index, or a \n     * doc in the UpdateLog that still has String values, or a String sent by \n     * the user as a param) and if it is a String, asks the versionField FieldType \n     * to convert it to an Object suitable for comparison.\n     */\n    private Object convertFieldValueUsingType(SchemaField sf, final Object rawValue) {\n      if (rawValue instanceof CharSequence) {\n        // in theory, the FieldType might still be CharSequence based,\n        // but in that case trust it to do an identity conversion...\n        FieldType fieldType = userVersionField.getType();\n        BytesRefBuilder term = new BytesRefBuilder();\n        fieldType.readableToIndexed((CharSequence)rawValue, term);\n        return fieldType.toObject(userVersionField, term.get());\n      }\n      // else...\n      return rawValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f8973f28b29873ff0d7a016e562c9036ae649a9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3f8973f28b29873ff0d7a016e562c9036ae649a9","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["3f8973f28b29873ff0d7a016e562c9036ae649a9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}