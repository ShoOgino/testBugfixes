{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testFloor(CompiledAutomaton,String,String).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testFloor(CompiledAutomaton,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testFloor(CompiledAutomaton c, String input, String expected) {\n    final BytesRef b = new BytesRef(input);\n    final BytesRef result = c.floor(b, b);\n    if (expected == null) {\n      assertNull(result);\n    } else {\n      assertNotNull(result);\n      assertEquals(\"actual=\" + result.utf8ToString() + \" vs expected=\" + expected + \" (input=\" + input + \")\",\n                   result, new BytesRef(expected));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testFloor(CompiledAutomaton,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testFloor(CompiledAutomaton,String,String).mjava","sourceNew":"  private void testFloor(CompiledAutomaton c, String input, String expected) {\n    final BytesRef b = new BytesRef(input);\n    final BytesRef result = c.floor(b, b);\n    if (expected == null) {\n      assertNull(result);\n    } else {\n      assertNotNull(result);\n      assertEquals(\"actual=\" + result.utf8ToString() + \" vs expected=\" + expected + \" (input=\" + input + \")\",\n                   result, new BytesRef(expected));\n    }\n  }\n\n","sourceOld":"  private void testFloor(CompiledAutomaton c, String input, String expected) {\n    final BytesRef b = new BytesRef(input);\n    final BytesRef result = c.floor(b, b);\n    if (expected == null) {\n      assertNull(result);\n    } else {\n      assertNotNull(result);\n      assertEquals(\"actual=\" + result.utf8ToString() + \" vs expected=\" + expected + \" (input=\" + input + \")\",\n                   result, new BytesRef(expected));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}