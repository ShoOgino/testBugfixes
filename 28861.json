{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":null,"sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}