{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection,int,int).mjava","commits":[{"id":"27b43f9a8cc600a073ced9342cb6882853856049","date":1463221077,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection).mjava","sourceNew":"  /**\n   * Check that all replicas in a collection are live\n   *\n   * @see CollectionStatePredicate\n   */\n  public static boolean isFullyActive(Set<String> liveNodes, DocCollection collectionState,\n                                      int expectedShards, int expectedReplicas) {\n    Objects.requireNonNull(liveNodes);\n    if (collectionState == null)\n      return false;\n    int activeShards = 0;\n    for (Slice slice : collectionState) {\n      int activeReplicas = 0;\n      for (Replica replica : slice) {\n        if (replica.isActive(liveNodes) == false)\n          return false;\n        activeReplicas++;\n      }\n      if (activeReplicas != expectedReplicas)\n        return false;\n      activeShards++;\n    }\n    return activeShards == expectedShards;\n  }\n\n","sourceOld":"  /**\n   * Check that all replicas in a collection are live\n   *\n   * @see CollectionStatePredicate\n   */\n  public static boolean isFullyActive(Set<String> liveNodes, DocCollection collectionState) {\n    Objects.requireNonNull(liveNodes);\n    if (collectionState == null)\n      return false;\n    for (Slice slice : collectionState) {\n      for (Replica replica : slice) {\n        if (replica.isActive(liveNodes) == false)\n          return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that all replicas in a collection are live\n   *\n   * @see CollectionStatePredicate\n   */\n  public static boolean isFullyActive(Set<String> liveNodes, DocCollection collectionState,\n                                      int expectedShards, int expectedReplicas) {\n    Objects.requireNonNull(liveNodes);\n    if (collectionState == null)\n      return false;\n    int activeShards = 0;\n    for (Slice slice : collectionState) {\n      int activeReplicas = 0;\n      for (Replica replica : slice) {\n        if (replica.isActive(liveNodes) == false)\n          return false;\n        activeReplicas++;\n      }\n      if (activeReplicas != expectedReplicas)\n        return false;\n      activeShards++;\n    }\n    return activeShards == expectedShards;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that all replicas in a collection are live\n   *\n   * @see CollectionStatePredicate\n   */\n  public static boolean isFullyActive(Set<String> liveNodes, DocCollection collectionState,\n                                      int expectedShards, int expectedReplicas) {\n    Objects.requireNonNull(liveNodes);\n    if (collectionState == null)\n      return false;\n    int activeShards = 0;\n    for (Slice slice : collectionState) {\n      int activeReplicas = 0;\n      for (Replica replica : slice) {\n        if (replica.isActive(liveNodes) == false)\n          return false;\n        activeReplicas++;\n      }\n      if (activeReplicas != expectedReplicas)\n        return false;\n      activeShards++;\n    }\n    return activeShards == expectedShards;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#isFullyActive(Set[String],DocCollection,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that all replicas in a collection are live\n   *\n   * @see CollectionStatePredicate\n   */\n  public static boolean isFullyActive(Set<String> liveNodes, DocCollection collectionState,\n                                      int expectedShards, int expectedReplicas) {\n    Objects.requireNonNull(liveNodes);\n    if (collectionState == null)\n      return false;\n    int activeShards = 0;\n    for (Slice slice : collectionState) {\n      int activeReplicas = 0;\n      for (Replica replica : slice) {\n        if (replica.isActive(liveNodes) == false)\n          return false;\n        activeReplicas++;\n      }\n      if (activeReplicas != expectedReplicas)\n        return false;\n      activeShards++;\n    }\n    return activeShards == expectedShards;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27b43f9a8cc600a073ced9342cb6882853856049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27b43f9a8cc600a073ced9342cb6882853856049"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27b43f9a8cc600a073ced9342cb6882853856049","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"27b43f9a8cc600a073ced9342cb6882853856049":["0ad30c6a479e764150a3316e57263319775f1df2"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}