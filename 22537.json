{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final InvertedFieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final InvertedFieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879f5e74b68e6faa45251db337bb1e1a9e9be647","date":1350008268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      // nocommit\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      // nocommit\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":["fc834f3412d287003cc04691da380b69ab983239","7b91922b55d15444d554721b352861d028eb8278","6616b1fd222bb5a60f7f7856ace312252bc97890"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(2);\n    /*\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n    */\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(2);\n    /*\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n    */\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(state, postingsReader);\n    }\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","date":1412165020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdfd4a8fd5df3958475e4dde3633adb237373a27","date":1412166431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29a93e7fb303505e4a719e87f378d9a45db981d0","date":1412167802,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.directory,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.directory,\n                                      state.fieldInfos,\n                                      state.segmentInfo,\n                                      postingsReader,\n                                      state.context,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(state.directory,\n                                              state.fieldInfos,\n                                              state.segmentInfo,\n                                              postingsReader,\n                                              state.context,\n                                              state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.directory,\n                                          state.fieldInfos,\n                                          state.segmentInfo,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.directory.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, Lucene50PostingsFormat.FSTLoadMode.AUTO);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, Lucene50PostingsFormat.FSTLoadMode.AUTO);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene50PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(3);\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 2) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(3);\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 2) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 3) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(5);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 3) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final ChecksumIndexInput in = state.directory.openChecksumInput(seedFileName, state.context);\n    CodecUtil.checkIndexHeader(in, \"MockRandomSeed\", 0, 0, state.segmentInfo.getId(), state.segmentSuffix);\n    final long seed = in.readLong();\n    CodecUtil.checkFooter(in);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);\n\n    final FieldsProducer fields;\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsReader(state, postingsReader);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 1) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(postingsReader, state, RandomPicks.randomFrom(random, BlockTreeTermsReader.FSTLoadMode.values()));\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else if (t1 == 2) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n\n        if (doFixedGap) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader, postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    } else if (t1 == 3) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading OrdsBlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsReader(postingsReader, state);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["938935e3efe6aaecb925448d7f992783247366de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"9bb9a29a5e71a90295f175df8919802993142c9a":["fbaae1c00d39df2c872bbe043af26d02d3818313","29a93e7fb303505e4a719e87f378d9a45db981d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29a93e7fb303505e4a719e87f378d9a45db981d0":["cdfd4a8fd5df3958475e4dde3633adb237373a27"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a45bec74b98f6fc05f52770cfb425739e6563960","56df73d43b6fc340f5332322862382c7e30f4368"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cdfd4a8fd5df3958475e4dde3633adb237373a27":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["879f5e74b68e6faa45251db337bb1e1a9e9be647"],"99eb4a732d1a908f4636ace52928876136bf1896":["29a93e7fb303505e4a719e87f378d9a45db981d0"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a45bec74b98f6fc05f52770cfb425739e6563960":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"938935e3efe6aaecb925448d7f992783247366de":["71488d7f5786ae87541276121ecb69705a11a295"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["6e5adcbe5a27941451fdb6194bcbff96c8630e14","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"71488d7f5786ae87541276121ecb69705a11a295":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["fc834f3412d287003cc04691da380b69ab983239"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fc834f3412d287003cc04691da380b69ab983239":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","71488d7f5786ae87541276121ecb69705a11a295"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["6e5adcbe5a27941451fdb6194bcbff96c8630e14","6616b1fd222bb5a60f7f7856ace312252bc97890"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","dc97c61094c5498702b29cc2e8309beac50c23dc"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","99eb4a732d1a908f4636ace52928876136bf1896"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","5eb2511ababf862ea11e10761c70ee560cd84510"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["cdfd4a8fd5df3958475e4dde3633adb237373a27"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["6616b1fd222bb5a60f7f7856ace312252bc97890"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29a93e7fb303505e4a719e87f378d9a45db981d0":["9bb9a29a5e71a90295f175df8919802993142c9a","99eb4a732d1a908f4636ace52928876136bf1896"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["fc834f3412d287003cc04691da380b69ab983239","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cdfd4a8fd5df3958475e4dde3633adb237373a27":["29a93e7fb303505e4a719e87f378d9a45db981d0"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"6613659748fe4411a7dcf85266e55db1f95f7315":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a","5eb2511ababf862ea11e10761c70ee560cd84510"],"a45bec74b98f6fc05f52770cfb425739e6563960":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"938935e3efe6aaecb925448d7f992783247366de":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"71488d7f5786ae87541276121ecb69705a11a295":["938935e3efe6aaecb925448d7f992783247366de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"fc834f3412d287003cc04691da380b69ab983239":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d4d69c535930b5cce125cff868d40f6373dc27d4"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","9bb9a29a5e71a90295f175df8919802993142c9a"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["879f5e74b68e6faa45251db337bb1e1a9e9be647","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d0d1f90e969803cc84174589b5e4a39b7935fecd","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a45bec74b98f6fc05f52770cfb425739e6563960"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","db4fdbf3d262768eabc027cd8321edca0cd11fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}