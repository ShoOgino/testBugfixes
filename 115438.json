{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter#nextCapture().mjava","commits":[{"id":"40e1523ffd1c98c46180e96f5e5e3612267d09d0","date":1366798864,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter#nextCapture().mjava","pathOld":"/dev/null","sourceNew":"  private boolean nextCapture() {\n    int min_offset = Integer.MAX_VALUE;\n    currentMatcher = -1;\n    Matcher matcher;\n\n    for (int i = 0; i < matchers.length; i++) {\n      matcher = matchers[i];\n      if (currentGroup[i] == -1) {\n        currentGroup[i] = matcher.find() ? 1 : 0;\n      }\n      if (currentGroup[i] != 0) {\n        while (currentGroup[i] < groupCounts[i] + 1) {\n          final int start = matcher.start(currentGroup[i]);\n          final int end = matcher.end(currentGroup[i]);\n          if (start == end || preserveOriginal && start == 0\n              && spare.length == end) {\n            currentGroup[i]++;\n            continue;\n          }\n          if (start < min_offset) {\n            min_offset = start;\n            currentMatcher = i;\n          }\n          break;\n        }\n        if (currentGroup[i] == groupCounts[i] + 1) {\n          currentGroup[i] = -1;\n          i--;\n        }\n      }\n    }\n    return currentMatcher != -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter#nextCapture().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter#nextCapture().mjava","sourceNew":"  private boolean nextCapture() {\n    int min_offset = Integer.MAX_VALUE;\n    currentMatcher = -1;\n    Matcher matcher;\n\n    for (int i = 0; i < matchers.length; i++) {\n      matcher = matchers[i];\n      if (currentGroup[i] == -1) {\n        currentGroup[i] = matcher.find() ? 1 : 0;\n      }\n      if (currentGroup[i] != 0) {\n        while (currentGroup[i] < groupCounts[i] + 1) {\n          final int start = matcher.start(currentGroup[i]);\n          final int end = matcher.end(currentGroup[i]);\n          if (start == end || preserveOriginal && start == 0\n              && spare.length() == end) {\n            currentGroup[i]++;\n            continue;\n          }\n          if (start < min_offset) {\n            min_offset = start;\n            currentMatcher = i;\n          }\n          break;\n        }\n        if (currentGroup[i] == groupCounts[i] + 1) {\n          currentGroup[i] = -1;\n          i--;\n        }\n      }\n    }\n    return currentMatcher != -1;\n  }\n\n","sourceOld":"  private boolean nextCapture() {\n    int min_offset = Integer.MAX_VALUE;\n    currentMatcher = -1;\n    Matcher matcher;\n\n    for (int i = 0; i < matchers.length; i++) {\n      matcher = matchers[i];\n      if (currentGroup[i] == -1) {\n        currentGroup[i] = matcher.find() ? 1 : 0;\n      }\n      if (currentGroup[i] != 0) {\n        while (currentGroup[i] < groupCounts[i] + 1) {\n          final int start = matcher.start(currentGroup[i]);\n          final int end = matcher.end(currentGroup[i]);\n          if (start == end || preserveOriginal && start == 0\n              && spare.length == end) {\n            currentGroup[i]++;\n            continue;\n          }\n          if (start < min_offset) {\n            min_offset = start;\n            currentMatcher = i;\n          }\n          break;\n        }\n        if (currentGroup[i] == groupCounts[i] + 1) {\n          currentGroup[i] = -1;\n          i--;\n        }\n      }\n    }\n    return currentMatcher != -1;\n  }\n\n","bugFix":["40e1523ffd1c98c46180e96f5e5e3612267d09d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["40e1523ffd1c98c46180e96f5e5e3612267d09d0"],"40e1523ffd1c98c46180e96f5e5e3612267d09d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40e1523ffd1c98c46180e96f5e5e3612267d09d0"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40e1523ffd1c98c46180e96f5e5e3612267d09d0":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}