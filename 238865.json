{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(ReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(ReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, ScorerContext.def());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, ScorerContext.def());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, ScorerContext.def());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(context, ScorerContext.def())).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = context.reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, ScorerContext.def());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppyDocScorer docScorer = similarity.sloppyDocScorer(stats, query.getField(), context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.freq();\n        SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"1291e4568eb7d9463d751627596ef14baf4c1603":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}