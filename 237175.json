{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","commits":[{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    if (supportsPolygons()) {\n      verifyRandomPolygons(lats, lons);\n    }\n  }\n\n","sourceOld":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    if (supportsPolygons()) {\n      verifyRandomPolygons(lats, lons);\n    }\n  }\n\n","sourceOld":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["713122036535651642e6d4fe57ce12b449e18473","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"713122036535651642e6d4fe57ce12b449e18473":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}