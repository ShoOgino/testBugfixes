{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter.JmxObjectNameFactory#createName(String,String,String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter.JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a hierarchical name of a metric.\n     *\n     * @param type    metric class, eg. \"counters\"\n     * @param currentDomain  JMX domain\n     * @param name    metric name\n     */\n    @Override\n    public ObjectName createName(String type, String currentDomain, String name) {\n      SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n      // It turns out that ObjectName(String) mostly preserves key ordering\n      // as specified in the constructor (except for the 'type' key that ends\n      // up at top level) - unlike ObjectName(String, Map) constructor\n      // that seems to have a mind of its own...\n      StringBuilder sb = new StringBuilder();\n      if (domain.equals(currentDomain)) {\n        if (subdomains != null && subdomains.length > 1) {\n          // use only first segment as domain\n          sb.append(subdomains[0]);\n          sb.append(':');\n          // use remaining segments as properties\n          for (int i = 1; i < subdomains.length; i++) {\n            if (i > 1) {\n              sb.append(',');\n            }\n            sb.append(\"dom\");\n            sb.append(String.valueOf(i));\n            sb.append('=');\n            sb.append(subdomains[i]);\n          }\n          sb.append(','); // separate from other properties\n        } else {\n          sb.append(currentDomain);\n          sb.append(':');\n        }\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n      sb.append(\"reporter=\");\n      sb.append(reporterName);\n      sb.append(',');\n      if (metricInfo != null) {\n        sb.append(\"category=\");\n        sb.append(metricInfo.category.toString());\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n        // we could also split by type, but don't call it 'type' :)\n        // sb.append(\",class=\");\n        //sb.append(type);\n        sb.append(\",name=\");\n        sb.append(metricInfo.name);\n      } else {\n        // make dotted names into hierarchies\n        String[] path = name.split(\"\\\\.\");\n        for (int i = 0; i < path.length - 1; i++) {\n          if (i > 0) {\n            sb.append(',');\n          }\n          sb.append(\"name\"); sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(path[i]);\n        }\n        if (path.length > 1) {\n          sb.append(',');\n        }\n        // split by type\n        // sb.append(\"class=\");\n        // sb.append(type);\n        sb.append(\"name=\");\n        sb.append(path[path.length - 1]);\n      }\n\n      ObjectName objectName;\n\n      try {\n        objectName = new ObjectName(sb.toString());\n      } catch (MalformedObjectNameException e) {\n        throw new RuntimeException(sb.toString(), e);\n      }\n\n      return objectName;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter.JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a hierarchical name of a metric.\n     *\n     * @param type    metric class, eg. \"counters\"\n     * @param currentDomain  JMX domain\n     * @param name    metric name\n     */\n    @Override\n    public ObjectName createName(String type, String currentDomain, String name) {\n      SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n      // It turns out that ObjectName(String) mostly preserves key ordering\n      // as specified in the constructor (except for the 'type' key that ends\n      // up at top level) - unlike ObjectName(String, Map) constructor\n      // that seems to have a mind of its own...\n      StringBuilder sb = new StringBuilder();\n      if (domain.equals(currentDomain)) {\n        if (subdomains != null && subdomains.length > 1) {\n          // use only first segment as domain\n          sb.append(subdomains[0]);\n          sb.append(':');\n          // use remaining segments as properties\n          for (int i = 1; i < subdomains.length; i++) {\n            if (i > 1) {\n              sb.append(',');\n            }\n            sb.append(\"dom\");\n            sb.append(String.valueOf(i));\n            sb.append('=');\n            sb.append(subdomains[i]);\n          }\n          sb.append(','); // separate from other properties\n        } else {\n          sb.append(currentDomain);\n          sb.append(':');\n        }\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n      sb.append(\"reporter=\");\n      sb.append(reporterName);\n      sb.append(',');\n      if (metricInfo != null) {\n        sb.append(\"category=\");\n        sb.append(metricInfo.category.toString());\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n        // we could also split by type, but don't call it 'type' :)\n        // sb.append(\",class=\");\n        //sb.append(type);\n        sb.append(\",name=\");\n        sb.append(metricInfo.name);\n      } else {\n        // make dotted names into hierarchies\n        String[] path = name.split(\"\\\\.\");\n        for (int i = 0; i < path.length - 1; i++) {\n          if (i > 0) {\n            sb.append(',');\n          }\n          sb.append(\"name\"); sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(path[i]);\n        }\n        if (path.length > 1) {\n          sb.append(',');\n        }\n        // split by type\n        // sb.append(\"class=\");\n        // sb.append(type);\n        sb.append(\"name=\");\n        sb.append(path[path.length - 1]);\n      }\n\n      ObjectName objectName;\n\n      try {\n        objectName = new ObjectName(sb.toString());\n      } catch (MalformedObjectNameException e) {\n        throw new RuntimeException(sb.toString(), e);\n      }\n\n      return objectName;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter.JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Create a hierarchical name of a metric.\n     *\n     * @param type    metric class, eg. \"counters\"\n     * @param currentDomain  JMX domain\n     * @param name    metric name\n     */\n    @Override\n    public ObjectName createName(String type, String currentDomain, String name) {\n      SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n      // It turns out that ObjectName(String) mostly preserves key ordering\n      // as specified in the constructor (except for the 'type' key that ends\n      // up at top level) - unlike ObjectName(String, Map) constructor\n      // that seems to have a mind of its own...\n      StringBuilder sb = new StringBuilder();\n      if (domain.equals(currentDomain)) {\n        if (subdomains != null && subdomains.length > 1) {\n          // use only first segment as domain\n          sb.append(subdomains[0]);\n          sb.append(':');\n          // use remaining segments as properties\n          for (int i = 1; i < subdomains.length; i++) {\n            if (i > 1) {\n              sb.append(',');\n            }\n            sb.append(\"dom\");\n            sb.append(String.valueOf(i));\n            sb.append('=');\n            sb.append(subdomains[i]);\n          }\n          sb.append(','); // separate from other properties\n        } else {\n          sb.append(currentDomain);\n          sb.append(':');\n        }\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n      sb.append(\"reporter=\");\n      sb.append(reporterName);\n      sb.append(',');\n      if (metricInfo != null) {\n        sb.append(\"category=\");\n        sb.append(metricInfo.category.toString());\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n        // we could also split by type, but don't call it 'type' :)\n        // sb.append(\",class=\");\n        //sb.append(type);\n        sb.append(\",name=\");\n        sb.append(metricInfo.name);\n      } else {\n        // make dotted names into hierarchies\n        String[] path = name.split(\"\\\\.\");\n        for (int i = 0; i < path.length - 1; i++) {\n          if (i > 0) {\n            sb.append(',');\n          }\n          sb.append(\"name\"); sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(path[i]);\n        }\n        if (path.length > 1) {\n          sb.append(',');\n        }\n        // split by type\n        // sb.append(\"class=\");\n        // sb.append(type);\n        sb.append(\"name=\");\n        sb.append(path[path.length - 1]);\n      }\n\n      ObjectName objectName;\n\n      try {\n        objectName = new ObjectName(sb.toString());\n      } catch (MalformedObjectNameException e) {\n        throw new RuntimeException(sb.toString(), e);\n      }\n\n      return objectName;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter.JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Create a hierarchical name of a metric.\n     *\n     * @param type    metric class, eg. \"counters\"\n     * @param currentDomain  JMX domain\n     * @param name    metric name\n     */\n    @Override\n    public ObjectName createName(String type, String currentDomain, String name) {\n      SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n      // It turns out that ObjectName(String) mostly preserves key ordering\n      // as specified in the constructor (except for the 'type' key that ends\n      // up at top level) - unlike ObjectName(String, Map) constructor\n      // that seems to have a mind of its own...\n      StringBuilder sb = new StringBuilder();\n      if (domain.equals(currentDomain)) {\n        if (subdomains != null && subdomains.length > 1) {\n          // use only first segment as domain\n          sb.append(subdomains[0]);\n          sb.append(':');\n          // use remaining segments as properties\n          for (int i = 1; i < subdomains.length; i++) {\n            if (i > 1) {\n              sb.append(',');\n            }\n            sb.append(\"dom\");\n            sb.append(String.valueOf(i));\n            sb.append('=');\n            sb.append(subdomains[i]);\n          }\n          sb.append(','); // separate from other properties\n        } else {\n          sb.append(currentDomain);\n          sb.append(':');\n        }\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n      sb.append(\"reporter=\");\n      sb.append(reporterName);\n      sb.append(',');\n      if (metricInfo != null) {\n        sb.append(\"category=\");\n        sb.append(metricInfo.category.toString());\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n        // we could also split by type, but don't call it 'type' :)\n        // sb.append(\",class=\");\n        //sb.append(type);\n        sb.append(\",name=\");\n        sb.append(metricInfo.name);\n      } else {\n        // make dotted names into hierarchies\n        String[] path = name.split(\"\\\\.\");\n        for (int i = 0; i < path.length - 1; i++) {\n          if (i > 0) {\n            sb.append(',');\n          }\n          sb.append(\"name\"); sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(path[i]);\n        }\n        if (path.length > 1) {\n          sb.append(',');\n        }\n        // split by type\n        // sb.append(\"class=\");\n        // sb.append(type);\n        sb.append(\"name=\");\n        sb.append(path[path.length - 1]);\n      }\n\n      ObjectName objectName;\n\n      try {\n        objectName = new ObjectName(sb.toString());\n      } catch (MalformedObjectNameException e) {\n        throw new RuntimeException(sb.toString(), e);\n      }\n\n      return objectName;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["0265144286422ad99682a00904cc2536b79c8535"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}