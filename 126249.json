{"path":"solr/core/src/java/org/apache/solr/schema/StrField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","commits":[{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n    \n    // See LUCENE-6709\n    if (! field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return new SortedSetFieldSource(field.getName(), selectorType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n    \n    // See LUCENE-6709\n    if (! field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return new SortedSetFieldSource(field.getName(), selectorType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}