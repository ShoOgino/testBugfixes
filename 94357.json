{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd47401da6ebba418e39fb50b20e64532ce537","date":1366916599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        // LUCENE-4738: if we crashed while writing first\n        // commit it's possible index will be corrupt (by\n        // design we don't try to be smart about this case\n        // since that too risky):\n        if (SegmentInfos.getLastCommitGeneration(dir) > 1) {\n          _TestUtil.checkIndex(dir);\n        }\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        // LUCENE-4738: if we crashed while writing first\n        // commit it's possible index will be corrupt (by\n        // design we don't try to be smart about this case\n        // since that too risky):\n        if (SegmentInfos.getLastCommitGeneration(dir) > 1) {\n          TestUtil.checkIndex(dir);\n        }\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        // LUCENE-4738: if we crashed while writing first\n        // commit it's possible index will be corrupt (by\n        // design we don't try to be smart about this case\n        // since that too risky):\n        if (SegmentInfos.getLastCommitGeneration(dir) > 1) {\n          _TestUtil.checkIndex(dir);\n        }\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      BaseDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        // LUCENE-4738: if we crashed while writing first\n        // commit it's possible index will be corrupt (by\n        // design we don't try to be smart about this case\n        // since that too risky):\n        if (SegmentInfos.getLastCommitGeneration(dir) > 1) {\n          TestUtil.checkIndex(dir);\n        }\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c7bd47401da6ebba418e39fb50b20e64532ce537"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d19974432be9aed28ee7dca73bdf01d139e763a9"],"f4abec28b874149a7223e32cc7a01704c27790de":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"c7bd47401da6ebba418e39fb50b20e64532ce537":["d19974432be9aed28ee7dca73bdf01d139e763a9"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","c7bd47401da6ebba418e39fb50b20e64532ce537"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7bd47401da6ebba418e39fb50b20e64532ce537":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}