{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static Bits getDeletedDocs(IndexReader r) throws IOException {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      result = r.retrieveDelDocs();\n      if (result == null) {\n\n        final List<Bits> bits = new ArrayList<Bits>();\n        final List<Integer> starts = new ArrayList<Integer>();\n\n        final int maxDoc = new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            // record all delDocs, even if they are null\n            bits.add(r.getDeletedDocs());\n            starts.add(base);\n          }\n        }.run();\n        starts.add(maxDoc);\n\n        assert bits.size() > 0;\n        if (bits.size() == 1) {\n          // Only one actual sub reader -- optimize this case\n          result = bits.get(0);\n        } else {\n          result = new MultiBits(bits, starts);\n        }\n        r.storeDelDocs(result);\n      }\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<IndexReader> readers = new ArrayList<IndexReader>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              readers.add(r);\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert readers.size() > 0;\n      if (readers.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = readers.get(0).getDeletedDocs();\n      } else {\n        int[] startsArray = new int[starts.size()];\n        for(int i=0;i<startsArray.length;i++) {\n          startsArray[i] = starts.get(i);\n        }\n        result = new MultiReaderBits(startsArray, readers.toArray(new IndexReader[readers.size()]));\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) throws IOException {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      result = r.retrieveDelDocs();\n      if (result == null) {\n\n        final List<Bits> bits = new ArrayList<Bits>();\n        final List<Integer> starts = new ArrayList<Integer>();\n\n        final int maxDoc = new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            // record all delDocs, even if they are null\n            bits.add(r.getDeletedDocs());\n            starts.add(base);\n          }\n        }.run();\n        starts.add(maxDoc);\n\n        assert bits.size() > 0;\n        if (bits.size() == 1) {\n          // Only one actual sub reader -- optimize this case\n          result = bits.get(0);\n        } else {\n          result = new MultiBits(bits, starts);\n        }\n        r.storeDelDocs(result);\n      }\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<IndexReader> readers = new ArrayList<IndexReader>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              readers.add(r);\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert readers.size() > 0;\n      if (readers.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = readers.get(0).getDeletedDocs();\n      } else {\n        int[] startsArray = new int[starts.size()];\n        for(int i=0;i<startsArray.length;i++) {\n          startsArray[i] = starts.get(i);\n        }\n        result = new MultiReaderBits(startsArray, readers.toArray(new IndexReader[readers.size()]));\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) throws IOException {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      result = r.retrieveDelDocs();\n      if (result == null) {\n\n        final List<Bits> bits = new ArrayList<Bits>();\n        final List<Integer> starts = new ArrayList<Integer>();\n\n        final int maxDoc = new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            // record all delDocs, even if they are null\n            bits.add(r.getDeletedDocs());\n            starts.add(base);\n          }\n        }.run();\n        starts.add(maxDoc);\n\n        assert bits.size() > 0;\n        if (bits.size() == 1) {\n          // Only one actual sub reader -- optimize this case\n          result = bits.get(0);\n        } else {\n          result = new MultiBits(bits, starts);\n        }\n        r.storeDelDocs(result);\n      }\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6139142946c9bc5368fda3b7c38c6419e37c9773","date":1308767363,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> delDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              delDocs.add(r.getDeletedDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert delDocs.size() > 0;\n      if (delDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = delDocs.get(0);\n      } else {\n        result = new MultiBits(delDocs, starts);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<IndexReader> readers = new ArrayList<IndexReader>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              readers.add(r);\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert readers.size() > 0;\n      if (readers.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = readers.get(0).getDeletedDocs();\n      } else {\n        int[] startsArray = new int[starts.size()];\n        for(int i=0;i<startsArray.length;i++) {\n          startsArray[i] = starts.get(i);\n        }\n        result = new MultiReaderBits(startsArray, readers.toArray(new IndexReader[readers.size()]));\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> delDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              delDocs.add(r.getDeletedDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert delDocs.size() > 0;\n      if (delDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = delDocs.get(0);\n      } else {\n        result = new MultiBits(delDocs, starts);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<IndexReader> readers = new ArrayList<IndexReader>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              readers.add(r);\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert readers.size() > 0;\n      if (readers.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = readers.get(0).getDeletedDocs();\n      } else {\n        int[] startsArray = new int[starts.size()];\n        for(int i=0;i<startsArray.length;i++) {\n          startsArray[i] = starts.get(i);\n        }\n        result = new MultiReaderBits(startsArray, readers.toArray(new IndexReader[readers.size()]));\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> delDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              delDocs.add(r.getDeletedDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert delDocs.size() > 0;\n      if (delDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = delDocs.get(0);\n      } else {\n        result = new MultiBits(delDocs, starts);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":null,"sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> delDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              delDocs.add(r.getDeletedDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert delDocs.size() > 0;\n      if (delDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = delDocs.get(0);\n      } else {\n        result = new MultiBits(delDocs, starts);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":null,"sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<IndexReader> readers = new ArrayList<IndexReader>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              readers.add(r);\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert readers.size() > 0;\n      if (readers.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = readers.get(0).getDeletedDocs();\n      } else {\n        int[] startsArray = new int[starts.size()];\n        for(int i=0;i<startsArray.length;i++) {\n          startsArray[i] = starts.get(i);\n        }\n        result = new MultiReaderBits(startsArray, readers.toArray(new IndexReader[readers.size()]));\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6139142946c9bc5368fda3b7c38c6419e37c9773"],"6139142946c9bc5368fda3b7c38c6419e37c9773":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2553b00f699380c64959ccb27991289aae87be2e":["406e7055a3e99d3fa6ce49a555a51dd18b321806","6139142946c9bc5368fda3b7c38c6419e37c9773"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6139142946c9bc5368fda3b7c38c6419e37c9773":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["6139142946c9bc5368fda3b7c38c6419e37c9773","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}