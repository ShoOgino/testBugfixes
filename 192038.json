{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoShape#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoShape#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoShape#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.  Note well that this method is allowed to return \"true\"\n   * if there are internal edges of a composite shape which intersect the plane.\n   * Doing this can cause getRelationship() for most GeoBBox shapes to return\n   * OVERLAPS rather than the more correct CONTAINS, but that cannot be\n   * helped for some complex shapes that are built out of overlapping parts.\n   *\n   * @param plane         is the plane to assess for intersection with the shape's edges or\n   *                      bounding curves.\n   * @param notablePoints represents the intersections of the plane with the supplied\n   *                      bounds.  These are used to disambiguate when two planes are identical and it needs\n   *                      to be determined whether any points exist that fulfill all the bounds.\n   * @param bounds        are a set of bounds that define an area that an\n   *                      intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds);\n\n","sourceOld":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.  Note well that this method is allowed to return \"true\"\n   * if there are internal edges of a composite shape which intersect the plane.\n   * Doing this can cause getRelationship() for most GeoBBox shapes to return\n   * OVERLAPS rather than the more correct CONTAINS, but that cannot be\n   * helped for some complex shapes that are built out of overlapping parts.\n   *\n   * @param plane         is the plane to assess for intersection with the shape's edges or\n   *                      bounding curves.\n   * @param notablePoints represents the intersections of the plane with the supplied\n   *                      bounds.  These are used to disambiguate when two planes are identical and it needs\n   *                      to be determined whether any points exist that fulfill all the bounds.\n   * @param bounds        are a set of bounds that define an area that an\n   *                      intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoShape#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoShape#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.  Note well that this method is allowed to return \"true\"\n   * if there are internal edges of a composite shape which intersect the plane.\n   * Doing this can cause getRelationship() for most GeoBBox shapes to return\n   * OVERLAPS rather than the more correct CONTAINS, but that cannot be\n   * helped for some complex shapes that are built out of overlapping parts.\n   *\n   * @param plane         is the plane to assess for intersection with the shape's edges or\n   *                      bounding curves.\n   * @param notablePoints represents the intersections of the plane with the supplied\n   *                      bounds.  These are used to disambiguate when two planes are identical and it needs\n   *                      to be determined whether any points exist that fulfill all the bounds.\n   * @param bounds        are a set of bounds that define an area that an\n   *                      intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds);\n\n","sourceOld":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.  Note well that this method is allowed to return \"true\"\n   * if there are internal edges of a composite shape which intersect the plane.\n   * Doing this can cause getRelationship() for most GeoBBox shapes to return\n   * OVERLAPS rather than the more correct CONTAINS, but that cannot be\n   * helped for some complex shapes that are built out of overlapping parts.\n   *\n   * @param plane         is the plane to assess for intersection with the shape's edges or\n   *                      bounding curves.\n   * @param notablePoints represents the intersections of the plane with the supplied\n   *                      bounds.  These are used to disambiguate when two planes are identical and it needs\n   *                      to be determined whether any points exist that fulfill all the bounds.\n   * @param bounds        are a set of bounds that define an area that an\n   *                      intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}