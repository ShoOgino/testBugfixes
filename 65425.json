{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetTimeSeries().mjava","commits":[{"id":"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc","date":1524237108,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetTimeSeries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMemsetTimeSeries() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"memset(timeseries(\"+COLLECTIONORALIAS+\", \" +\n        \"                            q=\\\"*:*\\\", \" +\n        \"                            start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"                            end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"                            gap=\\\"+1YEAR\\\", \" +\n        \"                            field=\\\"test_dt\\\", \" +\n        \"                            count(*)), \" +\n        \"                 cols=\\\"count(*)\\\",\" +\n        \"                 vars=\\\"a\\\")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map<String, List<Number>> mem = (Map)tuples.get(0).get(\"return-value\");\n    List<Number> array = mem.get(\"a\");\n    assertEquals(array.get(0).intValue(), 100);\n    assertEquals(array.get(1).intValue(), 50);\n    assertEquals(array.get(2).intValue(), 50);\n    assertEquals(array.get(3).intValue(), 50);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetTimeSeries().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetTimeSeries().mjava","sourceNew":"  @Test\n  public void testMemsetTimeSeries() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"memset(timeseries(\"+COLLECTIONORALIAS+\", \" +\n        \"                            q=\\\"*:*\\\", \" +\n        \"                            start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"                            end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"                            gap=\\\"+1YEAR\\\", \" +\n        \"                            field=\\\"test_dt\\\", \" +\n        \"                            count(*)), \" +\n        \"                 cols=\\\"count(*)\\\",\" +\n        \"                 vars=\\\"a\\\")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, List<Number>> mem = (Map)tuples.get(0).get(\"return-value\");\n    List<Number> array = mem.get(\"a\");\n    assertEquals(array.get(0).intValue(), 100);\n    assertEquals(array.get(1).intValue(), 50);\n    assertEquals(array.get(2).intValue(), 50);\n    assertEquals(array.get(3).intValue(), 50);\n  }\n\n","sourceOld":"  @Test\n  public void testMemsetTimeSeries() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"memset(timeseries(\"+COLLECTIONORALIAS+\", \" +\n        \"                            q=\\\"*:*\\\", \" +\n        \"                            start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"                            end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"                            gap=\\\"+1YEAR\\\", \" +\n        \"                            field=\\\"test_dt\\\", \" +\n        \"                            count(*)), \" +\n        \"                 cols=\\\"count(*)\\\",\" +\n        \"                 vars=\\\"a\\\")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map<String, List<Number>> mem = (Map)tuples.get(0).get(\"return-value\");\n    List<Number> array = mem.get(\"a\");\n    assertEquals(array.get(0).intValue(), 100);\n    assertEquals(array.get(1).intValue(), 50);\n    assertEquals(array.get(2).intValue(), 50);\n    assertEquals(array.get(3).intValue(), 50);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}