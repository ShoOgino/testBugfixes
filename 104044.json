{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"/dev/null","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90","date":1371385497,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     postingsWriter.longsSize()));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135f40667e65c7c4488c5457956f54c20fd79a43","date":1371393873,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     postingsWriter.longsSize()));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135f40667e65c7c4488c5457956f54c20fd79a43":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["135f40667e65c7c4488c5457956f54c20fd79a43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["135f40667e65c7c4488c5457956f54c20fd79a43"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"135f40667e65c7c4488c5457956f54c20fd79a43":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}