{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      return disjuncts.get(0);\n    }\n    DisjunctionMaxQuery rewritten = new DisjunctionMaxQuery(tieBreakerMultiplier);\n    boolean actuallyRewritten = false;\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewritten.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return rewritten;\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      return disjuncts.get(0);\n    }\n    DisjunctionMaxQuery rewritten = new DisjunctionMaxQuery(tieBreakerMultiplier);\n    boolean actuallyRewritten = false;\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewritten.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return rewritten;\n    }\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d5e4281032c9ec1b5be8f3739eb412866aabc3d","date":1497625619,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    if (tieBreakerMultiplier == 1.0f) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Query sub : disjuncts) {\n        builder.add(sub, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    if (tieBreakerMultiplier == 1.0f) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Query sub : disjuncts) {\n        builder.add(sub, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    if (tieBreakerMultiplier == 1.0f) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Query sub : disjuncts) {\n        builder.add(sub, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.length == 1) {\n      return disjuncts[0];\n    }\n\n    boolean actuallyRewritten = false;\n    List<Query> rewrittenDisjuncts = new ArrayList<>();\n    for (Query sub : disjuncts) {\n      Query rewrittenSub = sub.rewrite(reader);\n      actuallyRewritten |= rewrittenSub != sub;\n      rewrittenDisjuncts.add(rewrittenSub);\n    }\n\n    if (actuallyRewritten) {\n      return new DisjunctionMaxQuery(rewrittenDisjuncts, tieBreakerMultiplier);\n    }\n\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d5e4281032c9ec1b5be8f3739eb412866aabc3d":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"28288370235ed02234a64753cdbf0c6ec096304a":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","2d5e4281032c9ec1b5be8f3739eb412866aabc3d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","2d5e4281032c9ec1b5be8f3739eb412866aabc3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2d5e4281032c9ec1b5be8f3739eb412866aabc3d","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"2d5e4281032c9ec1b5be8f3739eb412866aabc3d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}