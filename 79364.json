{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","commits":[{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenIfChanged();\n    } else {    \n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326990249d982376dfa2e6fd97c28f4580df4e7c","date":1323042771,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenIfChanged();\n    } else {    \n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenIfChanged();\n    } else {    \n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenIfChanged();\n    } else {    \n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected final CompositeIndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      throw new UnsupportedOperationException(\"This reader cannot be reopened from the given IndexWriter, as they don't match.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final CompositeIndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c2544b8b3c7bda548fc59c3ae1561dc332a8a3","date":1327873746,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      throw new UnsupportedOperationException(\"This reader cannot be reopened from the given IndexWriter, as they don't match.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      // fail by calling supers impl throwing UOE\n      return super.doOpenIfChanged(writer, applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader,IndexWriter,boolean)}.\n   * If this reader does not support reopen from {@link IndexWriter},\n   * throw {@link UnsupportedOperationException}.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException;\n\n","sourceOld":"  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader,IndexWriter,boolean)}.\n   * If this reader does not support reopen from {@link IndexWriter},\n   * throw {@link UnsupportedOperationException}.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException;\n\n","sourceOld":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader,IndexWriter,boolean)}.\n   * If this reader does not support reopen from {@link IndexWriter},\n   * throw {@link UnsupportedOperationException}.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["43369d257d14f61a881aa609962ef95e8a334d3a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["43369d257d14f61a881aa609962ef95e8a334d3a","326990249d982376dfa2e6fd97c28f4580df4e7c"],"43369d257d14f61a881aa609962ef95e8a334d3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["43369d257d14f61a881aa609962ef95e8a334d3a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","e9c2544b8b3c7bda548fc59c3ae1561dc332a8a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e9c2544b8b3c7bda548fc59c3ae1561dc332a8a3":["893d07555f01912f57b453a320e4d46363a31b50"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43369d257d14f61a881aa609962ef95e8a334d3a"],"893d07555f01912f57b453a320e4d46363a31b50":["e9c2544b8b3c7bda548fc59c3ae1561dc332a8a3"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"43369d257d14f61a881aa609962ef95e8a334d3a":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","326990249d982376dfa2e6fd97c28f4580df4e7c"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"e9c2544b8b3c7bda548fc59c3ae1561dc332a8a3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}