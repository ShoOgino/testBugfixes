{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"/dev/null","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"/dev/null","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"/dev/null","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (setAutoScalingConfig(currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = container.getZkController().zkStateReader.getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (zkSetAutoScalingConfig(container.getZkController().getZkStateReader(), currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (setAutoScalingConfig(currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (setAutoScalingConfig(currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#processOps(SolrQueryRequest,SolrQueryResponse,List[CommandOperation]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void processOps(SolrQueryRequest req, SolrQueryResponse rsp, List<CommandOperation> ops)\n      throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      AutoScalingConfig initialConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      AutoScalingConfig currentConfig = initialConfig;\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CMD_SET_TRIGGER:\n            currentConfig = handleSetTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_TRIGGER:\n            currentConfig = handleRemoveTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_LISTENER:\n            currentConfig = handleSetListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_LISTENER:\n            currentConfig = handleRemoveListener(req, rsp, op, currentConfig);\n            break;\n          case CMD_SUSPEND_TRIGGER:\n            currentConfig = handleSuspendTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_RESUME_TRIGGER:\n            currentConfig = handleResumeTrigger(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_POLICY:\n            currentConfig = handleSetPolicies(req, rsp, op, currentConfig);\n            break;\n          case CMD_REMOVE_POLICY:\n            currentConfig = handleRemovePolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_PREFERENCES:\n            currentConfig = handleSetClusterPreferences(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_CLUSTER_POLICY:\n            currentConfig = handleSetClusterPolicy(req, rsp, op, currentConfig);\n            break;\n          case CMD_SET_PROPERTIES:\n            currentConfig = handleSetProperties(req, rsp, op, currentConfig);\n            break;\n          default:\n            op.addError(\"Unknown command: \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in command payload\", errs);\n      }\n\n      if (!currentConfig.equals(initialConfig)) {\n        // update in ZK\n        if (setAutoScalingConfig(currentConfig)) {\n          break;\n        } else {\n          // someone else updated the config, get the latest one and re-apply our ops\n          rsp.getValues().add(\"retry\", \"initialVersion=\" + initialConfig.getZkVersion());\n          continue;\n        }\n      } else {\n        // no changes\n        break;\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["1bbcda32e5cd37ef61ea1190bacd080308e22070","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3590d254d013266ac3849fae45974e747f7f576"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}