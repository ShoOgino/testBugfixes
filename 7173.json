{"path":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","commits":[{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","bugFix":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testExceptions().mjava","sourceNew":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptions() throws Exception {\n    ImplicitSnitch implicitSnitch = new ImplicitSnitch();\n    ServerSnitchContext noNodeExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.NoNodeException();\n      }\n    };\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), noNodeExceptionSnitch);\n    Map map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), noNodeExceptionSnitch);\n    map = (Map) noNodeExceptionSnitch.retrieve(ZkStateReader.ROLES); // todo it the key really supposed to /roles.json?\n    assertNotNull(map);\n    assertEquals(0, map.size());\n\n    ServerSnitchContext keeperExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n      @Override\n      public Map getZkJson(String path) throws KeeperException, InterruptedException {\n        throw new KeeperException.ConnectionLossException();\n      }\n    };\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.ROLE), keeperExceptionSnitch));\n    expectThrows(SolrException.class, KeeperException.ConnectionLossException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.NODEROLE), keeperExceptionSnitch));\n\n    ServerSnitchContext remoteExceptionSnitch = new ServerSnitchContext(null, null, new HashMap<>(), null)  {\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        throw new RuntimeException();\n      }\n    };\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.CORES), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.DISK), remoteExceptionSnitch));\n    expectThrows(SolrException.class, RuntimeException.class, () -> implicitSnitch.getTags(\"\", Collections.singleton(ImplicitSnitch.SYSPROP + \"xyz\"), remoteExceptionSnitch));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"28288370235ed02234a64753cdbf0c6ec096304a":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}