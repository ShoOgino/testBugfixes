{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["056a7531b8f8d1a67282e6871a821169c1031ab2","056a7531b8f8d1a67282e6871a821169c1031ab2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fdb1d84f9e74320d318f682fd2b7d370398857","date":1355194688,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","date":1361552322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["056a7531b8f8d1a67282e6871a821169c1031ab2","056a7531b8f8d1a67282e6871a821169c1031ab2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"190779ba7de3fda15afd1bbafbc383720a4b0966","date":1384747256,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (slowFileExists(indexDir, fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (indexDir.fileExists(fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveAFile(Directory,Directory,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (slowFileExists(indexDir, fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean moveAFile(Directory tmpIdxDir, Directory indexDir, String fname, List<String> copiedfiles) {\n    LOG.debug(\"Moving file: {}\", fname);\n    boolean success = false;\n    try {\n      if (slowFileExists(indexDir, fname)) {\n        LOG.info(\"Skipping move file - it already exists:\" + fname);\n        return true;\n      }\n    } catch (IOException e) {\n      SolrException.log(LOG, \"could not check if a file exists\", e);\n      return false;\n    }\n    try {\n      solrCore.getDirectoryFactory().move(tmpIdxDir, indexDir, fname, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      success = true;\n    } catch (IOException e) {\n      SolrException.log(LOG, \"Could not move file\", e);\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","15fdb1d84f9e74320d318f682fd2b7d370398857"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["190779ba7de3fda15afd1bbafbc383720a4b0966"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","190779ba7de3fda15afd1bbafbc383720a4b0966"],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["15fdb1d84f9e74320d318f682fd2b7d370398857"],"190779ba7de3fda15afd1bbafbc383720a4b0966":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dea8e36e8c36d610840396c282a5affe3f722f4e"]},"commit2Childs":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","190779ba7de3fda15afd1bbafbc383720a4b0966"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["15fdb1d84f9e74320d318f682fd2b7d370398857","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126"],"190779ba7de3fda15afd1bbafbc383720a4b0966":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}