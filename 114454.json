{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIOContext(Random,IOContext).mjava","commits":[{"id":"b43cc463de57963524b3835202575c1662c9e927","date":1346784739,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIOContext(Random,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /** TODO: javadoc */\n  public static IOContext newIOContext(Random random, IOContext oldContext) {\n    final int randomNumDocs = random.nextInt(4192);\n    final int size = random.nextInt(512) * randomNumDocs;\n    if (oldContext.flushInfo != null) {\n      // Always return at least the estimatedSegmentSize of\n      // the incoming IOContext:\n      return new IOContext(new FlushInfo(randomNumDocs, Math.max(oldContext.flushInfo.estimatedSegmentSize, size)));\n    } else if (oldContext.mergeInfo != null) {\n      // Always return at least the estimatedMergeBytes of\n      // the incoming IOContext:\n      return new IOContext(new MergeInfo(randomNumDocs, Math.max(oldContext.mergeInfo.estimatedMergeBytes, size), random.nextBoolean(), _TestUtil.nextInt(random, 1, 100)));\n    } else {\n      // Make a totally random IOContext:\n      final IOContext context;\n      switch (random.nextInt(5)) {\n      case 0:\n        context = IOContext.DEFAULT;\n        break;\n      case 1:\n        context = IOContext.READ;\n        break;\n      case 2:\n        context = IOContext.READONCE;\n        break;\n      case 3:\n        context = new IOContext(new MergeInfo(randomNumDocs, size, true, -1));\n        break;\n      case 4:\n        context = new IOContext(new FlushInfo(randomNumDocs, size));\n        break;\n      default:\n        context = IOContext.DEFAULT;\n      }\n      return context;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIOContext(Random,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIOContext(Random,IOContext).mjava","sourceNew":"  /** TODO: javadoc */\n  public static IOContext newIOContext(Random random, IOContext oldContext) {\n    final int randomNumDocs = random.nextInt(4192);\n    final int size = random.nextInt(512) * randomNumDocs;\n    if (oldContext.flushInfo != null) {\n      // Always return at least the estimatedSegmentSize of\n      // the incoming IOContext:\n      return new IOContext(new FlushInfo(randomNumDocs, Math.max(oldContext.flushInfo.estimatedSegmentSize, size)));\n    } else if (oldContext.mergeInfo != null) {\n      // Always return at least the estimatedMergeBytes of\n      // the incoming IOContext:\n      return new IOContext(new MergeInfo(randomNumDocs, Math.max(oldContext.mergeInfo.estimatedMergeBytes, size), random.nextBoolean(), TestUtil.nextInt(random, 1, 100)));\n    } else {\n      // Make a totally random IOContext:\n      final IOContext context;\n      switch (random.nextInt(5)) {\n      case 0:\n        context = IOContext.DEFAULT;\n        break;\n      case 1:\n        context = IOContext.READ;\n        break;\n      case 2:\n        context = IOContext.READONCE;\n        break;\n      case 3:\n        context = new IOContext(new MergeInfo(randomNumDocs, size, true, -1));\n        break;\n      case 4:\n        context = new IOContext(new FlushInfo(randomNumDocs, size));\n        break;\n      default:\n        context = IOContext.DEFAULT;\n      }\n      return context;\n    }\n  }\n\n","sourceOld":"  /** TODO: javadoc */\n  public static IOContext newIOContext(Random random, IOContext oldContext) {\n    final int randomNumDocs = random.nextInt(4192);\n    final int size = random.nextInt(512) * randomNumDocs;\n    if (oldContext.flushInfo != null) {\n      // Always return at least the estimatedSegmentSize of\n      // the incoming IOContext:\n      return new IOContext(new FlushInfo(randomNumDocs, Math.max(oldContext.flushInfo.estimatedSegmentSize, size)));\n    } else if (oldContext.mergeInfo != null) {\n      // Always return at least the estimatedMergeBytes of\n      // the incoming IOContext:\n      return new IOContext(new MergeInfo(randomNumDocs, Math.max(oldContext.mergeInfo.estimatedMergeBytes, size), random.nextBoolean(), _TestUtil.nextInt(random, 1, 100)));\n    } else {\n      // Make a totally random IOContext:\n      final IOContext context;\n      switch (random.nextInt(5)) {\n      case 0:\n        context = IOContext.DEFAULT;\n        break;\n      case 1:\n        context = IOContext.READ;\n        break;\n      case 2:\n        context = IOContext.READONCE;\n        break;\n      case 3:\n        context = new IOContext(new MergeInfo(randomNumDocs, size, true, -1));\n        break;\n      case 4:\n        context = new IOContext(new FlushInfo(randomNumDocs, size));\n        break;\n      default:\n        context = IOContext.DEFAULT;\n      }\n      return context;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b43cc463de57963524b3835202575c1662c9e927":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b43cc463de57963524b3835202575c1662c9e927"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"b43cc463de57963524b3835202575c1662c9e927":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b43cc463de57963524b3835202575c1662c9e927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}