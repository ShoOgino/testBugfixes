{"path":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ {}: {}\", collectionName, shard, e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ \" + collectionName + \":\" + shard, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrProcessStateManager.ProcessStateWatcher#process(WatchedEvent).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (isCancelled) return; // if the watcher is cancelled, do nothing.\n      String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n      log.info(\"The CDCR process state has changed: {} @ {}:{}\", event, collectionName, shard);\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n      try {\n        CdcrParams.ProcessState state = CdcrParams.ProcessState.get(zkClient.getData(CdcrProcessStateManager.this.getZnodePath(), watcher, null, true));\n        log.info(\"Received new CDCR process state from watcher: {} @ {}:{}\", state, collectionName, shard);\n        CdcrProcessStateManager.this.setState(state);\n      } catch (KeeperException | InterruptedException e) {\n        log.warn(\"Failed synchronising new state @ {}: {}\", collectionName, shard, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}