{"path":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","sourceOld":"    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","sourceOld":"    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","sourceOld":"    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935f70a7f81b40214412e80660dc3ac1a2f9cc2","date":1380108480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public int fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      return (valueSize == 64) ? \n        NumericUtils.longToPrefixCoded(value, shift, bytes) :\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n    }\n\n","sourceOld":"    @Override\n    public int fillBytesRef() {\n      try {\n        assert valueSize == 64 || valueSize == 32;\n        return (valueSize == 64) ? \n          NumericUtils.longToPrefixCoded(value, shift, bytes) :\n          NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      } catch (IllegalArgumentException iae) {\n        // return empty token before first or after last\n        bytes.length = 0;\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      return (valueSize == 64) ? \n        NumericUtils.longToPrefixCoded(value, shift, bytes) :\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n      bytes.get();\n    }\n\n","sourceOld":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f51a4a8cbf122a2ad286e00756818f41e854b01","date":1408096553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n      bytes.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.NumericTermAttributeImpl#fillBytesRef().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void fillBytesRef() {\n      assert valueSize == 64 || valueSize == 32;\n      if (valueSize == 64) {\n        NumericUtils.longToPrefixCoded(value, shift, bytes);\n      } else {\n        NumericUtils.intToPrefixCoded((int) value, shift, bytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["5f51a4a8cbf122a2ad286e00756818f41e854b01"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["0935f70a7f81b40214412e80660dc3ac1a2f9cc2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f51a4a8cbf122a2ad286e00756818f41e854b01":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"0935f70a7f81b40214412e80660dc3ac1a2f9cc2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804b857d1066ab5185b3b9101bde41b0b71426ec"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"30fe9fa09df804ce770f1b667401a7a7647301ed":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f51a4a8cbf122a2ad286e00756818f41e854b01":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"0935f70a7f81b40214412e80660dc3ac1a2f9cc2":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5f51a4a8cbf122a2ad286e00756818f41e854b01"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0935f70a7f81b40214412e80660dc3ac1a2f9cc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}