{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","sourceNew":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton(true);\n      fstBuilder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","sourceOld":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton(true);\n      fstBuilder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","sourceNew":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstBuilder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","sourceOld":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton(true);\n      fstBuilder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","sourceNew":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","sourceOld":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstBuilder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","sourceNew":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstCompiler.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","sourceOld":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#FSTFieldWriter(FieldInfo,long).mjava","sourceNew":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstCompiler.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","sourceOld":"    public FSTFieldWriter(FieldInfo fieldInfo, long termsFilePointer) throws IOException {\n      this.fieldInfo = fieldInfo;\n      fstOutputs = PositiveIntOutputs.getSingleton();\n      fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, fstOutputs);\n      indexStart = out.getFilePointer();\n      ////System.out.println(\"VGW: field=\" + fieldInfo.name);\n\n      // Always put empty string in\n      fstBuilder.add(new IntsRef(), termsFilePointer);\n      startTermsFilePointer = termsFilePointer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}