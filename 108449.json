{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.buffer();\n            int termLength = termAtt.length();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.buffer();\n            int termLength = termAtt.length();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.buffer();\n            int termLength = termAtt.length();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}