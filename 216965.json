{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","commits":[{"id":"c682f5d8dbe387f95559e6bd61039b04c10b140d","date":1553913180,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"/dev/null","sourceNew":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    if (context.getHandler() instanceof PermissionNameProvider) {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n      if (permissionName == null || !predefinedPermission.name.equals(permissionName.name)) {\n        return false;\n      }\n    } else {\n      //all is special. it can match any\n      if(predefinedPermission.wellknownName != PermissionNameProvider.Name.ALL) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4","date":1553913192,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      return permissionName != null && predefinedPermission.name.equals(permissionName.name);\n    }\n  }\n\n","sourceOld":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    if (context.getHandler() instanceof PermissionNameProvider) {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n      if (permissionName == null || !predefinedPermission.name.equals(permissionName.name)) {\n        return false;\n      }\n    } else {\n      //all is special. it can match any\n      if(predefinedPermission.wellknownName != PermissionNameProvider.Name.ALL) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb842b7eba1323ec814496c88e41dc3264d1d4e0","date":1569005452,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a predefined perm\", predefinedPermission);\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      log.trace(\"'ALL' perm applies to all requests; perm applies.\");\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      log.trace(\"Request handler [{}] is not a PermissionNameProvider, perm doesnt apply\", context.getHandler());\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      boolean applies = permissionName != null && predefinedPermission.name.equals(permissionName.name);\n      log.trace(\"Request handler [{}] is associated with predefined perm [{}]? {}\",\n          handler, predefinedPermission.name, applies);\n      return applies;\n    }\n  }\n\n","sourceOld":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      return permissionName != null && predefinedPermission.name.equals(permissionName.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a predefined perm\", predefinedPermission);\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      log.trace(\"'ALL' perm applies to all requests; perm applies.\");\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Request handler [{}] is not a PermissionNameProvider, perm doesnt apply\", context.getHandler());\n      }\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      boolean applies = permissionName != null && predefinedPermission.name.equals(permissionName.name);\n      log.trace(\"Request handler [{}] is associated with predefined perm [{}]? {}\",\n          handler, predefinedPermission.name, applies);\n      return applies;\n    }\n  }\n\n","sourceOld":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a predefined perm\", predefinedPermission);\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      log.trace(\"'ALL' perm applies to all requests; perm applies.\");\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      log.trace(\"Request handler [{}] is not a PermissionNameProvider, perm doesnt apply\", context.getHandler());\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      boolean applies = permissionName != null && predefinedPermission.name.equals(permissionName.name);\n      log.trace(\"Request handler [{}] is associated with predefined perm [{}]? {}\",\n          handler, predefinedPermission.name, applies);\n      return applies;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#predefinedPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a predefined perm\", predefinedPermission);\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      log.trace(\"'ALL' perm applies to all requests; perm applies.\");\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Request handler [{}] is not a PermissionNameProvider, perm doesnt apply\", context.getHandler());\n      }\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      boolean applies = permissionName != null && predefinedPermission.name.equals(permissionName.name);\n      log.trace(\"Request handler [{}] is associated with predefined perm [{}]? {}\",\n          handler, predefinedPermission.name, applies);\n      return applies;\n    }\n  }\n\n","sourceOld":"  private boolean predefinedPermissionAppliesToRequest(Permission predefinedPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a predefined perm\", predefinedPermission);\n    if (predefinedPermission.wellknownName == PermissionNameProvider.Name.ALL) {\n      log.trace(\"'ALL' perm applies to all requests; perm applies.\");\n      return true; //'ALL' applies to everything!\n    } else if (! (context.getHandler() instanceof PermissionNameProvider)) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Request handler [{}] is not a PermissionNameProvider, perm doesnt apply\", context.getHandler());\n      }\n      return false; // We're not 'ALL', and the handler isn't associated with any other predefined permissions\n    } else {\n      PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n      PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n\n      boolean applies = permissionName != null && predefinedPermission.name.equals(permissionName.name);\n      log.trace(\"Request handler [{}] is associated with predefined perm [{}]? {}\",\n          handler, predefinedPermission.name, applies);\n      return applies;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"8076096f334b0665d0a69a63ee98ac09baad402b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["8076096f334b0665d0a69a63ee98ac09baad402b"],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}