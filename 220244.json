{"path":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#runCommands(int,int,SolrQueryRequest,Function[DistributedUpdateProcessor,Boolean]).mjava","commits":[{"id":"9b3824fcbd3256db359391630ae05b3917ab369a","date":1556656304,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#runCommands(int,int,SolrQueryRequest,Function[DistributedUpdateProcessor,Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return how many requests succeeded\n   */\n  private int runCommands(int threads, int versionBucketLockTimeoutMs, SolrQueryRequest req,\n      Function<DistributedUpdateProcessor,Boolean> function)\n      throws IOException {\n    try (DistributedUpdateProcessor processor = new DistributedUpdateProcessor(\n        req, null, null, null)) {\n      if (versionBucketLockTimeoutMs > 0) {\n        // use TimedVersionBucket with versionBucketLockTimeoutMs\n        VersionInfo vinfo = Mockito.spy(processor.vinfo);\n        processor.vinfo = vinfo;\n\n        doReturn(new TimedVersionBucket() {\n          /**\n           * simulate the case: it takes 5 seconds to add the doc\n           * \n           */\n          @Override\n          protected boolean tryLock(int lockTimeoutMs) {\n            boolean locked = super.tryLock(versionBucketLockTimeoutMs);\n            if (locked) {\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n            }\n            return locked;\n          }\n        }).when(vinfo).bucket(anyInt());\n      }\n      CountDownLatch latch = new CountDownLatch(1);\n      Collection<Future<Boolean>> futures = new ArrayList<>();\n      for (int t = 0; t < threads; ++t) {\n        futures.add(executor.submit(() -> {\n          latch.await();\n          return function.apply(processor);\n        }));\n      }\n      latch.countDown();\n\n      int succeeded = 0;\n      for (Future<Boolean> f : futures) {\n        try {\n          f.get();\n          succeeded++;\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        } catch (ExecutionException e) {\n          // do nothing\n        }\n      }\n      return succeeded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b3824fcbd3256db359391630ae05b3917ab369a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b3824fcbd3256db359391630ae05b3917ab369a"]},"commit2Childs":{"9b3824fcbd3256db359391630ae05b3917ab369a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b3824fcbd3256db359391630ae05b3917ab369a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}