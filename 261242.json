{"path":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","commits":[{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2)\n      return 0;\n\n    final int textStart1 = postingsArray.textStarts[term1];\n    final int textStart2 = postingsArray.textStarts[term2];\n    \n    final char[] text1 = charPool.buffers[textStart1 >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = textStart1 & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[textStart2 >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = textStart2 & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(RawPostingList p1, RawPostingList p2) {\n\n    if (p1 == p2)\n      return 0;\n\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2) {\n      // Our quicksort does this, eg during partition\n      return 0;\n    }\n\n    termBytePool.setBytesRef(perThread.tr1, postingsArray.textStarts[term1]);\n    termBytePool.setBytesRef(perThread.tr2, postingsArray.textStarts[term2]);\n\n    return termComp.compare(perThread.tr1, perThread.tr2);\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2)\n      return 0;\n\n    final int textStart1 = postingsArray.textStarts[term1];\n    final int textStart2 = postingsArray.textStarts[term2];\n    \n    final char[] text1 = charPool.buffers[textStart1 >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = textStart1 & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[textStart2 >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = textStart2 & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2) {\n      // Our quicksort does this, eg during partition\n      return 0;\n    }\n\n    termBytePool.setBytesRef(termsHash.tr1, postingsArray.textStarts[term1]);\n    termBytePool.setBytesRef(termsHash.tr2, postingsArray.textStarts[term2]);\n\n    return termComp.compare(termsHash.tr1, termsHash.tr2);\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2) {\n      // Our quicksort does this, eg during partition\n      return 0;\n    }\n\n    termBytePool.setBytesRef(perThread.tr1, postingsArray.textStarts[term1]);\n    termBytePool.setBytesRef(perThread.tr2, postingsArray.textStarts[term2]);\n\n    return termComp.compare(perThread.tr1, perThread.tr2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","sourceNew":null,"sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2) {\n      // Our quicksort does this, eg during partition\n      return 0;\n    }\n\n    termBytePool.setBytesRef(perThread.tr1, postingsArray.textStarts[term1]);\n    termBytePool.setBytesRef(perThread.tr2, postingsArray.textStarts[term2]);\n\n    return termComp.compare(perThread.tr1, perThread.tr2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(int,int).mjava","sourceNew":null,"sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(int term1, int term2) {\n\n    if (term1 == term2) {\n      // Our quicksort does this, eg during partition\n      return 0;\n    }\n\n    termBytePool.setBytesRef(termsHash.tr1, postingsArray.textStarts[term1]);\n    termBytePool.setBytesRef(termsHash.tr2, postingsArray.textStarts[term2]);\n\n    return termComp.compare(termsHash.tr1, termsHash.tr2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}