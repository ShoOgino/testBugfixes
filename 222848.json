{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","commits":[{"id":"ed17af04d41d7d9898d99896ef7ea108278adeb9","date":1562574355,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","pathOld":"/dev/null","sourceNew":"  // This duel gives compareBottom and compareTop some coverage\n  public void testDuelFloat() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    for (int d = 0; d < numDocs; ++d) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        float f;\n        do {\n          int freq = TestUtil.nextInt(random(), 1, (1 << 16) - 1);\n          f = FeatureField.decodeFeatureValue(freq);\n        } while (f < Float.MIN_NORMAL);\n        doc.add(new NumericDocValuesField(\"float\", Float.floatToIntBits(f)));\n        doc.add(new FeatureField(\"feature\", \"foo\", f));\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs topDocs = null;\n    TopDocs featureTopDocs = null;\n    do {\n      if (topDocs == null) {\n        topDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      } else {\n        topDocs = searcher.searchAfter(topDocs.scoreDocs[topDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.searchAfter(featureTopDocs.scoreDocs[featureTopDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      }\n\n      CheckHits.checkEqual(new MatchAllDocsQuery(), topDocs.scoreDocs, featureTopDocs.scoreDocs);\n    } while (topDocs.scoreDocs.length > 0);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35ff3b8e2f0b29a8113e02f55708e20b56d5abb0","date":1570441598,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","sourceNew":"  // This duel gives compareBottom and compareTop some coverage\n  public void testDuelFloat() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    for (int d = 0; d < numDocs; ++d) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        float f;\n        do {\n          int freq = TestUtil.nextInt(random(), 1, FeatureField.MAX_FREQ);\n          f = FeatureField.decodeFeatureValue(freq);\n        } while (f < Float.MIN_NORMAL);\n        doc.add(new NumericDocValuesField(\"float\", Float.floatToIntBits(f)));\n        doc.add(new FeatureField(\"feature\", \"foo\", f));\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs topDocs = null;\n    TopDocs featureTopDocs = null;\n    do {\n      if (topDocs == null) {\n        topDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      } else {\n        topDocs = searcher.searchAfter(topDocs.scoreDocs[topDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.searchAfter(featureTopDocs.scoreDocs[featureTopDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      }\n\n      CheckHits.checkEqual(new MatchAllDocsQuery(), topDocs.scoreDocs, featureTopDocs.scoreDocs);\n    } while (topDocs.scoreDocs.length > 0);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This duel gives compareBottom and compareTop some coverage\n  public void testDuelFloat() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    for (int d = 0; d < numDocs; ++d) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        float f;\n        do {\n          int freq = TestUtil.nextInt(random(), 1, (1 << 16) - 1);\n          f = FeatureField.decodeFeatureValue(freq);\n        } while (f < Float.MIN_NORMAL);\n        doc.add(new NumericDocValuesField(\"float\", Float.floatToIntBits(f)));\n        doc.add(new FeatureField(\"feature\", \"foo\", f));\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs topDocs = null;\n    TopDocs featureTopDocs = null;\n    do {\n      if (topDocs == null) {\n        topDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      } else {\n        topDocs = searcher.searchAfter(topDocs.scoreDocs[topDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.searchAfter(featureTopDocs.scoreDocs[featureTopDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      }\n\n      CheckHits.checkEqual(new MatchAllDocsQuery(), topDocs.scoreDocs, featureTopDocs.scoreDocs);\n    } while (topDocs.scoreDocs.length > 0);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testDuelFloat().mjava","sourceNew":"  // This duel gives compareBottom and compareTop some coverage\n  public void testDuelFloat() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    for (int d = 0; d < numDocs; ++d) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        float f;\n        do {\n          int freq = TestUtil.nextInt(random(), 1, FeatureField.MAX_FREQ);\n          f = FeatureField.decodeFeatureValue(freq);\n        } while (f < Float.MIN_NORMAL);\n        doc.add(new NumericDocValuesField(\"float\", Float.floatToIntBits(f)));\n        doc.add(new FeatureField(\"feature\", \"foo\", f));\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs topDocs = null;\n    TopDocs featureTopDocs = null;\n    do {\n      if (topDocs == null) {\n        topDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      } else {\n        topDocs = searcher.searchAfter(topDocs.scoreDocs[topDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.searchAfter(featureTopDocs.scoreDocs[featureTopDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      }\n\n      CheckHits.checkEqual(new MatchAllDocsQuery(), topDocs.scoreDocs, featureTopDocs.scoreDocs);\n    } while (topDocs.scoreDocs.length > 0);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This duel gives compareBottom and compareTop some coverage\n  public void testDuelFloat() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    for (int d = 0; d < numDocs; ++d) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        float f;\n        do {\n          int freq = TestUtil.nextInt(random(), 1, (1 << 16) - 1);\n          f = FeatureField.decodeFeatureValue(freq);\n        } while (f < Float.MIN_NORMAL);\n        doc.add(new NumericDocValuesField(\"float\", Float.floatToIntBits(f)));\n        doc.add(new FeatureField(\"feature\", \"foo\", f));\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs topDocs = null;\n    TopDocs featureTopDocs = null;\n    do {\n      if (topDocs == null) {\n        topDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.search(new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      } else {\n        topDocs = searcher.searchAfter(topDocs.scoreDocs[topDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(new SortField(\"float\", SortField.Type.FLOAT, true)));\n        featureTopDocs = searcher.searchAfter(featureTopDocs.scoreDocs[featureTopDocs.scoreDocs.length - 1],\n            new MatchAllDocsQuery(), 10,\n            new Sort(FeatureField.newFeatureSort(\"feature\", \"foo\")));\n      }\n\n      CheckHits.checkEqual(new MatchAllDocsQuery(), topDocs.scoreDocs, featureTopDocs.scoreDocs);\n    } while (topDocs.scoreDocs.length > 0);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35ff3b8e2f0b29a8113e02f55708e20b56d5abb0":["ed17af04d41d7d9898d99896ef7ea108278adeb9"],"ed17af04d41d7d9898d99896ef7ea108278adeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35ff3b8e2f0b29a8113e02f55708e20b56d5abb0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ed17af04d41d7d9898d99896ef7ea108278adeb9","35ff3b8e2f0b29a8113e02f55708e20b56d5abb0"]},"commit2Childs":{"35ff3b8e2f0b29a8113e02f55708e20b56d5abb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"ed17af04d41d7d9898d99896ef7ea108278adeb9":["35ff3b8e2f0b29a8113e02f55708e20b56d5abb0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed17af04d41d7d9898d99896ef7ea108278adeb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}