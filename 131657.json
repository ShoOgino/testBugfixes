{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    LightAutomaton single = new LightAutomaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    LightAutomaton repeat = BasicOperations.repeatLight(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    Automaton single = new Automaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    Automaton repeat = Operations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    LightAutomaton single = new LightAutomaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    LightAutomaton repeat = BasicOperations.repeatLight(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    Automaton single = new Automaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    Automaton repeat = Operations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // build an automaton matching this jvm's letter definition\n    State initial = new State();\n    State accept = new State();\n    accept.setAccept(true);\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        initial.addTransition(new Transition(i, i, accept));\n      }\n    }\n    Automaton single = new Automaton(initial);\n    single.reduce();\n    Automaton repeat = BasicOperations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#beforeClass().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Automaton single = new Automaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    Automaton repeat = Operations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    Automaton single = new Automaton();\n    int initial = single.createState();\n    int accept = single.createState();\n    single.setAccept(accept, true);\n\n    // build an automaton matching this jvm's letter definition\n    for (int i = 0; i <= 0x10FFFF; i++) {\n      if (Character.isLetter(i)) {\n        single.addTransition(initial, accept, i);\n      }\n    }\n    Automaton repeat = Operations.repeat(single);\n    jvmLetter = new CharacterRunAutomaton(repeat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["7530de27b87b961b51f01bd1299b7004d46e8823","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}