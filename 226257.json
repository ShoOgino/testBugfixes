{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","sourceNew":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","sourceNew":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","sourceNew":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","sourceNew":"    @Override\n    public BytesRef get(long id) {\n      try {\n        termsEnum.seekExact(id);\n        return termsEnum.term();\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer.CompressedBinaryDocValues#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#get(long,BytesRef).mjava","sourceNew":"    @Override\n    public BytesRef get(long id) {\n      try {\n        termsEnum.seekExact(id);\n        return termsEnum.term();\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(long id, BytesRef result) {\n      try {\n        termsEnum.seekExact(id);\n        BytesRef term = termsEnum.term();\n        result.bytes = term.bytes;\n        result.offset = term.offset;\n        result.length = term.length;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}