{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  @Deprecated\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  @Deprecated\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  @Deprecated\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a).setOpenMode(\n        create ? OpenMode.CREATE : OpenMode.APPEND).setMaxFieldLength(\n        mfl.getLimit()).setIndexDeletionPolicy(deletionPolicy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["068265517d1fbc623f5aeaee57fcd8df925678e4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}