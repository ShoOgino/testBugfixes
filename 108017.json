{"path":"solr/core/src/java/org/apache/solr/core/SolrPaths#assertPathAllowed(Path,Set[Path]).mjava","commits":[{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#assertPathAllowed(Path,Set[Path]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks that the given path is relative to one of the allowPaths supplied. Typically this will be\n   * called from {@link CoreContainer#assertPathAllowed(Path)} and allowPaths pre-filled with the node's\n   * SOLR_HOME, SOLR_DATA_HOME and coreRootDirectory folders, as well as any paths specified in\n   * solr.xml's allowPaths element. The following paths will always fail validation:\n   * <ul>\n   *   <li>Relative paths starting with <code>..</code></li>\n   *   <li>Windows UNC paths (such as <code>\\\\host\\share\\path</code>)</li>\n   *   <li>Paths which are not relative to any of allowPaths</li>\n   * </ul>\n   * @param pathToAssert path to check\n   * @param allowPaths list of paths that should be allowed prefixes for pathToAssert\n   * @throws SolrException if path is outside allowed paths\n   */\n  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed. UNC paths not supported. Please use drive letter instead.\");\n    }\n    // Conversion Path -> String -> Path is to be able to compare against org.apache.lucene.mockfile.FilterPath instances\n    final Path path = Path.of(pathToAssert.toString()).normalize();\n    if (path.startsWith(\"..\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed due to path traversal..\");\n    }\n    if (!path.isAbsolute()) return; // All relative paths are accepted\n    if (allowPaths.contains(Paths.get(\"_ALL_\"))) return; // Catch-all path \"*\"/\"_ALL_\" will allow all other paths\n    if (allowPaths.stream().noneMatch(p -> path.startsWith(Path.of(p.toString())))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + path + \" must be relative to SOLR_HOME, SOLR_DATA_HOME coreRootDirectory. Set system property 'solr.allowPaths' to add other allowed paths.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#assertPathAllowed(Path,Set[Path]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrPaths#assertPathAllowed(Path,Set[Path]).mjava","sourceNew":"  /**\n   * Checks that the given path is relative to one of the allowPaths supplied. Typically this will be\n   * called from {@link CoreContainer#assertPathAllowed(Path)} and allowPaths pre-filled with the node's\n   * SOLR_HOME, SOLR_DATA_HOME and coreRootDirectory folders, as well as any paths specified in\n   * solr.xml's allowPaths element. The following paths will always fail validation:\n   * <ul>\n   *   <li>Relative paths starting with <code>..</code></li>\n   *   <li>Windows UNC paths (such as <code>\\\\host\\share\\path</code>)</li>\n   *   <li>Paths which are not relative to any of allowPaths</li>\n   * </ul>\n   * @param pathToAssert path to check\n   * @param allowPaths list of paths that should be allowed prefixes for pathToAssert\n   * @throws SolrException if path is outside allowed paths\n   */\n  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n    if (pathToAssert == null) return;\n    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed. UNC paths not supported. Please use drive letter instead.\");\n    }\n    // Conversion Path -> String -> Path is to be able to compare against org.apache.lucene.mockfile.FilterPath instances\n    final Path path = Path.of(pathToAssert.toString()).normalize();\n    if (path.startsWith(\"..\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed due to path traversal..\");\n    }\n    if (!path.isAbsolute()) return; // All relative paths are accepted\n    if (allowPaths.contains(Paths.get(\"_ALL_\"))) return; // Catch-all path \"*\"/\"_ALL_\" will allow all other paths\n    if (allowPaths.stream().noneMatch(p -> path.startsWith(Path.of(p.toString())))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + path + \" must be relative to SOLR_HOME, SOLR_DATA_HOME coreRootDirectory. Set system property 'solr.allowPaths' to add other allowed paths.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks that the given path is relative to one of the allowPaths supplied. Typically this will be\n   * called from {@link CoreContainer#assertPathAllowed(Path)} and allowPaths pre-filled with the node's\n   * SOLR_HOME, SOLR_DATA_HOME and coreRootDirectory folders, as well as any paths specified in\n   * solr.xml's allowPaths element. The following paths will always fail validation:\n   * <ul>\n   *   <li>Relative paths starting with <code>..</code></li>\n   *   <li>Windows UNC paths (such as <code>\\\\host\\share\\path</code>)</li>\n   *   <li>Paths which are not relative to any of allowPaths</li>\n   * </ul>\n   * @param pathToAssert path to check\n   * @param allowPaths list of paths that should be allowed prefixes for pathToAssert\n   * @throws SolrException if path is outside allowed paths\n   */\n  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed. UNC paths not supported. Please use drive letter instead.\");\n    }\n    // Conversion Path -> String -> Path is to be able to compare against org.apache.lucene.mockfile.FilterPath instances\n    final Path path = Path.of(pathToAssert.toString()).normalize();\n    if (path.startsWith(\"..\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + pathToAssert + \" disallowed due to path traversal..\");\n    }\n    if (!path.isAbsolute()) return; // All relative paths are accepted\n    if (allowPaths.contains(Paths.get(\"_ALL_\"))) return; // Catch-all path \"*\"/\"_ALL_\" will allow all other paths\n    if (allowPaths.stream().noneMatch(p -> path.startsWith(Path.of(p.toString())))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Path \" + path + \" must be relative to SOLR_HOME, SOLR_DATA_HOME coreRootDirectory. Set system property 'solr.allowPaths' to add other allowed paths.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}