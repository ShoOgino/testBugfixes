{"path":"src/java/org/apache/solr/search/HashDocSet#unionSize(DocSet).mjava","commits":[{"id":"40315af5cee91832c085cc5a17c468000dbe8297","date":1149988547,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#unionSize(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int unionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=b.size();\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && !b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=other.size();\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && !other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d","date":1149992318,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#unionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#unionSize(DocSet).mjava","sourceNew":"  @Override\n  public int unionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // union count.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=b.size();\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && !b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=other.size();\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && !other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n  }\n\n","sourceOld":"  @Override\n  public int unionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=b.size();\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && !b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=other.size();\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && !other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280ae26026909c359d527e517864805ec8982963","date":1149994510,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/search/HashDocSet#unionSize(DocSet).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int unionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // union count.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=b.size();\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && !b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=other.size();\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && !other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"280ae26026909c359d527e517864805ec8982963":["29ea7f1003fb19ce1e61f6d9c237c47c04f0070d"],"40315af5cee91832c085cc5a17c468000dbe8297":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d":["40315af5cee91832c085cc5a17c468000dbe8297"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"280ae26026909c359d527e517864805ec8982963":[],"40315af5cee91832c085cc5a17c468000dbe8297":["29ea7f1003fb19ce1e61f6d9c237c47c04f0070d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["40315af5cee91832c085cc5a17c468000dbe8297"],"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d":["280ae26026909c359d527e517864805ec8982963"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280ae26026909c359d527e517864805ec8982963","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}