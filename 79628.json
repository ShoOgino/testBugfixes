{"path":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = new IndexSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = new IndexSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    LuceneTaxonomyReader taxReader = new LuceneTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157","date":1327935362,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    IndexReader reader1 = IndexReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}